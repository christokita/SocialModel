files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", runs[run], "/"), full.names = TRUE)
thresh_data <- list()
for (file in 1:length(files)) {
load(files[file])
thresh_data[[file]] <- listed_data
}
# Loop through individual graphs
interaction_info <- lapply(1:length(soc_networks), function(i) {
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
# For each each compute interaction matrix
# Get graph and make adjacency matrix
size_graph <- lapply(1:length(graphs), function(j) {
# Format: set diagonal, rescale, and make adj matrix
this_graph <- graphs[[j]]
diag(this_graph) <- NA
thresh <- as.data.frame(thresh_data[[i]][j])
thresh$ThreshRatio <- log(thresh$Thresh1 / thresh$Thresh2)
ratio <- order(thresh$ThreshRatio)
# Create order by threshold ratio
this_graph <- this_graph[ratio, ratio]
colnames(this_graph) <- 1:nrow(this_graph)
rownames(this_graph) <- colnames(this_graph)
g <- graph.adjacency(adjmatrix = this_graph, weighted = T)
edgelist_graph <- as.data.frame(get.edgelist(g))
names(edgelist_graph) <- c("From", "To")
edgelist_graph$Weight <- E(g)$weight
edgelist_graph$Interaction <- paste0(edgelist_graph$From, "-", edgelist_graph$To)
# return
return(edgelist_graph)
})
#Calculate baseline probability of interaction
dimensions <- dim(graphs[[1]])
not_chosen <- 1 - (( 1 / (dimensions[1] - 1)) * p)
expected_random <-  1 - not_chosen^2
# Bind
all_edgelist <- do.call("rbind", size_graph)
#  Calcualte 99% CI interval of interaction rate
edgelist_sig <- all_edgelist %>%
group_by(From, To, Interaction) %>%
# filter(!is.na(Weight)) %>%
summarise(samp_mean = mean(Weight),
samp_sd = sd(Weight),
samples = length(Weight)) %>%
mutate(error = qt(0.995,df = samples-1) * samp_sd/sqrt(samples),
CI_low = samp_mean - error,
CI_high = samp_mean + error) %>%
mutate(Lower_check = CI_low > expected_random,
Higher_check = CI_high > expected_random)
# Determine if it is different than random
edgelist_sig <- as.data.frame(edgelist_sig)
edgelist_sig$DiffDirection <- 0
edgelist_sig$DiffDirection[edgelist_sig$Lower_check & edgelist_sig$Higher_check] <- 1
edgelist_sig$DiffDirection[edgelist_sig$Lower_check==FALSE & edgelist_sig$Higher_check==FALSE] <- -1
# Make graph
edgelist_sig <- edgelist_sig %>%
summarise(Nonrandom = sum(DiffDirection!=0),
HigherThanRandom = sum(DiffDirection == 1),
LowerThanRandom = sum(DiffDirection == -1),
TotalInteractions = n()) %>%
mutate(PercentNonRandom = Nonrandom / TotalInteractions,
PercentHigher = HigherThanRandom / TotalInteractions,
PercentLower = LowerThanRandom / TotalInteractions,
n = dimensions[1],
Model = run_names[run])
# Return
print(paste0(run_names[run], ": ", dimensions[1]))
return(edgelist_sig)
})
# Bind and return
interaction_info <- do.call("rbind", interaction_info)
return(interaction_info)
})
# Bind
interaction_data <- do.call('rbind', interaction_rates)
# Graph
gg_interactions <- ggplot(interaction_data, aes(x = n, y = PercentNonRandom,
colour = Model, group = Model, fill = Model)) +
geom_line(size = 0.4) +
geom_point(size = 0.8, shape = 21) +
scale_y_continuous(limits = c(0, 1)) +
scale_color_manual(name = "Threshold type",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold type",
values = c("#ffffff", "#4d4d4d")) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab("% Non-random interactions") +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.position = "none")
gg_interactions
runs <- c("Sigma0.05-Epsilon0-Beta1.1",
"Sigma0-Epsilon0.1-Beta1.1")
run_names <- c("Fixed", "Social")
run = 1
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Stim/", runs[run], "/"), full.names = TRUE)
stim <- list()
for (file in 1:length(files)) {
load(files[file])
stim[[file]] <- listed_data
}
stim <- do.call("rbind", stim)
stim <- do.call("rbind", stim)
dim(stim)
stim <- list()
for (file in 1:length(files)) {
load(files[file])
stim[[file]] <- listed_data
}
stim <- do.call("rbind", stim)
dim(stim)
stim <- list()
print("Loading files.")
for (file in 1:length(files)) {
load(files[file])
stim[file] <- listed_data
}
# Load stim data
print(runs[run])
files <- list.files(paste0("output/Rdata/_ProcessedData/Stim/", runs[run], "/"), full.names = TRUE)
file = files[1]
load(file)
n <- as.numeric(gsub(".*/([0-9]+)\\.Rdata", "\\1", file, perl = T))
print(paste("Loaded: Group Size", n))
# Load group size data
load(file)
n <- as.numeric(gsub(".*/([0-9]+)\\.Rdata", "\\1", file, perl = T))
print(paste("Loaded: Group Size", n))
replicate <- listed_data[[1]]
replicate <- as.data.frame(replicate)
replicate <- replicate[-1, ] #remove time step 0
replicate$sTotal <- replicate$s1 + replicate$s2
# Grab first and last 1000 time steps
begin <- head(replicate, 1000)
end <- tail(replicate, 1000)
View(begin)
begin <- begin %>%
summarise(s1 = mean(s1),
s2 = mean(s2),
sTotal = mean(sTotal))
end <- end %>%
summarise(s1 = mean(s1),
s2 = mean(s2),
sTotal = mean(sTotal))
diff <- end - begin
View(diff)
# Summarise within each replicate
rep_data <- lapply(listed_data, function(replicate) {
replicate <- as.data.frame(replicate)
replicate <- replicate[-1, ] #remove time step 0
replicate$sTotal <- replicate$s1 + replicate$s2
# Grab first and last 1000 time steps
begin <- head(replicate, 1000)
end <- tail(replicate, 1000)
# Summarise
begin <- begin %>%
summarise(s1 = mean(s1),
s2 = mean(s2),
sTotal = mean(sTotal))
end <- end %>%
summarise(s1 = mean(s1),
s2 = mean(s2),
sTotal = mean(sTotal))
diff <- end - begin
return(diff)
})
rep_data <- do.call("rbind", rep_data)
View(rep_data)
stim_data_comp <- lapply(1:length(runs), function(run) {
# Load stim data
print(runs[run])
model <- run_names[run]
files <- list.files(paste0("output/Rdata/_ProcessedData/Stim/", runs[run], "/"), full.names = TRUE)
run_data <- lapply(files, function(file) {
load(file)
n <- as.numeric(gsub(".*/([0-9]+)\\.Rdata", "\\1", file, perl = T))
print(paste("Loaded: Group Size", n))
# Summarise within each replicate
rep_data <- lapply(listed_data, function(replicate) {
replicate <- as.data.frame(replicate)
replicate <- replicate[-1, ] #remove time step 0
replicate$sTotal <- replicate$s1 + replicate$s2
# Grab first and last 1000 time steps
begin <- head(replicate, 1000)
end <- tail(replicate, 1000)
# Summarise
begin <- begin %>%
summarise(s1 = mean(s1),
s2 = mean(s2),
sTotal = mean(sTotal))
end <- end %>%
summarise(s1 = mean(s1),
s2 = mean(s2),
sTotal = mean(sTotal))
diff <- end - begin
return(diff)
})
# Bind, label, return by group size within run
rep_data <- do.call("rbind", rep_data)
rep_data$n <- n
return(rep_data)
})
# Bind, label, return by run
run_data <- do.call("rbind", run_data)
run_data$Model <- model
return(run_data)
})
# Bind and summarise
stim_data_comp <- do.call('rbind', stim_data_comp)
View(stim_data_comp)
View(stim_data_comp)
# Bind and summarise
stim_data_comp <- do.call('rbind', stim_data_comp) %>%
group_by(Model, n) %>%
summarise(sMean = mean(sTotal),
sSD = sd(sTotal),
sSE = sd(sTotal)/sqrt(length(sTotal)))
# Bind and summarise
stim_data_comp <- do.call('rbind', stim_data_comp) %>%
stim_data_comp <- stim_data_comp %>%
group_by(Model, n) %>%
summarise(sMean = mean(sTotal),
sSD = sd(sTotal),
sSE = sd(sTotal)/sqrt(length(sTotal)))
class(stim_data_comp)
str(stim_data_comp)
stim_data_comp <- stim_data_comp %>%
group_by(Model, n)
stim_data_comp <- stim_data_comp %>%
group_by(Model, n) %>%
summarise(sMean = mean(sTotal),
sSD = sd(sTotal),
sSE = sd(sTotal)/sqrt(length(n)))
# Bind and summarise
stim_data_comp <- do.call('rbind', stim_data_comp) %>%
group_by(Model, n) %>%
summarise(sMean = mean(sTotal),
sSD = sd(sTotal),
sSE = sd(sTotal)/sqrt(length(n)))
View(stim_data_comp)
# Plot
gg_stimdiff_comp <- ggplot(stim_data, aes(x = n, y = sMean, group = Model, fill = Model, color = Model)) +
geom_errorbar(aes(ymin = sMean - sSD, ymax = sMean + sSD),
size = 0.3,
width = 0,
color = "#4d4d4d") +
geom_point(size = 0.8,
color = "#4d4d4d",
fill = "#4d4d4d") +
theme_classic() +
ylab("Change in Total Stim. Level") +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold type",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold type",
values = c("#ffffff", "#4d4d4d")) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
# Plot
gg_stimdiff_comp <- ggplot(stim_data_comp, aes(x = n, y = sMean, group = Model, fill = Model, color = Model)) +
geom_errorbar(aes(ymin = sMean - sSD, ymax = sMean + sSD),
size = 0.3,
width = 0,
color = "#4d4d4d") +
geom_point(size = 0.8,
color = "#4d4d4d",
fill = "#4d4d4d") +
theme_classic() +
ylab("Change in Total Stim. Level") +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold type",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold type",
values = c("#ffffff", "#4d4d4d")) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_stimdiff_comp
# Plot
gg_stimdiff_comp <- ggplot(stim_data_comp, aes(x = n, y = sMean, group = Model, fill = Model, color = Model)) +
geom_errorbar(aes(ymin = sMean - sSD, ymax = sMean + sSD),
size = 0.3,
width = 0) +
geom_point(size = 0.8) +
theme_classic() +
ylab("Change in Total Stim. Level") +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold type",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold type",
values = c("#ffffff", "#4d4d4d")) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_stimdiff_comp
# Plot
gg_stimdiff_comp <- ggplot(stim_data_comp, aes(x = n, y = sMean, group = Model, fill = Model, color = Model)) +
geom_errorbar(aes(ymin = sMean - sSD, ymax = sMean + sSD),
size = 0.3,
width = 0) +
geom_point(size = 0.8,
shape = 21) +
theme_classic() +
ylab("Change in Total Stim. Level") +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold type",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold type",
values = c("#ffffff", "#4d4d4d")) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_stimdiff_comp
# Plot
gg_stimdiff_comp <- ggplot(stim_data_comp, aes(x = n, y = sMean, group = Model, fill = Model, color = Model)) +
geom_errorbar(aes(ymin = sMean - sSD, ymax = sMean + sSD),
size = 0.3,
width = 0) +
geom_point(size = 0.8,
shape = 21) +
theme_classic() +
ylab("Change in Total Stim. Level") +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold type",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold type",
values = c("#ffffff", "#4d4d4d")) +
theme_ctokta() +
theme(legend.position = c(0.8, 0.8),
aspect.ratio = 1)
# Plot
gg_stimdiff_comp <- ggplot(stim_data_comp, aes(x = n, y = sMean, group = Model, fill = Model, color = Model)) +
geom_errorbar(aes(ymin = sMean - sSD, ymax = sMean + sSD),
size = 0.3,
width = 0) +
geom_point(size = 0.8,
shape = 21) +
theme_classic() +
ylab("Change in Total Stim. Level") +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold type",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold type",
values = c("#ffffff", "#4d4d4d")) +
theme_ctokita() +
theme(legend.position = c(0.8, 0.8),
aspect.ratio = 1)
gg_stimdiff_comp
gg_stimdiff_comp
ggsave("output/StimLevels/ChangeInStimLevels_Comparison.png", width = 45, height = 45, units = 'mm', dpi = 800)
# Plot
gg_stimdiff_comp <- ggplot(stim_data_comp, aes(x = n, y = sMean, group = Model, fill = Model, color = Model)) +
geom_errorbar(aes(ymin = sMean - sSD, ymax = sMean + sSD),
size = 0.3,
width = 0) +
geom_point(size = 0.8,
shape = 21) +
theme_classic() +
ylab("Change in Total Stim. Level") +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold type",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold type",
values = c("#ffffff", "#4d4d4d")) +
theme_ctokita() +
theme(legend.position = c(0.7, 0.7),
aspect.ratio = 1)
gg_stimdiff_comp
ggsave("output/StimLevels/ChangeInStimLevels_Comparison.png", width = 45, height = 45, units = 'mm', dpi = 800)
# Plot
gg_stimdiff_comp <- ggplot(stim_data_comp, aes(x = n, y = sMean, group = Model, fill = Model, color = Model)) +
geom_errorbar(aes(ymin = sMean - sSD, ymax = sMean + sSD),
size = 0.3,
width = 0) +
geom_point(size = 0.8,
shape = 21) +
theme_classic() +
ylab("Change in Total Stim. Level") +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold type",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold type",
values = c("#ffffff", "#4d4d4d")) +
theme_ctokita() +
theme(legend.position = c(0.75, 0.7),
legend.box.background = element_blank(),
aspect.ratio = 1)
gg_stimdiff_comp
ggsave("output/StimLevels/ChangeInStimLevels_Comparison.png", width = 45, height = 45, units = 'mm', dpi = 800)
# Plot
gg_stimdiff_comp <- ggplot(stim_data_comp, aes(x = n, y = sMean, group = Model, fill = Model, color = Model)) +
geom_errorbar(aes(ymin = sMean - sSD, ymax = sMean + sSD),
size = 0.3,
width = 0) +
geom_point(size = 0.8,
shape = 21) +
theme_classic() +
ylab("Change in Total Stim. Level") +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold type",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold type",
values = c("#ffffff", "#4d4d4d")) +
theme_ctokita() +
theme(aspect.ratio = 1)
gg_stimdiff_comp
ggsave("output/StimLevels/ChangeInStimLevels_Comparison.png", height = 45, units = 'mm', dpi = 800)
# Plot
gg_stimdiff_comp <- ggplot(stim_data_comp, aes(x = n, y = sMean, group = Model, fill = Model, color = Model)) +
geom_errorbar(aes(ymin = sMean - sSD, ymax = sMean + sSD),
size = 0.3,
width = 0) +
geom_point(size = 0.8,
shape = 21) +
theme_classic() +
ylab("Change in Total Stimulus") +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold type",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold type",
values = c("#ffffff", "#4d4d4d")) +
theme_ctokita() +
theme(aspect.ratio = 1)
gg_stimdiff_comp
ggsave("output/StimLevels/ChangeInStimLevels_Comparison.png", height = 45, width = 60, units = 'mm', dpi = 800)
ggsave("output/StimLevels/ChangeInStimLevels_Comparison.png", height = 45, width = 70, units = 'mm', dpi = 800)
# Plot
gg_stimdiff_comp <- ggplot(stim_data_comp, aes(x = n, y = sMean, group = Model, fill = Model, color = Model)) +
geom_hline(yintercept = 0, color = "grey20")
# Plot
gg_stimdiff_comp <- ggplot(stim_data_comp, aes(x = n, y = sMean, group = Model, fill = Model, color = Model)) +
geom_hline(yintercept = 0, color = "grey20") +
geom_errorbar(aes(ymin = sMean - sSD, ymax = sMean + sSD),
size = 0.3,
width = 0) +
geom_point(size = 0.8,
shape = 21) +
theme_classic() +
ylab("Change in Total Stimulus") +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold type",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold type",
values = c("#ffffff", "#4d4d4d")) +
theme_ctokita() +
theme(aspect.ratio = 1)
gg_stimdiff_comp
# Plot
gg_stimdiff_comp <- ggplot(stim_data_comp, aes(x = n, y = sMean, group = Model, fill = Model, color = Model)) +
geom_hline(yintercept = 0, color = "grey90") +
geom_errorbar(aes(ymin = sMean - sSD, ymax = sMean + sSD),
size = 0.3,
width = 0) +
geom_point(size = 0.8,
shape = 21) +
theme_classic() +
ylab("Change in Total Stimulus") +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold type",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold type",
values = c("#ffffff", "#4d4d4d")) +
theme_ctokita() +
theme(aspect.ratio = 1)
gg_stimdiff_comp
ggsave("output/StimLevels/ChangeInStimLevels_Comparison.png", height = 45, width = 70, units = 'mm', dpi = 800)
# Plot
gg_stimdiff_comp <- ggplot(stim_data_comp, aes(x = n, y = sMean, group = Model, fill = Model, color = Model)) +
geom_hline(yintercept = 0,
color = "grey90",
size = 0.3) +
geom_errorbar(aes(ymin = sMean - sSD, ymax = sMean + sSD),
size = 0.3,
width = 0) +
geom_point(size = 0.8,
shape = 21) +
theme_classic() +
ylab("Change in Total Stimulus") +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold type",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold type",
values = c("#ffffff", "#4d4d4d")) +
theme_ctokita() +
theme(aspect.ratio = 1)
gg_stimdiff_comp
ggsave("output/StimLevels/ChangeInStimLevels_Comparison.png", height = 45, width = 70, units = 'mm', dpi = 800)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/Analyze_Stimulus.R', echo=TRUE)
ggsave("output/StimLevels/ChangeInStimLevels_Comparison.png", height = 45, width = 75, units = 'mm', dpi = 800)
# Create file
dir.create(paste0("output/ThresholdTime/", run))
p <- 1 #prob of interact
run <- "Sigma0.05-Epsilon0-Beta1.1"
####################
# Load and process data
####################
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh1Time/", run, "/"), full.names = TRUE)
# Create file
dir.create(paste0("output/ThresholdTime/", run))
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/Analyze_ThreshTime.R', echo=TRUE)
