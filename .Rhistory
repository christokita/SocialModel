# Get node and edge list
node_list <- get.data.frame(g, what = "vertices")
edge_list <- get.data.frame(g, what = "edges")
# Create dataframe for plotting
plot_data <- edge_list %>% mutate(
to = factor(to, levels = node_list$name),
from = factor(from, levels = node_list$name))
# Get info for plot
groupsize <- ncol(avg_g)
if (groupsize < 20) {
breaks <- c(1, seq(5, length(unique(plot_data$to)), 5))
} else if(groupsize < 35) {
breaks <- c(1, seq(10, length(unique(plot_data$to)), 15))
} else {
breaks <- c(1, seq(20, length(unique(plot_data$to)), 20))
}
# Color palette
# pal <- c('#525252','#5b5b5b','#646464','#6e6e6e','#787878','#818181','#8b8b8b',
#          '#959595','#a0a0a0','#a9a9a9','#b4b4b4','#bfbfbf','#c8c8c8','#d4d4d4',
#          '#dedede','#e9e9e9','#f4f4f4','#ffffff','#edf5f9','#dee9f2','#d3ddec',
#          '#c7d1e5','#bfc4de','#b7b7d7','#b0aad0','#a99ec8','#a391c1','#9e83b9',
#          '#9a76b1','#9569a9','#915aa1','#8c4c98','#893c8f','#852986','#810f7c')
pal <- c('#525252','#6c6c6c','#878787','#a4a4a4','#c2c2c2','#e0e0e0',
'#ffffff',
'#e2d7eb','#c7b1d7','#ad8ac1','#9763aa','#823b8f','#6e016b')
# Plot
gg_avg_adj <- ggplot(plot_data, aes(x = from, y = to, fill = weight, color = weight)) +
geom_tile() +
theme_bw() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE, expand = c(0, 0),
position = "top",
breaks = levels(plot_data$to)[breaks],
labels = rep("", length(levels(plot_data$to)[breaks]))) +
scale_y_discrete(drop = FALSE, expand = c(0, 0),
limits = rev(levels(plot_data$to)),
breaks = levels(plot_data$to)[breaks],
labels = rep("", length(levels(plot_data$to)[breaks]))) +
scale_fill_gradientn(name = "Relative\ninteraction\nfrequency",
colours = pal,
na.value = "white",
limit = c(-0.04, 0.04),
oob = squish) +
scale_color_gradientn(name = "Relative\ninteraction\nfrequency",
colours =  pal,
na.value = "white",
limit = c(-0.04, 0.04),
oob = squish) +
xlab("Individual") +
ylab("Individual") +
theme(aspect.ratio = 1,
# Hide the legend (optional)
legend.key.width = unit(3, "mm"),
legend.key.height = unit(6, "mm"),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
panel.border = element_rect(size = 0.3, fill = NA, colour = "black"),
plot.title = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
# # Minimal settings
# axis.ticks = element_blank(),
# Detailed Settings
axis.ticks = element_line(size = 0.3, colour = "black"),
legend.position = "none") +
ggtitle(paste0("Group Size = ", groupsize))
# return graph
return(gg_avg_adj)
# return(avg_g)
})
# save specific plot (only for fully detailed plot)
gg_inter <- interaction_graphs[80/5]
gg_inter
ggsave("output/Networks/RawPlots/GroupSize80.svg", width = 38, height = 38, units = "mm")
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
# Establish "individuals:
individuals <- data.frame(Individual = seq(1, n))
n = 10
# Establish "individuals:
individuals <- data.frame(Individual = seq(1, n))
View(individuals)
# Establish "individuals:
individuals <- data.frame(Individual = seq(1, n), Type = c(rep("A", n/2), rep("B", n/2)))
View(individuals)
# Establish "individuals:
individuals <- data.frame(Individual = seq(1, n),
Type = c(rep("A", n/2), rep("B", n/2)),
Weights = c(rep(beta, n/2), rep(1, n/2)))
# Establish "individuals:
individuals <- data.frame(Individual = seq(1, n),
Type = c(rep("A", n/2), rep("B", n/2)),
Weights = c(rep(beta, n/2), rep(1, n/2)))
n
beta <- 1.1 # interaction bias term
Ns <- c(10, 50, 100) # group sizes to test
samples <- 50000 #equivalnet of simulation run length
# Establish "individuals:
individuals <- data.frame(Individual = seq(1, n),
Type = c(rep("A", n/2), rep("B", n/2)),
Weights = c(rep(beta, n/2), rep(1, n/2)))
View(individuals)
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
# Sample
samples <- list()
samples[[t]] <- individuals[sampled_ind, 1:2]
t = 1
samples[[t]] <- individuals[sampled_ind, 1:2]
View(samples)
samples
# Sample
samples <- list()
for (t in 1:samples) {
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[[t]] <- individuals[sampled_ind, 1:2]
}
# Sample
samples <- list()
for (t in 1:samples) {
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[t] <- individuals[sampled_ind, 1:2]
}
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[t] <- individuals[sampled_ind, 1:2]
samples
# Sample
samples <- list()
for (t in 1:samples) {
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[[t]] <- individuals[sampled_ind, 1:2]
}
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[[t]] <- individuals[sampled_ind, 1:2]
t = 2
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[[t]] <- individuals[sampled_ind, 1:2]
samples
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[[t]] <- individuals[sampled_ind, 1:2]
for (t in 1:samples) {
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[[t]] <- individuals[sampled_ind, 1:2]
}
# Sample
samples <- list()
for (t in 1:samples) {
print(t)
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[[t]] <- individuals[sampled_ind, 1:2]
}
samples <- 50000 #equivalnet of simulation run length
# Sample
samples <- list()
for (t in 1:samples) {
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[[t]] <- individuals[sampled_ind, 1:2]
}
# Sample
samples <- list()
for (t in 1:samples) {
print(t)
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[[t]] <- individuals[sampled_ind, 1:2]
}
gens <- 50000 #equivalnet of simulation run length
# Sample
samples <- list()
for (t in 1:gens) {
print(t)
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[[t]] <- individuals[sampled_ind, 1:2]
}
# Sample
samples <- list()
for (t in 1:gens) {
if (t %/% 10000 == 0) {
print(t)
}
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[[t]] <- individuals[sampled_ind, 1:2]
}
t%/%10000
1%/%10000
2%/%10000
if (t %% 10000 == 0) {
print(t)
}
# Sample
samples <- list()
for (t in 1:gens) {
if (t %% 10000 == 0) {
print(t)
}
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[[t]] <- individuals[sampled_ind, 1:2]
}
samples <- do.call("rbind", samples)
View(samples)
# Sample
samples <- list()
for (t in 1:gens) {
if (t %% 10000 == 0) {
print(t)
}
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[t] <- individuals[sampled_ind, 1:2]
}
samples <- do.call("rbind", samples)
warnings
for (t in 1:gens) {
if (t %% 10000 == 0) {
print(t)
}
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[[t]] <- individuals[sampled_ind, 1:2]
}
# Sample
samples <- list()
for (t in 1:gens) {
if (t %% 10000 == 0) {
print(t)
}
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[[t]] <- individuals[sampled_ind, 1:2]
}
samples <- unlist(samples)
samples <- do.call("rbind", samples)
for (t in 1:gens) {
if (t %% 10000 == 0) {
print(t)
}
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[[t]] <- individuals[sampled_ind, 1:2]
}
# Sample
samples <- list()
for (t in 1:gens) {
if (t %% 10000 == 0) {
print(t)
}
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[[t]] <- individuals[sampled_ind, 1:2]
}
samples <- do.call("rbind", samples)
View(samples)
View(samples)
hist(samples$Type)
str(samples)
str(individuals)
# Establish "individuals:
individuals <- data.frame(Individual = seq(1, n),
Type = as.character(c(rep("A", n/2), rep("B", n/2))),
Weights = c(rep(beta, n/2), rep(1, n/2)))
# Sample
samples <- list()
for (t in 1:gens) {
if (t %% 10000 == 0) {
print(t)
}
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[[t]] <- individuals[sampled_ind, 1:2]
}
samples <- do.call("rbind", samples)
View(samples)
hist(samples$Type)
# Establish "individuals:
individuals <- data.frame(Individual = seq(1, n),
Type = c(rep(1, n/2), rep(2, n/2)),
Weights = c(rep(beta, n/2), rep(1, n/2)))
# Sample
samples <- list()
for (t in 1:gens) {
if (t %% 10000 == 0) {
print(t)
}
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
samples[[t]] <- individuals[sampled_ind, 1:2]
}
rm(samples)
# Sample
for (t in 1:gens) {
if (t %% 10000 == 0) {
print(t)
}
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
if (!exists("samples")) {
samples <- sampled_ind
} else {
samples <- rbind(samples, sampled_ind)
}
}
rm("samples")
# Sample
for (t in 1:gens) {
if (t %% 10000 == 0) {
print(t)
}
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
row <- individuals[sampled_ind, 1:2]
if (!exists("samples")) {
samples <- row
} else {
samples <- rbind(samples, row)
}
}
# Sample
samples <- list()
for (t in 1:gens) {
if (t %% 10000 == 0) {
print(t)
}
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
row <- individuals[sampled_ind, 1:2]
samples[[t]] <- row
}
samples <- do.call("rbind", samples)
hist(samples$Type)
test <- vector()
test[1] <- blah
test[1] <- 2
test
test[2] <- 39
for (t in 1:gens) {
if (t %% 10000 == 0) {
print(t)
}
sampled_ind <- sample(individuals$Type, 1, prob = individuals$Weights)
samples[t] <- sampled_ind
}
# Sample
samples <- vector()
for (t in 1:gens) {
if (t %% 10000 == 0) {
print(t)
}
sampled_ind <- sample(individuals$Type, 1, prob = individuals$Weights)
samples[t] <- sampled_ind
}
# Establish "individuals:
individuals <- data.frame(Individual = seq(1, n),
Type = c(rep(1, n/2), rep(0, n/2)),
Weights = c(rep(beta, n/2), rep(1, n/2)))
# Sample
samples <- vector()
for (t in 1:gens) {
if (t %% 10000 == 0) {
print(t)
}
sampled_ind <- sample(individuals$Type, 1, prob = individuals$Weights)
samples[t] <- sampled_ind
}
freq_a <- sum(samples) / gens
n = 50
# Establish "individuals:
individuals <- data.frame(Individual = seq(1, n),
Type = c(rep(1, n/2), rep(0, n/2)),
Weights = c(rep(beta, n/2), rep(1, n/2)))
# Sample
samples <- vector()
for (t in 1:gens) {
if (t %% 10000 == 0) {
print(t)
}
sampled_ind <- sample(individuals$Type, 1, prob = individuals$Weights)
samples[t] <- sampled_ind
}
freq_a <- sum(samples) / gens
samples <- list()
for (t in 1:gens) {
if (t %% 10000 == 0) {
print(t)
}
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
row <- individuals[sampled_ind, 1:2]
samples[[t]] <- row
}
samples <- do.call("rbind", samples)
hist(samples$Individual)
n = 100
# Sample
samples <- list()
individuals <- data.frame(Individual = seq(1, n),
Type = c(rep(1, n/2), rep(2, n/2)),
Weights = c(rep(beta, n/2), rep(1, n/2)))
# Sample
samples <- list()
for (t in 1:gens) {
if (t %% 10000 == 0) {
print(t)
}
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
row <- individuals[sampled_ind, 1:2]
samples[[t]] <- row
}
samples <- do.call("rbind", samples)
hist(samples$Individual)
##########################################################
# Percentage of non-random interactions
##########################################################
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
p <- 1 #prob of interact
runs <- c("Sigma0.1-Epsilon0-Beta1.1",
"Sigma0-Epsilon0.1-Beta1.1")
run_names <- c("Fixed", "Social")
interaction_rates <- lapply(1:length(runs), function(run) {
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Graphs/", runs[run], "/"), full.names = TRUE)
soc_networks <- list()
for (file in 1:length(files)) {
load(files[file])
soc_networks[[file]] <- listed_data
}
# Load threshold matrices
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", runs[run], "/"), full.names = TRUE)
thresh_data <- list()
for (file in 1:length(files)) {
load(files[file])
thresh_data[[file]] <- listed_data
}
# Loop through individual graphs
interaction_info <- lapply(1:length(soc_networks), function(i) {
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
# For each each compute interaction matrix
# Get graph and make adjacency matrix
size_graph <- lapply(1:length(graphs), function(j) {
# Format: set diagonal, rescale, and make adj matrix
this_graph <- graphs[[j]]
diag(this_graph) <- NA
thresh <- as.data.frame(thresh_data[[i]][j])
thresh$ThreshRatio <- log(thresh$Thresh1 / thresh$Thresh2)
ratio <- order(thresh$ThreshRatio)
# Create order by threshold ratio
this_graph <- this_graph[ratio, ratio]
colnames(this_graph) <- 1:nrow(this_graph)
rownames(this_graph) <- colnames(this_graph)
g <- graph.adjacency(adjmatrix = this_graph, weighted = T)
edgelist_graph <- as.data.frame(get.edgelist(g))
names(edgelist_graph) <- c("From", "To")
edgelist_graph$Weight <- E(g)$weight
edgelist_graph$Interaction <- paste0(edgelist_graph$From, "-", edgelist_graph$To)
# return
return(edgelist_graph)
})
#Calculate baseline probability of interaction
dimensions <- dim(graphs[[1]])
not_chosen <- 1 - (( 1 / (dimensions[1] - 1)) * p)
expected_random <-  1 - not_chosen^2
# Bind
all_edgelist <- do.call("rbind", size_graph)
#  Calcualte 99% CI interval of interaction rate
edgelist_sig <- all_edgelist %>%
group_by(From, To, Interaction) %>%
# filter(!is.na(Weight)) %>%
summarise(samp_mean = mean(Weight),
samp_sd = sd(Weight),
samples = length(Weight)) %>%
mutate(error = qt(0.995,df = samples-1) * samp_sd/sqrt(samples),
CI_low = samp_mean - error,
CI_high = samp_mean + error) %>%
mutate(Lower_check = CI_low > expected_random,
Higher_check = CI_high > expected_random)
# Determine if it is different than random
edgelist_sig <- as.data.frame(edgelist_sig)
edgelist_sig$DiffDirection <- 0
edgelist_sig$DiffDirection[edgelist_sig$Lower_check & edgelist_sig$Higher_check] <- 1
edgelist_sig$DiffDirection[edgelist_sig$Lower_check==FALSE & edgelist_sig$Higher_check==FALSE] <- -1
# Make graph
edgelist_sig <- edgelist_sig %>%
summarise(Nonrandom = sum(DiffDirection!=0),
HigherThanRandom = sum(DiffDirection == 1),
LowerThanRandom = sum(DiffDirection == -1),
TotalInteractions = n()) %>%
mutate(PercentNonRandom = Nonrandom / TotalInteractions,
PercentHigher = HigherThanRandom / TotalInteractions,
PercentLower = LowerThanRandom / TotalInteractions,
n = dimensions[1],
Model = run_names[run])
# Return
print(paste0(run_names[run], ": ", dimensions[1]))
return(edgelist_sig)
})
# Bind and return
interaction_info <- do.call("rbind", interaction_info)
return(interaction_info)
})
# Bind
interaction_data <- do.call('rbind', interaction_rates)
# Graph
gg_interactions <- ggplot(interaction_data, aes(x = n, y = PercentNonRandom,
colour = Model, group = Model, fill = Model)) +
geom_line(size = 0.4) +
geom_point(size = 0.8, shape = 21) +
scale_y_continuous(limits = c(0, 1)) +
scale_color_manual(name = "Threshold type",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold type",
values = c("#ffffff", "#4d4d4d")) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab("% Non-random interactions") +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.position = "none")
gg_interactions
source('~/Documents/Research/Tarnita Lab/Mixing Experiments/MixingModel/scripts/1_MixingTest.R', echo=TRUE)
