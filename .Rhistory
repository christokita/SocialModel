labels = c("m = 2", "m = 2, fixed order")) +
scale_shape_manual(name = "",
values = c(16, 1),
labels = c("m = 2", "m = 2, fixed order")) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
scale_y_continuous(breaks = seq(0, 1, 1)) +
theme_ctokita() +
plot_settings() +
theme(axis.title.y = element_blank(),
legend.position = subplt_legendpos)
# larger plot for revision letter
gg_m2revisletter <- ggplot(data = m2, aes(x = beta, color = TaskNumber, shape = TaskNumber)) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0,
size = 0.3,
position = position_dodge(width = 0.01)) +
geom_point(aes(y = Mean),
size = 0.8,
position = position_dodge(width = 0.01)) +
theme_classic() +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("DOL (", italic(D[indiv]), ")"))) +
scale_color_manual(name = "",
values = c(m2color, m2color),
labels = c("m = 2", "m = 2, fixed order")) +
scale_shape_manual(name = "",
values = c(16, 1),
labels = c("m = 2", "m = 2, fixed order")) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
scale_y_continuous(breaks = seq(0, 1, 1)) +
theme_ctokita() +
plot_settings() +
theme(axis.title.y = element_blank(),
legend.position = subplt_legendpos)
ggsave(gg_m2revisletter, filename = "output/TaskNumber/DOL_m2taskorder.png", width = 45, height = 45, units = "mm", dpi = 400)
# larger plot for revision letter
gg_m2revisletter <- ggplot(data = m2, aes(x = beta, color = TaskNumber, shape = TaskNumber)) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0,
size = 0.3,
position = position_dodge(width = 0.01)) +
geom_point(aes(y = Mean),
size = 0.8,
position = position_dodge(width = 0.01)) +
theme_classic() +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("DOL (", italic(D[indiv]), ")"))) +
scale_color_manual(name = "",
values = c(m2color, m2color),
labels = c("m = 2", "m = 2, fixed order")) +
scale_shape_manual(name = "",
values = c(16, 1),
labels = c("m = 2", "m = 2, fixed order")) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
scale_y_continuous(breaks = seq(0, 1, 1)) +
theme_ctokita() +
plot_settings() +
theme(axis.title.y = element_blank(),
legend.position = c(0.75, 0.2))
ggsave(gg_m2revisletter, filename = "output/TaskNumber/DOL_m2taskorder.png", width = 45, height = 45, units = "mm", dpi = 400)
# larger plot for revision letter
gg_m2revisletter <- ggplot(data = m2, aes(x = beta, color = TaskNumber, shape = TaskNumber)) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0,
size = 0.3,
position = position_dodge(width = 0.01)) +
geom_point(aes(y = Mean),
size = 0.8,
position = position_dodge(width = 0.01)) +
theme_classic() +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("DOL (", italic(D[indiv]), ")"))) +
scale_color_manual(name = "",
values = c(m2color, m2color),
labels = c("m = 2", "m = 2, fixed order")) +
scale_shape_manual(name = "",
values = c(16, 1),
labels = c("m = 2", "m = 2, fixed order")) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
scale_y_continuous(breaks = seq(0, 1, 1)) +
theme_ctokita() +
plot_settings() +
theme(axis.title.y = element_blank(),
legend.position = c(0.72, 0.2))
ggsave(gg_m2revisletter, filename = "output/TaskNumber/DOL_m2taskorder.png", width = 45, height = 45, units = "mm", dpi = 400)
# larger plot for revision letter
gg_m2revisletter <- ggplot(data = m2, aes(x = beta, color = TaskNumber, shape = TaskNumber)) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0,
size = 0.3,
position = position_dodge(width = 0.02)) +
geom_point(aes(y = Mean),
size = 0.8,
position = position_dodge(width = 0.02)) +
theme_classic() +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("DOL (", italic(D[indiv]), ")"))) +
scale_color_manual(name = "",
values = c(m2color, m2color),
labels = c("m = 2", "m = 2, fixed order")) +
scale_shape_manual(name = "",
values = c(16, 1),
labels = c("m = 2", "m = 2, fixed order")) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
scale_y_continuous(breaks = seq(0, 1, 1)) +
theme_ctokita() +
plot_settings() +
theme(axis.title.y = element_blank(),
legend.position = c(0.72, 0.2))
ggsave(gg_m2revisletter, filename = "output/TaskNumber/DOL_m2taskorder.png", width = 45, height = 45, units = "mm", dpi = 400)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SociallyModulatedThresholds/scripts/supp_analysis/Analyze_NumberOfTasks.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SociallyModulatedThresholds/scripts/3c_AnalyzeParaSpace.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SociallyModulatedThresholds/scripts/3c_AnalyzeParaSpace.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SociallyModulatedThresholds/scripts/Analyze_Network_FixedVsSocial.R', echo=TRUE)
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
####################
# Load data
####################
load("output/Rdata/_ProcessedData/TaskDist/Sigma0.1-Epsilon0-Beta1.1-Delta0.6.Rdata")
####################
# Process data
####################
cumulative_dist <- compiled_data %>%
as.data.frame() %>%
group_by(n, sim, chunk) %>%
mutate(Id = 1:length(Task1)) %>%
arrange(Task1, Id, .by_group = TRUE) %>%
mutate(Cumu_task1 = Task1 / sum(Task1),
Cumu_task2 = Task2 / sum(Task2),
Rank_task1 = 1:length(Task1)) %>%
mutate(Cumu_task1 = cumsum(Cumu_task1),
Rank_task1Cum = Rank_task1/length(Rank_task1)) %>%
arrange(Task2, Id, .by_group = TRUE) %>%
mutate(Rank_task2 = 1:length(Task1),
Cumu_task2 = cumsum(Cumu_task2),
Rank_task2Cum = Rank_task2/length(Rank_task2))
# Summarise
cumulative_summary <- cumulative_dist %>%
group_by(n, Rank_task1Cum) %>%
summarise(mean_cum = mean(Cumu_task1),
SE_cum = sd(Cumu_task1) / sqrt(length(Cumu_task1)))
####################
# Plot
####################
gg_cumsum <- ggplot(data = cumulative_summary, aes(x = Rank_task1Cum, y = mean_cum)) +
geom_abline(slope = 1, intercept = 0, size = 0.1, color = "#737373") +
geom_errorbar(aes(ymax = mean_cum + SE_cum , ymin = mean_cum - SE_cum), width = 0) +
geom_point(color = "#045a8d", size = 0.5) +
theme_ctokita() +
facet_wrap(~n)
gg_cumsum
test <- cumulative_dist %>% filter(n == 100)
gg_cumsum <- ggplot(data = test, aes(x = Rank_task1Cum, y = Cumu_task1, group = Rank_task1Cum)) +
geom_abline(slope = 1, intercept = 0, size = 0.1, color = "#737373") +
geom_boxplot() +
scale_x_continuous(limits = c(0, 1)) +
theme_ctokita() +
facet_wrap(~n)
gg_cumsum
load("output/Rdata/_ProcessedData/TaskTally/Sigma0-Epsilon0.1-Beta1.1/080.Rdata")
# Analyze frequency of task performance
task_perf <- as.data.frame(do.call('rbind', listed_data)) %>%
mutate(Task1Freq = Task1 / n,
Task2Freq = Task2 / n,
ID = paste0(sim, "-", chunk))
# Plot over time
task_avg <- task_perf %>%
group_by(t) %>%
summarise(Task1_mean = mean(Task1Freq),
Task1_sd = sd(Task1Freq))
task_perf_look <- task_perf %>%
filter(t > 50/0.8 & t > (50/0.8+100))
gg_timetally <- ggplot(data = task_perf_look, aes(x = t, y = Task1Freq, group = ID)) +
geom_line(size = 0.4, alpha = 0.2) +
geom_vline(xintercept = 50/0.8) +
theme_ctokita()
gg_timetally
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/socially-modulated-threshold-model/scripts/3c_AnalyzeParaSpace.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/socially-modulated-threshold-model/scripts/3c_AnalyzeParaSpace.R', echo=TRUE)
################################################################################
#
# Comparing DOL for fixed threshold model across different sigma values
#
################################################################################
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
############### Sweep across beta values ###############
####################
# Load data
####################
load("output/Rdata/_ProcessedData/Entropy/Sigma0-Epsilon0.1-Beta1.01.Rdata")
compiled_data$Model <- "Social_Beta1.01"
entropy_data <- compiled_data
rm(compiled_data)
load("output/Rdata/_ProcessedData/Entropy/Sigma0-Epsilon0.1-Beta1.05.Rdata")
compiled_data$Model <- "Social_Beta1.05"
entropy_data <- rbind(entropy_data, compiled_data)
rm(compiled_data)
load("output/Rdata/_ProcessedData/Entropy/Sigma0-Epsilon0.1-Beta1.1.Rdata")
compiled_data$Model <- "Social_Beta1.1"
entropy_data <- rbind(entropy_data, compiled_data)
rm(compiled_data)
load("output/Rdata/_ProcessedData/Entropy/Sigma0-Epsilon0.1-Beta1.2.Rdata")
compiled_data$Model <- "Social_Beta1.2"
entropy_data <- rbind(entropy_data, compiled_data)
rm(compiled_data)
load("output/Rdata/_ProcessedData/Entropy/Sigma0.05-Epsilon0-Beta1.1.Rdata")
compiled_data$Model <- "Fixed"
entropy_data <- rbind(entropy_data, compiled_data)
rm(compiled_data)
load("output/Rdata/_ProcessedData/Entropy/Sigma0.05-Epsilon0-Beta1.1-Delta0.6-CHECK.Rdata")
compiled_data$Model <- "Fixed_Check"
entropy_data <- rbind(entropy_data, compiled_data)
rm(compiled_data)
####################
# Summarise data
####################
# Calculate mean and SE
entropy <- entropy_data %>%
group_by(Model, n) %>%
summarise(Mean = mean(Dind),
SD = sd(Dind),
SE = sd(Dind) / sqrt(length(Dind)))
####################
# Plot
####################
pal <- c("black", "grey", brewer.pal(5, "Greens")[2:5])
gg_entropy <- ggplot(data = entropy_data, aes(x = n, colour = Model)) +
geom_point(aes(y = Dind),
size = 0.8,
alpha = 0.5,
stroke = 0) +
theme_classic() +
ylab("Division of labor") +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_colour_manual(values = pal,
labels = c("1.2", "1.1"),
name = expression("Interaction bias"(Beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1) +
facet_wrap(~Model)
gg_entropy
gg_entropy <- ggplot(data = entropy, aes(x = n, colour = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
ylab("Division of labor") +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_colour_manual(values = pal,
labels = c("1.2", "1.1"),
name = expression(paste("Interaction bias ", italic(Beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_entropy
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/socially-modulated-threshold-model/scripts/Analyze_DOL_GroupSize.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/socially-modulated-threshold-model/scripts/Analyze_DOL_SpecialistsGeneralists.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/socially-modulated-threshold-model/scripts/Analyze_DOL_SpecialistsGeneralists.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/socially-modulated-threshold-model/scripts/Analyze_Network_Coemergence.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/socially-modulated-threshold-model/scripts/Analyze_Network_FixedVsSocial.R', echo=TRUE)
runs <- c("Sigma0.05-Epsilon0-Beta1.1",
"Sigma0-Epsilon0.1-Beta1.1")
run_names <- c("Fixed", "Social")
###################
# Assortment coefficient from Newman 2003
###################
library(assortnet)
network_assort <- lapply(1:length(runs), function(run) {
print(runs[run])
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Graphs/", runs[run], "/"), full.names = TRUE)
soc_networks <- list()
for (file in 1:length(files)) {
load(files[file])
soc_networks[[file]] <- listed_data
}
# Load threshold matrices
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", runs[run], "/"), full.names = TRUE)
thresh_data <- list()
for (file in 1:length(files)) {
load(files[file])
thresh_data[[file]] <- listed_data
}
# Loop through individual graphs
interaction_info <- lapply(1:length(soc_networks), function(i) {
print(i * 5)
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
# For each each compute interaction matrix
# Get graph and make adjacency matrix
size_graph <- lapply(1:length(graphs), function(j) {
# Get graph and calculate threshold differences
this_graph <- graphs[[j]]
diag(this_graph) <- 0
thresh <- as.data.frame(thresh_data[[i]][j])
thresh$ThreshBias <- thresh$Thresh1 - thresh$Thresh2
# Calculate assortmnet
assort <- assortment.continuous(graph = this_graph, vertex_values = thresh$ThreshBias, weighted = T)
assort <- assort$r
to_retun <- data.frame(n = nrow(this_graph), Assortativity = assort)
# return
return(to_retun)
})
#Calculate baseline probability of interaction
size_graph <- do.call("rbind", size_graph)
})
# Bind and return
interaction_info <- do.call("rbind", interaction_info)
interaction_info$Model <- run_names[run]
return(interaction_info)
})
# Bind
assort_data <- do.call('rbind', network_assort)
assort_data <- assort_data %>%
group_by(Model, n) %>%
summarise(Assort_mean = mean(Assortativity),
Assort_SD = sd(Assortativity),
Assort_SE = sd(Assortativity)/length(Assortativity))
# Plot
gg_assort <- ggplot(data = assort_data, aes(x = n, y = Assort_mean,
colour = Model, group = Model, fill = Model)) +
geom_hline(yintercept = 0, color = "black", size = 0.3, linetype = "dotted") +
geom_line(size = 0.4) +
geom_errorbar(aes(ymin = Assort_mean - Assort_SD, ymax = Assort_mean + Assort_SD),
width = 0,
size = 0.3) +
geom_point(size = 0.8, shape = 21) +
scale_color_manual(name = "Threshold",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold",
values = c("#ffffff", "#4d4d4d")) +
scale_linetype_manual(name = "Threshold",
values = c("dotted", "solid")) +
scale_x_continuous(breaks = c(5, seq(20, 100, 20))) +
scale_y_continuous(breaks = seq(-0.25, 0.05, 0.05), limits = c(-0.26, 0.05)) +
xlab(expression(paste("Group size ", italic(n)))) +
ylab("Assortativity") +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.position = "none",
legend.key.height = unit(0.5, "line"))
gg_assort
ggsave(gg_assort, filename = "Output/Networks/NetworkMetrics/AssortmentCoeff.png",
height = 45, width = 45, units = "mm", dpi = 400)
ggsave(gg_assort, filename = "Output/Networks/NetworkMetrics/AssortmentCoeff.svg",
height = 46, width = 46, units = "mm")
##########################################################
# Clustering
##########################################################
library(igraph)
library(tnet)
runs <- c("Sigma0.05-Epsilon0-Beta1.1",
"Sigma0-Epsilon0.1-Beta1.1")
run_names <- c("Fixed", "Social")
###################
# Clustering coeff based on interactions above ranom  = 1 and all else  = 0
###################
# Note: tried normal clustering coeff before
network_clust <- lapply(1:length(runs), function(run) {
print(runs[run])
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Graphs/", runs[run], "/"), full.names = TRUE)
soc_networks <- list()
for (file in 1:length(files)) {
load(files[file])
soc_networks[[file]] <- listed_data
}
# Load threshold matrices
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", runs[run], "/"), full.names = TRUE)
thresh_data <- list()
for (file in 1:length(files)) {
load(files[file])
thresh_data[[file]] <- listed_data
}
# Loop through individual graphs
interaction_info <- lapply(1:length(soc_networks), function(i) {
print(i * 5)
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
# For each each compute interaction matrix
# Get graph and make adjacency matrix
size_graph <- lapply(1:length(graphs), function(j) {
# Get graph and calculate baseline probability of interaction
this_graph <- graphs[[j]]
diag(this_graph) <- 0
#Calculate baseline probability of interaction
# dimensions <- dim(this_graph)
# not_chosen <- 1 - (( 1 / (dimensions[1] - 1)))
# expected_random <-  1 - not_chosen^2
# # make all interactions above random = 1
# this_graph[this_graph > expected_random] <- 1
# this_graph[this_graph <= expected_random] <- 0
# g <- graph_from_adjacency_matrix(this_graph)
# # Calculate clustering
# clust <- transitivity(graph = g, type = "global")
# to_return <- data.frame(n = nrow(this_graph), ClusterCoeff = clust)
# using Opsahl 2009 method
g <- graph_from_adjacency_matrix(this_graph, weighted = T)
e_list <- as.data.frame(get.edgelist(g))
e_list <- e_list %>%
mutate(V1 = as.character(V1),
V2 = as.character(V2)) %>%
mutate(V1 = as.numeric(gsub("v-", "", V1)),
V2 = as.numeric(gsub("v-", "", V2)))
e_list$weight <- E(g)$weight
clust <- clustering_w(e_list)
to_return <- data.frame(n = nrow(this_graph), ClusterCoeff = clust)
# return
return(to_return)
})
#Calculate baseline probability of interaction
size_graph <- do.call("rbind", size_graph)
})
# Bind and return
interaction_info <- do.call("rbind", interaction_info)
interaction_info$Model <- run_names[run]
return(interaction_info)
})
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/socially-modulated-threshold-model/scripts/supp_analysis/Analyze_CompareDOLMetrics.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/socially-modulated-threshold-model/scripts/supp_analysis/Analyze_FixedThresh_SigDeltaSweep.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/socially-modulated-threshold-model/scripts/supp_analysis/Analyze_FixedThresh_SigDeltaSweep.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/socially-modulated-threshold-model/scripts/supp_analysis/Analyze_FixedThresh_SigDeltaSweep.R', echo=TRUE)
entropy_map <- entropy_total %>%
mutate(n = factor(n, levels = unique(entropy_total$n))) %>%
filter(delta == 0.8)
pal <- brewer_pal("seq", "Blues")
pal <- pal(9)
# pal <- c("#f0f0f0", "#252525")
gg_deltamap <- ggplot(data = entropy_map, aes(x = n, y = sigma, fill = Mean, colour = Mean)) +
geom_tile() +
scale_fill_gradientn(colours = pal, name = expression(paste("Division of\nlabor ", 'D'[indiv])),
limits = c(0, 0.5)) +
scale_colour_gradientn(colours = pal, name = expression(paste("Division of\nlabor ", 'D'[indiv])),
limits = c(0, 0.5)) +
xlab("Group size (n)") +
scale_x_discrete(breaks = c(5, seq(20, 100, 20))) +
ylab(expression(paste("Threshold variation ", sigma))) +
# facet_grid(~delta, labeller = label_parsed) +
theme_ctokita() +
theme(aspect.ratio = 1)
gg_deltamap
ggsave(gg_deltamap, filename = "output/FixedThreshold-SigmaDeltaSweep/FixedThresholdDeltaSigma_HeatMap.svg",
height = 45, units = "mm", dpi = 400)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/socially-modulated-threshold-model/scripts/supp_analysis/ThresholdLimitAndSocialInfluence.R', echo=TRUE)
library(scales)
# Normal threshold limit
load("output/ThresholdTime/ThresholdLimits/ThreshMax-100_Eps0.4.Rdata")
gg_threshtime_100 <- ggplot(thresh_time, aes(x = t, y = Threshold, group = Id)) +
geom_line(size = 0.1, alpha = 0.1, colour = "#1f78b4") +
scale_x_continuous(name = expression(paste("Time step ", italic(t))),
breaks = seq(0, 50000, 10000),
labels = c("", "10,000", "", "30,000", "", "50,000"),
expand = c(0, 0)) +
scale_y_continuous(name = expression(paste("Task 1 threshold ", italic(theta[i1,t]))),
limits = c(0, 100),
breaks = seq(0, 100, 50)) +
theme_ctokita() +
theme(#axis.title.y = element_blank(),
axis.text.x = element_text(hjust = 0.7))
gg_threshtime_100
ggsave(gg_threshtime_100, file = "output/ThresholdTime/ThresholdLimits/Max-100.png", height = 26, width = 40, units = "mm", dpi = 500)
ggsave(gg_threshtime_100, file = "output/ThresholdTime/ThresholdLimits/ExampleforPPT.png", height = 34, width = 45, units = "mm", dpi = 500)
# High threshold limit
load("output/ThresholdTime/ThresholdLimits/ThreshMax-Inf_Eps0.4.Rdata")
gg_threshtime_1000 <- ggplot(thresh_time, aes(x = t, y = Threshold, group = Id)) +
geom_line(size = 0.1, alpha = 0.15, colour = "#8bbeda") +
scale_x_continuous(name = expression(paste("Time step ", italic(t))),
breaks = seq(0, 50000, 10000),
labels = c("", "10,000", "", "30,000", "", "50,000"),
expand = c(0, 0)) +
scale_y_continuous(name = expression(paste("Task 1 threshold ", italic(theta[i1,t]))),
limits = c(0, 1200),
breaks = seq(0, 1200, 600),
label = comma) +
theme_ctokita() +
theme(axis.title.y = element_blank(),
axis.text.x = element_text(hjust = 0.7))
gg_threshtime_1000
ggsave(gg_threshtime_1000, file = "output/ThresholdTime/ThresholdLimits/Max-Inf.png", height = 26, width = 42, units = "mm", dpi = 500)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/socially-modulated-threshold-model/scripts/supp_analysis/TrackThresh.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/socially-modulated-threshold-model/scripts/long_sims/Analyze_LongSimData.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/socially-modulated-threshold-model/scripts/long_sims/Analyze_Sim_Length.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/socially-modulated-threshold-model/scripts/analytical_calcs/Analyze_N-star.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/socially-modulated-threshold-model/scripts/analytical_calcs/Plot_n-star_solutions.R', echo=TRUE)
