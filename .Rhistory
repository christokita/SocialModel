epsilon = epsilon,
phi = phi)
# Capture current task performance tally
tally <- matrix(c(t, colSums(X_g)), ncol = ncol(X_g) + 1)
colnames(tally) <- c("t", colnames(X_g))
tally <- transform(tally, Inactive = n - sum(X_g), n = n, replicate = sim)
taskTally[[t]] <- tally
# Update total task performance profile
X_tot <- X_tot + X_g
# Create time step for correlation
if (t %% corrStep == 0) {
# Get tasks performance in correlation step
X_step <- X_tot - X_prevTot
# Add to ensemble list of task steps
taskStep[[t / corrStep]] <- X_step
# Calculate rank correlation if it is not the first step
if(sum(X_prev) != 0) {
# Normalize
stepNorm <- X_step / rowSums(X_step)
prevNorm <- X_prev / rowSums(X_prev)
# Calculate ranks
step_ranks <- calculateTaskRank(TaskStepMat = X_step)
prev_ranks <- calculateTaskRank(TaskStepMat = X_prev)
# Calculate Correlation
rankCorr <- cor(prev_ranks, step_ranks, method = "spearman")
# Put in list
taskCorr[[(t / corrStep) - 1]] <- diag(rankCorr)
names(taskCorr)[(t / corrStep) - 1] <- paste0("Gen", t)
}
# Update previous step total matrix
X_prevTot <- X_tot
# Update previous step total matrix
X_prev <- X_step
}
}
# Calculate Entropy
entropy <- mutualEntropy(TotalStateMat = X_tot)
entropy <- transform(entropy, n = n, replicate = sim)
# Calculate total task distribution
# totalTaskDist <- X_tot / rowSums(X_tot)
totalTaskDist <- X_tot / gens
totalTaskDist <- transform(totalTaskDist, Inactive = gens - rowSums(X_tot), n = n, replicate = sim)
# Create tasktally table
taskTally <- do.call("rbind", taskTally)
# Create tasktally table
stimMat <- transform(stimMat, n = n, replicate = sim)
# Create tasktally table
taskCorr <- transform(taskCorr, replicate = sim)
# Add total task distributions, entropy values, and graphs to lists
ens_taskDist[[sim]]  <- totalTaskDist
ens_entropy[[sim]]   <- entropy
ens_taskCorr[[sim]]  <- taskCorr
ens_taskTally[[sim]] <- taskTally
ens_taskStep[[sim]]  <- taskStep
ens_stim[[sim]]      <- stimMat
ens_thresh[[sim]]    <- threshMat
ens_graphs[[sim]]    <- g_tot / gens
# Print simulation completed
print(paste0("DONE: N = ", n, ", Simulation ", sim))
}
# Calculate mean correlation for each n
runCorrs <- lapply(ens_taskCorr, function(x) {
# Unlist
runs <- do.call("rbind", x)
replicate <- runs[nrow(runs), ]
replicate <- unique(replicate)
runs <- runs[-nrow(runs), ]
# Calculate mean
runMean <- matrix(data = rep(NA, m), ncol =  m)
for (column in 1:m) {
runMean[ , column] <- mean(runs[ , column], na.rm = TRUE)
}
runMean <- cbind(runMean, replicate)
colnames(runMean) <- c(paste0("Task", 1:m), "replicate")
return(runMean)
})
runCorrs <- do.call("rbind", runCorrs)
runCorrs <- transform(runCorrs, n = n)
# Add to list of lists
groups_taskDist[[i]]  <- ens_taskDist
groups_taskCorr[[i]]  <- runCorrs
groups_taskStep[[i]]  <- ens_taskStep
groups_taskTally[[i]] <- ens_taskTally
groups_stim[[i]]      <- ens_stim
groups_thresh[[i]]    <- ens_thresh
groups_entropy[[i]]   <- ens_entropy
groups_graphs[[i]]    <- ens_graphs
}
# trim out correlations for group size 1
if(1 %in% Ns) {
groups_taskCorr <- groups_taskCorr[-1]
}
entropy <- unlist(groups_entropy, recursive = FALSE)
entropy <- do.call("rbind", entropy)  %>%
mutate(set = paste(n, replicate, sep = "-"))%>%
select(-Dsym, -Dtask) %>%
filter(n != 1) %>%
group_by(n) %>%
summarise(Mean = mean(Dind),
SE = sd(Dind) / sqrt(length(Dind))) %>%
mutate(Model = "Social")
plot(entropy$n, entropy$Mean, type = "o")
ThreshCutoffValue <- 10
ThreshCutoffReplacement <- Inf
ThreshCutoffReplacementColor <- 10
graphs <- unlist(groups_graphs, recursive = FALSE)
threshMat <- unlist(groups_thresh, recursive = FALSE)
actMat <- unlist(groups_taskDist, recursive = FALSE)
social_graphs <- lapply(1:length(graphs), function(i) {
# Calculated degree
degree <- rowSums(graphs[[i]])
degree <- as.data.frame(degree)
degree$Id <- row.names(degree)
# Calculate thresholds
thresh <- threshMat[[i]] %>%
as.data.frame(.) %>%
mutate(ThreshRatio = log(Thresh1 / Thresh2),
Id = row.names(.))
thresh$ThreshRatio[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacement
thresh$ThreshRatio[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacement
thresh$ThreshRatioColor <- thresh$ThreshRatio
thresh$ThreshRatioColor[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacementColor
thresh$ThreshRatioColor[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacementColor
# Calculate actibity
activity <- actMat[[i]] %>%
as.data.frame(.) %>%
mutate(ActRatio = log(Task1 / Task2),
ActTotal = Task1 + Task2,
Id = row.names(.))
# Merge and return
mergedNodes <- merge(degree, thresh)
mergedNodes <- merge(mergedNodes, activity)
return(mergedNodes)
})
social_graphs <- do.call("rbind", social_graphs)
gg_degree_act <- ggplot(data = social_graphs,
aes(x = ActTotal, y = degree, colour = ThreshRatioColor, group = n)) +
geom_point(size = 0.2) +
theme_bw(base_size = 10) +
scale_colour_gradient2(name = "Threshold\nRatio (ln)",
high = "#d7191c",
mid = "#ffffbf",
low = "#2c7bb6",
midpoint = 0,
limits = c(-1, 1),
oob = squish) +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA),
axis.text = element_text(color = "black"),
strip.background = element_blank()) +
xlab("Total Activity Level") +
ylab("Total Degree") +
scale_x_continuous(breaks = c(0, 0.4, 0.8)) +
facet_wrap( ~ n, scales = "free_y")
gg_degree_act
gg_activity <- ggplot(data = social_graphs,
aes(x = Task1, y = Task2, color = ThreshRatioColor, group = n)) +
geom_point(size = 0.2) +
theme_bw(base_size = 10) +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA),
axis.text = element_text(color = "black"),
strip.background = element_blank()) +
scale_colour_gradient2(name = "Threshold\nRatio (ln)",
high = "#d7191c",
mid = "#ffffbf",
low = "#2c7bb6",
midpoint = 0,
limits = c(-0.5, 0.5),
oob = squish) +
xlab("Task 1") +
ylab("Task 2") +
facet_wrap( ~ n)
gg_activity
gg_thresh_degree <- ggplot(data = social_graphs,
aes(x = ThreshRatio, y = degree, colour = ActTotal, group = n)) +
geom_point(size = 0.2) +
theme_bw(base_size = 10) +
scale_colour_gradient2(name = "Total\nActivity",
high = "#00441b",
mid = "#41ab5d",
low = "#c7e9c0",
midpoint = 0.5,
limits = c(0, 1)) +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA),
axis.text = element_text(color = "black"),
strip.background = element_blank()) +
xlab("Thresold Ratio") +
ylab("Degree") +
facet_wrap( ~ n, scales = "free_y")
gg_thresh_degree
gg_degree_actRatio <- ggplot(data = social_graphs,
aes(x = ActRatio, y = ActTotal, colour = ThreshRatioColor, group = n)) +
geom_point(size = 0.5) +
theme_bw(base_size = 10) +
scale_colour_gradient2(name = "Threshold\nRatio",
high = "#d7191c",
mid = "#ffffbf",
low = "#2c7bb6",
midpoint = 0,
limits = c(-1, 1),
oob = squish) +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA)) +
xlab("Total Activity Level") +
ylab("Total Degree") +
facet_wrap( ~ n, scales = "free_y")
gg_degree_actRatio
gg_degree_actRatio <- ggplot(data = social_graphs,
aes(x = ActRatio, y = Degree, colour = ThreshRatioColor, group = n)) +
geom_point(size = 0.5) +
theme_bw(base_size = 10) +
scale_colour_gradient2(name = "Threshold\nRatio",
high = "#d7191c",
mid = "#ffffbf",
low = "#2c7bb6",
midpoint = 0,
limits = c(-1, 1),
oob = squish) +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA)) +
xlab("Total Activity Level") +
ylab("Total Degree") +
facet_wrap( ~ n, scales = "free_y")
gg_degree_actRatio
gg_degree_actRatio <- ggplot(data = social_graphs,
aes(x = ActRatio, y = degree, colour = ThreshRatioColor, group = n)) +
geom_point(size = 0.5) +
theme_bw(base_size = 10) +
scale_colour_gradient2(name = "Threshold\nRatio",
high = "#d7191c",
mid = "#ffffbf",
low = "#2c7bb6",
midpoint = 0,
limits = c(-1, 1),
oob = squish) +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA)) +
xlab("Total Activity Level") +
ylab("Total Degree") +
facet_wrap( ~ n, scales = "free_y")
gg_degree_actRatio
load("output/Rdata/Sigma001-FIXED-ConnectP01-Bias1.1.Rdata")
entropy1 <- unlist(groups_entropy, recursive = FALSE)
entropy1 <- do.call("rbind", entropy1)  %>%
mutate(set = paste(n, replicate, sep = "-"))%>%
select(-Dsym, -Dtask) %>%
filter(n != 1) %>%
group_by(n) %>%
summarise(Mean = mean(Dind),
SE = sd(Dind) / sqrt(length(Dind))) %>%
mutate(Model = "Fixed")
# Join
entropy <- rbind(entropy, entropy1)
gg_entropy <- ggplot(data = entropy, aes(x = n, group = Model)) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE, color = Model),
width = 0.7) +
geom_line(aes(y = Mean, color = Model, linetype = Model)) +
geom_point(aes(y = Mean, color = Model),
size = 1.5,
shape = 21) +
theme_classic() +
xlab("Group Size") +
ylab("DOL Entropy") +
scale_y_continuous(limits = c(0, 1),
breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = unique(entropy$n)) +
scale_color_manual(values = c("black", "mediumseagreen")) +
scale_linetype_manual(values = c("dashed", "solid")) +
theme(legend.position = "right",
legend.title = element_text(size = 7, face = "bold"),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0.1, r = 0.1, b = 0.1, l = 0.1, "cm"),
legend.text = element_text(size = 10),
axis.text = element_text(size = 8),
axis.title = element_text(size = 10),
axis.ticks = element_line(size = 0.5),
panel.grid = element_blank(),
strip.text = element_text(size = 8, face = "italic"),
strip.background = element_rect(fill = NA, colour = NA),
panel.spacing = unit(0.5, "cm"))
gg_entropy
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/1_SocThreshModel_TrackThresh.R')
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/1_SocThreshModel_TrackThresh.R')
gg_thresh <- ggplot(data = thresh1time,
aes(x = t, y = Threshold)) +
theme_classic(base_size = 10) +
geom_line(aes(group = Id, colour = ThreshRatio), size = 0.5) +
scale_colour_gradient2(name = "ln(Threshold Ratio)",
high = "#d7191c",
mid = "#cecece",
low = "#2c7bb6",
midpoint = 0,
limits = c(-1, 1),
oob = squish) +
scale_y_continuous(limits = c(0, 20), breaks = seq(0,20, 5)) +
theme(aspect.ratio = 1,
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
axis.ticks.length = unit(4, "pt"),
axis.text = element_text(color = "black"))
gg_thresh
ggsave("output/ThresholdTime/Size100.png", scale = 0.6, dpi = 600)
min(thresh1time$Threshold)
max(thresh1time$Threshold)
gg_thresh <- ggplot(data = thresh1time,
aes(x = t, y = Threshold)) +
theme_classic(base_size = 10) +
geom_line(aes(group = Id, colour = ThreshRatio), size = 0.5) +
scale_colour_gradient2(name = "ln(Threshold Ratio)",
high = "#d7191c",
mid = "#cecece",
low = "#2c7bb6",
midpoint = 0,
limits = c(-1, 1),
oob = squish) +
scale_y_continuous(limits = c(4, 16), breaks = seq(0,20, 5)) +
theme(aspect.ratio = 1,
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
axis.ticks.length = unit(4, "pt"),
axis.text = element_text(color = "black"))
gg_thresh
ggsave("output/ThresholdTime/Size100test.png", scale = 0.6, dpi = 600)
gg_thresh <- ggplot(data = thresh1time,
aes(x = t, y = Threshold)) +
theme_classic(base_size = 10) +
geom_line(aes(group = Id, colour = ThreshRatio), size = 0.5) +
scale_colour_gradient2(name = "ln(Threshold Ratio)",
high = "#d7191c",
mid = "#ffffbf",
# mid = "#cecece",
low = "#2c7bb6",
midpoint = 0,
limits = c(-1, 1),
oob = squish) +
scale_y_continuous(limits = c(4, 16), breaks = seq(0,20, 5)) +
theme(aspect.ratio = 1,
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
axis.ticks.length = unit(4, "pt"),
axis.text = element_text(color = "black"))
gg_thresh
ggsave("output/ThresholdTime/Size100test.png", scale = 0.6, dpi = 600)
rm(list = ls())
source("scripts/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
filename <- "Sigma001-Eps001--Bias1.1"
# Cutoff for threshold ratio to allow easier plotting
ThreshCutoffValue <- 10
ThreshCutoffReplacement <- Inf
ThreshCutoffReplacementColor <- 10
####################
# Compare entropies
####################
# Load social
load("output/Rdata/Sigma0.01-Epsilon0.01-Bias1.1_testframework.Rdata")
graphs <- unlist(groups_graphs, recursive = FALSE)
threshMat <- unlist(groups_thresh, recursive = FALSE)
actMat <- unlist(groups_taskDist, recursive = FALSE)
social_graphs <- lapply(1:length(graphs), function(i) {
# Calculated degree
degree <- rowSums(graphs[[i]])
degree <- as.data.frame(degree)
degree$Id <- row.names(degree)
# Calculate thresholds
thresh <- threshMat[[i]] %>%
as.data.frame(.) %>%
mutate(ThreshRatio = log(Thresh1 / Thresh2),
Id = row.names(.))
thresh$ThreshRatio[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacement
thresh$ThreshRatio[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacement
thresh$ThreshRatioColor <- thresh$ThreshRatio
thresh$ThreshRatioColor[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacementColor
thresh$ThreshRatioColor[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacementColor
# Calculate actibity
activity <- actMat[[i]] %>%
as.data.frame(.) %>%
mutate(ActRatio = log(Task1 / Task2),
ActTotal = Task1 + Task2,
Id = row.names(.))
# Merge and return
mergedNodes <- merge(degree, thresh)
mergedNodes <- merge(mergedNodes, activity)
return(mergedNodes)
})
social_graphs <- do.call("rbind", social_graphs)
graphs[[1]]
graphs[[2]]
dim(graphs)
graphs[1]
length(graphs)
graph <- graphs[[1]]
graph
nrow(graph)
degress <- rowSums(degrees)
degress <- rowSums(graph)
degrees <- rowSums(graph)
degrees
deg_sd <- sd(degrees)
deg_mean <- mean(degrees)
deg_sd <- sd(degrees)
deg_sd
deg_mean
values <- lapply(graphs, function(graph) {
# Group size
n <- nrow(graph)
# Degrees
degrees <- rowSums(graph)
deg_mean <- mean(degrees)
deg_sd <- sd(degrees)
# compile and return
to_return <- data.frame(n = n, DegreeMean = deg_mean, DegreeSD = deg_sd)
})
rm(values)
dispersion <- lapply(graphs, function(graph) {
# Group size
n <- nrow(graph)
# Degrees
degrees <- rowSums(graph)
deg_mean <- mean(degrees)
deg_sd <- sd(degrees)
# compile and return
to_return <- data.frame(n = n, DegreeMean = deg_mean, DegreeSD = deg_sd)
})
dispersion <- do.call("rbind", dispersion)
View(dispersion)
dispersion <- dispersion %>%
mutate(Dispersion = DegreeSD / DegreeMean)
gg_dispersion <- ggplot(dispersion, aes(x = n, y = Dispersion)) +
geom_point() +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot(dispersion, aes(x = n, y = DegreeMean)) +
geom_point() +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot(dispersion, aes(x = n, y = DegreeSD)) +
geom_point() +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot(dispersion, aes(x = n, y = Dispersion)) +
geom_point() +
theme_classic()
View(dispersion)
gg_dispersion <- ggplot(dispersion, aes(x = n, y = Dispersion)) +
geom_point() +
theme_classic()
gg_dispersion
dispersion <- dispersion %>%
mutate(Dispersion = DegreeSD / DegreeMean) %>%
summarise(Dispersion = Mean(Dispersion))
dispersion <- dispersion %>%
mutate(Dispersion = DegreeSD / DegreeMean) %>%
summarise(Dispersion = mean(Dispersion))
gg_dispersion <- ggplot(dispersion, aes(x = n, y = Dispersion)) +
geom_point() +
theme_classic()
gg_dispersion
dispersion <- lapply(graphs, function(graph) {
# Group size
n <- nrow(graph)
# Degrees
degrees <- rowSums(graph)
deg_mean <- mean(degrees)
deg_sd <- sd(degrees)
# compile and return
to_return <- data.frame(n = n, DegreeMean = deg_mean, DegreeSD = deg_sd)
})
dispersion <- do.call("rbind", dispersion)
dispersion <- dispersion %>%
mutate(Dispersion = DegreeSD / DegreeMean) %>%
summarise(Dispersion = mean(Dispersion))
View(dispersion)
?summarise
dispersion <- lapply(graphs, function(graph) {
# Group size
n <- nrow(graph)
# Degrees
degrees <- rowSums(graph)
deg_mean <- mean(degrees)
deg_sd <- sd(degrees)
# compile and return
to_return <- data.frame(n = n, DegreeMean = deg_mean, DegreeSD = deg_sd)
})
dispersion <- do.call("rbind", dispersion)
dispersion <- dispersion %>%
mutate(Dispersion = DegreeSD / DegreeMean) %>%
group_by(n) %>%
summarise(Dispersion = mean(Dispersion))
gg_dispersion <- ggplot(dispersion, aes(x = n, y = Dispersion)) +
geom_point() +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot(dispersion, aes(x = n, y = Dispersion)) +
geom_point() +
geom_line() +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot(dispersion, aes(x = n, y = Dispersion)) +
geom_point() +
theme_classic()
gg_dispersion
