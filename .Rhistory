legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0.1, r = 0.1, b = 0.1, l = 0.1, "cm"),
legend.text = element_text(size = 10),
axis.text = element_text(size = 8),
axis.title = element_text(size = 10),
axis.ticks = element_line(size = 0.5),
panel.grid = element_blank(),
strip.text = element_text(size = 8, face = "italic"),
strip.background = element_rect(fill = NA, colour = NA),
panel.spacing = unit(0.5, "cm"))
gg_entropy
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/1_SocThreshModel_TrackThresh.R')
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/1_SocThreshModel_TrackThresh.R')
gg_thresh <- ggplot(data = thresh1time,
aes(x = t, y = Threshold)) +
theme_classic(base_size = 10) +
geom_line(aes(group = Id, colour = ThreshRatio), size = 0.5) +
scale_colour_gradient2(name = "ln(Threshold Ratio)",
high = "#d7191c",
mid = "#cecece",
low = "#2c7bb6",
midpoint = 0,
limits = c(-1, 1),
oob = squish) +
scale_y_continuous(limits = c(0, 20), breaks = seq(0,20, 5)) +
theme(aspect.ratio = 1,
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
axis.ticks.length = unit(4, "pt"),
axis.text = element_text(color = "black"))
gg_thresh
ggsave("output/ThresholdTime/Size100.png", scale = 0.6, dpi = 600)
min(thresh1time$Threshold)
max(thresh1time$Threshold)
gg_thresh <- ggplot(data = thresh1time,
aes(x = t, y = Threshold)) +
theme_classic(base_size = 10) +
geom_line(aes(group = Id, colour = ThreshRatio), size = 0.5) +
scale_colour_gradient2(name = "ln(Threshold Ratio)",
high = "#d7191c",
mid = "#cecece",
low = "#2c7bb6",
midpoint = 0,
limits = c(-1, 1),
oob = squish) +
scale_y_continuous(limits = c(4, 16), breaks = seq(0,20, 5)) +
theme(aspect.ratio = 1,
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
axis.ticks.length = unit(4, "pt"),
axis.text = element_text(color = "black"))
gg_thresh
ggsave("output/ThresholdTime/Size100test.png", scale = 0.6, dpi = 600)
gg_thresh <- ggplot(data = thresh1time,
aes(x = t, y = Threshold)) +
theme_classic(base_size = 10) +
geom_line(aes(group = Id, colour = ThreshRatio), size = 0.5) +
scale_colour_gradient2(name = "ln(Threshold Ratio)",
high = "#d7191c",
mid = "#ffffbf",
# mid = "#cecece",
low = "#2c7bb6",
midpoint = 0,
limits = c(-1, 1),
oob = squish) +
scale_y_continuous(limits = c(4, 16), breaks = seq(0,20, 5)) +
theme(aspect.ratio = 1,
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
axis.ticks.length = unit(4, "pt"),
axis.text = element_text(color = "black"))
gg_thresh
ggsave("output/ThresholdTime/Size100test.png", scale = 0.6, dpi = 600)
rm(list = ls())
source("scripts/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
filename <- "Sigma001-Eps001--Bias1.1"
# Cutoff for threshold ratio to allow easier plotting
ThreshCutoffValue <- 10
ThreshCutoffReplacement <- Inf
ThreshCutoffReplacementColor <- 10
####################
# Compare entropies
####################
# Load social
load("output/Rdata/Sigma0.01-Epsilon0.01-Bias1.1_testframework.Rdata")
graphs <- unlist(groups_graphs, recursive = FALSE)
threshMat <- unlist(groups_thresh, recursive = FALSE)
actMat <- unlist(groups_taskDist, recursive = FALSE)
social_graphs <- lapply(1:length(graphs), function(i) {
# Calculated degree
degree <- rowSums(graphs[[i]])
degree <- as.data.frame(degree)
degree$Id <- row.names(degree)
# Calculate thresholds
thresh <- threshMat[[i]] %>%
as.data.frame(.) %>%
mutate(ThreshRatio = log(Thresh1 / Thresh2),
Id = row.names(.))
thresh$ThreshRatio[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacement
thresh$ThreshRatio[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacement
thresh$ThreshRatioColor <- thresh$ThreshRatio
thresh$ThreshRatioColor[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacementColor
thresh$ThreshRatioColor[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacementColor
# Calculate actibity
activity <- actMat[[i]] %>%
as.data.frame(.) %>%
mutate(ActRatio = log(Task1 / Task2),
ActTotal = Task1 + Task2,
Id = row.names(.))
# Merge and return
mergedNodes <- merge(degree, thresh)
mergedNodes <- merge(mergedNodes, activity)
return(mergedNodes)
})
social_graphs <- do.call("rbind", social_graphs)
graphs[[1]]
graphs[[2]]
dim(graphs)
graphs[1]
length(graphs)
graph <- graphs[[1]]
graph
nrow(graph)
degress <- rowSums(degrees)
degress <- rowSums(graph)
degrees <- rowSums(graph)
degrees
deg_sd <- sd(degrees)
deg_mean <- mean(degrees)
deg_sd <- sd(degrees)
deg_sd
deg_mean
values <- lapply(graphs, function(graph) {
# Group size
n <- nrow(graph)
# Degrees
degrees <- rowSums(graph)
deg_mean <- mean(degrees)
deg_sd <- sd(degrees)
# compile and return
to_return <- data.frame(n = n, DegreeMean = deg_mean, DegreeSD = deg_sd)
})
rm(values)
dispersion <- lapply(graphs, function(graph) {
# Group size
n <- nrow(graph)
# Degrees
degrees <- rowSums(graph)
deg_mean <- mean(degrees)
deg_sd <- sd(degrees)
# compile and return
to_return <- data.frame(n = n, DegreeMean = deg_mean, DegreeSD = deg_sd)
})
dispersion <- do.call("rbind", dispersion)
View(dispersion)
dispersion <- dispersion %>%
mutate(Dispersion = DegreeSD / DegreeMean)
gg_dispersion <- ggplot(dispersion, aes(x = n, y = Dispersion)) +
geom_point() +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot(dispersion, aes(x = n, y = DegreeMean)) +
geom_point() +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot(dispersion, aes(x = n, y = DegreeSD)) +
geom_point() +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot(dispersion, aes(x = n, y = Dispersion)) +
geom_point() +
theme_classic()
View(dispersion)
gg_dispersion <- ggplot(dispersion, aes(x = n, y = Dispersion)) +
geom_point() +
theme_classic()
gg_dispersion
dispersion <- dispersion %>%
mutate(Dispersion = DegreeSD / DegreeMean) %>%
summarise(Dispersion = Mean(Dispersion))
dispersion <- dispersion %>%
mutate(Dispersion = DegreeSD / DegreeMean) %>%
summarise(Dispersion = mean(Dispersion))
gg_dispersion <- ggplot(dispersion, aes(x = n, y = Dispersion)) +
geom_point() +
theme_classic()
gg_dispersion
dispersion <- lapply(graphs, function(graph) {
# Group size
n <- nrow(graph)
# Degrees
degrees <- rowSums(graph)
deg_mean <- mean(degrees)
deg_sd <- sd(degrees)
# compile and return
to_return <- data.frame(n = n, DegreeMean = deg_mean, DegreeSD = deg_sd)
})
dispersion <- do.call("rbind", dispersion)
dispersion <- dispersion %>%
mutate(Dispersion = DegreeSD / DegreeMean) %>%
summarise(Dispersion = mean(Dispersion))
View(dispersion)
?summarise
dispersion <- lapply(graphs, function(graph) {
# Group size
n <- nrow(graph)
# Degrees
degrees <- rowSums(graph)
deg_mean <- mean(degrees)
deg_sd <- sd(degrees)
# compile and return
to_return <- data.frame(n = n, DegreeMean = deg_mean, DegreeSD = deg_sd)
})
dispersion <- do.call("rbind", dispersion)
dispersion <- dispersion %>%
mutate(Dispersion = DegreeSD / DegreeMean) %>%
group_by(n) %>%
summarise(Dispersion = mean(Dispersion))
gg_dispersion <- ggplot(dispersion, aes(x = n, y = Dispersion)) +
geom_point() +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot(dispersion, aes(x = n, y = Dispersion)) +
geom_point() +
geom_line() +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot(dispersion, aes(x = n, y = Dispersion)) +
geom_point() +
theme_classic()
gg_dispersion
rm(list = ls())
source("scripts/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
filename <- "Sigma001-Eps001--Bias1.1"
# Cutoff for threshold ratio to allow easier plotting
ThreshCutoffValue <- 10
ThreshCutoffReplacement <- Inf
ThreshCutoffReplacementColor <- 10
####################
# Compare entropies
####################
# Load social
load("output/Rdata/Sigma0.01-Epsilon0.01-Bias1.1.Rdata")
graphs <- unlist(groups_graphs, recursive = FALSE)
threshMat <- unlist(groups_thresh, recursive = FALSE)
actMat <- unlist(groups_taskDist, recursive = FALSE)
social_graphs <- lapply(1:length(graphs), function(i) {
# Calculated degree
degree <- rowSums(graphs[[i]])
degree <- as.data.frame(degree)
degree$Id <- row.names(degree)
# Calculate thresholds
thresh <- threshMat[[i]] %>%
as.data.frame(.) %>%
mutate(ThreshRatio = log(Thresh1 / Thresh2),
Id = row.names(.))
thresh$ThreshRatio[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacement
thresh$ThreshRatio[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacement
thresh$ThreshRatioColor <- thresh$ThreshRatio
thresh$ThreshRatioColor[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacementColor
thresh$ThreshRatioColor[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacementColor
# Calculate actibity
activity <- actMat[[i]] %>%
as.data.frame(.) %>%
mutate(ActRatio = log(Task1 / Task2),
ActTotal = Task1 + Task2,
Id = row.names(.))
# Merge and return
mergedNodes <- merge(degree, thresh)
mergedNodes <- merge(mergedNodes, activity)
return(mergedNodes)
})
social_graphs <- do.call("rbind", social_graphs)
dispersion <- lapply(graphs, function(graph) {
# Group size
n <- nrow(graph)
# Degrees
degrees <- rowSums(graph)
deg_mean <- mean(degrees)
deg_sd <- sd(degrees)
# compile and return
to_return <- data.frame(n = n, DegreeMean = deg_mean, DegreeSD = deg_sd)
})
dispersion <- do.call("rbind", dispersion)
dispersion <- dispersion %>%
mutate(Dispersion = DegreeSD / DegreeMean) %>%
group_by(n) %>%
summarise(Dispersion = mean(Dispersion))
gg_dispersion <- ggplot(dispersion, aes(x = n, y = Dispersion)) +
geom_point() +
theme_classic()
gg_dispersion
dispersion <- lapply(graphs, function(graph) {
# Group size
n <- nrow(graph)
# Degrees
degrees <- rowSums(graph)
deg_mean <- mean(degrees)
deg_sd <- sd(degrees)
# compile and return
to_return <- data.frame(n = n, DegreeMean = deg_mean, DegreeSD = deg_sd)
})
dispersion <- do.call("rbind", dispersion)
dispersion <- dispersion %>%
mutate(Dispersion = DegreeSD / DegreeMean)
dispersionSummary <- dispersion %>%
group_by(n) %>%
summarise(Dispersion = mean(Dispersion))
gg_dispersion <- ggplot()) +
geom_point(dispersion, aes(x = n, y = Dispersion) +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot() +
geom_point(dispersion, aes(x = n, y = Dispersion)) +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot() +
geom_point(data = dispersion, aes(x = n, y = Dispersion)) +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot() +
geom_point(data = dispersion, aes(x = n, y = Dispersion), color = "grey20") +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot() +
geom_point(data = dispersion, aes(x = n, y = Dispersion), color = "grey40") +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot() +
geom_point(data = dispersion, aes(x = n, y = Dispersion), color = "grey80") +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot(data = dispersionSummary, aes(x = n, y = Dispersion)) +
geom_point(data = dispersion, aes(x = n, y = Dispersion), color = "grey80") +
geom_line() +
geom_point() +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot(data = dispersionSummary, aes(x = n, y = Dispersion)) +
geom_point(data = dispersion, aes(x = n, y = Dispersion), color = "grey80", size = 0.5) +
geom_line() +
geom_point(size = 1) +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot(data = dispersionSummary, aes(x = n, y = Dispersion)) +
geom_point(data = dispersion, aes(x = n, y = Dispersion), color = "grey90", size = 0.5) +
geom_line() +
geom_point(size = 2) +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot(data = dispersionSummary, aes(x = n, y = Dispersion)) +
geom_point(data = dispersion, aes(x = n, y = Dispersion), color = "grey80", size = 0.5) +
geom_line() +
geom_point(size = 2) +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot(data = dispersionSummary, aes(x = n, y = Dispersion)) +
geom_point(data = dispersion, aes(x = n, y = Dispersion), color = "grey80", size = 0.5, position = jitter()) +
geom_line() +
geom_point(size = 2) +
theme_classic()
dispersion <- lapply(graphs, function(graph) {
# Group size
n <- nrow(graph)
# Degrees
degrees <- rowSums(graph)
deg_mean <- mean(degrees)
deg_sd <- sd(degrees)
# compile and return
to_return <- data.frame(n = n, DegreeMean = deg_mean, DegreeSD = deg_sd)
})
dispersion <- do.call("rbind", dispersion)
dispersion <- dispersion %>%
mutate(Dispersion = DegreeSD / DegreeMean)
dispersionSummary <- dispersion %>%
group_by(n) %>%
summarise(Dispersion = mean(Dispersion))
gg_dispersion <- ggplot(data = dispersionSummary, aes(x = n, y = Dispersion)) +
geom_point(data = dispersion, aes(x = n, y = Dispersion), color = "grey80", size = 0.5) +
geom_line() +
geom_point(size = 2) +
theme_classic()
gg_dispersion
gg_dispersion <- ggplot(data = dispersionSummary, aes(x = n, y = Dispersion)) +
geom_point(data = dispersion, aes(x = n, y = Dispersion), color = "grey80", size = 0.5) +
geom_line() +
geom_point(size = 2) +
theme_classic() +
theme(aspect.ratio = 1) +
gg_dispersion
gg_dispersion <- ggplot(data = dispersionSummary, aes(x = n, y = Dispersion)) +
geom_point(data = dispersion, aes(x = n, y = Dispersion), color = "grey80", size = 0.5) +
geom_line() +
geom_point(size = 2) +
theme_classic() +
theme(aspect.ratio = 1)
gg_dispersion
gg_dispersion <- ggplot(data = dispersionSummary, aes(x = n, y = Dispersion)) +
geom_point(data = dispersion, aes(x = n, y = Dispersion), color = "grey80", size = 0.5) +
geom_line(type = "dashed") +
geom_point(size = 2) +
theme_classic() +
theme(aspect.ratio = 1)
gg_dispersion
gg_dispersion <- ggplot(data = dispersionSummary, aes(x = n, y = Dispersion)) +
geom_point(data = dispersion, aes(x = n, y = Dispersion), color = "grey80", size = 0.5) +
geom_line(linetype = "dashed") +
geom_point(size = 2) +
theme_classic() +
theme(aspect.ratio = 1)
gg_dispersion
# Load fixed
load("output/Rdata/Sigma001-FIXED-ConnectP01-Bias1.1.Rdata")
graphs <- unlist(groups_graphs, recursive = FALSE)
threshMat <- unlist(groups_thresh, recursive = FALSE)
actMat <- unlist(groups_taskDist, recursive = FALSE)
dispersion <- lapply(graphs, function(graph) {
# Group size
n <- nrow(graph)
# Degrees
degrees <- rowSums(graph)
deg_mean <- mean(degrees)
deg_sd <- sd(degrees)
# compile and return
to_return <- data.frame(n = n, DegreeMean = deg_mean, DegreeSD = deg_sd)
})
dispersion <- do.call("rbind", dispersion)
dispersion <- dispersion %>%
mutate(Dispersion = DegreeSD / DegreeMean)
dispersionSummary <- dispersion %>%
group_by(n) %>%
summarise(Dispersion = mean(Dispersion))
gg_dispersion <- ggplot(data = dispersionSummary, aes(x = n, y = Dispersion)) +
geom_point(data = dispersion, aes(x = n, y = Dispersion), color = "grey80", size = 0.5) +
geom_line(linetype = "dashed") +
geom_point(size = 2) +
theme_classic() +
theme(aspect.ratio = 1)
gg_dispersion
fix_graphs <- unlist(groups_graphs, recursive = FALSE)
fix_threshMat <- unlist(groups_thresh, recursive = FALSE)
fix_actMat <- unlist(groups_taskDist, recursive = FALSE)
fixed_graphs <- lapply(1:length(fix_graphs), function(i) {
# Calculated degree
degree <- rowSums(graphs[[i]])
degree <- as.data.frame(degree)
degree$Id <- row.names(degree)
# Calculate thresholds
thresh <- fix_threshMat[[i]] %>%
as.data.frame(.) %>%
mutate(ThreshRatio = log(Thresh1 / Thresh2),
Id = row.names(.))
thresh$ThreshRatio[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacement
thresh$ThreshRatio[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacement
thresh$ThreshRatioColor <- thresh$ThreshRatio
thresh$ThreshRatioColor[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacementColor
thresh$ThreshRatioColor[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacementColor
# Calculate actibity
activity <- fix_actMat[[i]] %>%
as.data.frame(.) %>%
mutate(ActRatio = log(Task1 / Task2),
ActTotal = Task1 + Task2,
Id = row.names(.))
# Merge and return
mergedNodes <- merge(degree, thresh)
mergedNodes <- merge(mergedNodes, activity)
return(mergedNodes)
})
fixed_graphs <- do.call("rbind", fixed_graphs)
View(fixed_graphs)
rm(list = ls())
source("scripts/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
filename <- "Sigma001-Eps001-Bias1.1-TestFramework"
####################
# Compare entropies
####################
# Load social
load("output/Rdata/Sigma0.01-Epsilon0.01-Bias1.1_testframework.Rdata")
entropy <- unlist(groups_entropy, recursive = FALSE)
entropy <- do.call("rbind", entropy)  %>%
mutate(set = paste(n, replicate, sep = "-"))%>%
select(-Dsym, -Dtask) %>%
filter(n != 1) %>%
group_by(n) %>%
summarise(Mean = mean(Dind),
SE = sd(Dind) / sqrt(length(Dind))) %>%
mutate(Model = "Social")
load("output/Rdata/Sigma0.01-Epsilon0.01-Bias1.1.Rdata")
entropy <- unlist(groups_entropy, recursive = FALSE)
entropy <- do.call("rbind", entropy)  %>%
mutate(set = paste(n, replicate, sep = "-"))%>%
select(-Dsym, -Dtask) %>%
filter(n != 1) %>%
group_by(n) %>%
summarise(Mean = mean(Dind),
SE = sd(Dind) / sqrt(length(Dind))) %>%
mutate(Model = "Social")
plot(entropy$n, entropy$Mean)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/1_SocThreshModel.R')
