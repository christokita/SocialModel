# Calculate Entropy
entropy <- mutualEntropy(TotalStateMat = X_tot)
# Calculate total task distribution
totalTaskDist <- X_tot / gens
# Create tasktally table
stimMat <- cbind(stimMat, 0:(nrow(stimMat) - 1))
colnames(stimMat)[ncol(stimMat)] <- "t"
# Add total task distributions, entropy values, and graphs to lists
ens_taskDist[[sim]]    <- totalTaskDist
ens_entropy[[sim]]     <- entropy
ens_taskTally[[sim]]   <- taskTally
ens_stim[[sim]]        <- stimMat
ens_thresh[[sim]]      <- threshMat
ens_thresh1Time[[sim]] <- thresh1time
ens_thresh2Time[[sim]] <- thresh2time
ens_graphs[[sim]]      <- g_tot / gens
}
# Add to list of lists
groups_taskDist[[i]]    <- ens_taskDist
groups_taskTally[[i]]   <- ens_taskTally
groups_stim[[i]]        <- ens_stim
groups_thresh[[i]]      <- ens_thresh
groups_entropy[[i]]     <- ens_entropy
groups_thresh1Time[[i]] <- ens_thresh1Time
groups_thresh2Time[[i]] <- ens_thresh2Time
groups_graphs[[i]]      <- ens_graphs
}
thresh_time1 <- do.call('rbind', thresh1time)
thresh_time1 <- as.data.frame(thresh_time1)
thresh_time1 <- thresh_time1 %>%
mutate(t = 0:(nrow(.)-1)) %>%
gather(., Id, Threshold, -t)
thresh_time2 <- do.call('rbind', thresh2time)
thresh_time2 <- as.data.frame(thresh_time2)
thresh_time2 <- thresh_time2 %>%
mutate(t = 0:(nrow(.)-1)) %>%
gather(., Id, Threshold, -t)
# Plot time series
gg_threshtime <- ggplot(thresh_time1, aes(x = t, y = Threshold, group = Id)) +
geom_line(size = 0.1, alpha = 0.1, colour = "#1f78b4") +
scale_x_continuous(name = expression(paste("Time step (", italic(t), ")")),
breaks = c(1, seq(10000, 50000, 10000)),
labels = c("0", "", "", "", "", "50,000"),
expand = c(0, 0)) +
scale_y_continuous(name = expression(paste("Task 1 threshold (", italic(theta[i1,t]), ")")),
limits = c(0, 100),
breaks = seq(0, 100, 50)) +
theme_ctokita() +
theme(axis.title = element_blank(),
axis.text.x = element_text(hjust = 0.7))
gg_threshtime
# Plot histogram of task performance
task_data <- as.data.frame(X_tot) / gens
task_data$bias <- task_data$Task2 - task_data$Task1
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 25, size = 0.2, color = "white", fill = "#1f78b4") +
theme_ctokita() +
scale_y_continuous(breaks = seq(0, 40, 20)) +
theme(axis.title = element_blank(),
axis.text.x = element_text(hjust = 0.7))
gg_taskdist
#Save
save(thresh_time1, thresh_time2, X_tot, file = paste0("output/ThresholdTime/Examples/n", n, "-eps", epsilon, "-beta", beta, ".Rdata"))
####################
# Analuyze data
####################
# Load
load('output/ThresholdTime/Examples/n80-eps0.1-beta1.1.Rdata')
# Plot time series
gg_threshtime <- ggplot(thresh_time1, aes(x = t, y = Threshold, group = Id)) +
geom_line(size = 0.1, alpha = 0.1, colour = "#1f78b4") +
scale_x_continuous(name = expression(paste("Time step (", italic(t), ")")),
breaks = c(1, seq(10000, 50000, 10000)),
labels = c("0", "", "", "", "", "50,000"),
expand = c(0, 0)) +
scale_y_continuous(name = expression(paste("Task 1 threshold (", italic(theta[i1,t]), ")")),
limits = c(0, 100),
breaks = seq(0, 100, 50)) +
theme_ctokita() +
theme(axis.title = element_blank(),
axis.text.x = element_text(hjust = 0.7))
gg_threshtime
ggsave(gg_threshtime, filename = paste0("output/ThresholdTime/Examples/TimeSeries_n", n, "-beta", beta, "-epsilon", epsilon, ".png"),
width = 31, height = 19.5, units = "mm", dpi = 400)
# Plot histogram of task performance
task_data <- as.data.frame(X_tot) / gens
task_data$bias <- task_data$Task2 - task_data$Task1
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 25, size = 0.2, color = "white", fill = "#1f78b4") +
theme_ctokita() +
scale_y_continuous(breaks = seq(0, 40, 20)) +
theme(axis.title = element_blank(),
axis.text.x = element_text(hjust = 0.7))
gg_taskdist
ggsave(gg_taskdist, filename = paste0("output/ThresholdTime/Examples/TaskDist_n", n, "-beta", beta, "-epsilon", epsilon, ".svg"),
width = 30.5, height = 19.5, units = "mm", dpi = 400)
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 25, size = 0.2, color = "white", fill = "#1f78b4") +
theme_ctokita() +
scale_y_continuous(breaks = seq(0, 30, 15)) +
theme(axis.title = element_blank(),
axis.text.x = element_text(hjust = 0.7))
gg_taskdist
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 25, size = 0.2, color = "white", fill = "#1f78b4") +
theme_ctokita() +
scale_y_continuous(breaks = seq(0, 40, 20),
limits = c(0, 40)) +
theme(axis.title = element_blank(),
axis.text.x = element_text(hjust = 0.7))
gg_taskdist
ggsave(gg_taskdist, filename = paste0("output/ThresholdTime/Examples/TaskDist_n", n, "-beta", beta, "-epsilon", epsilon, ".svg"),
width = 30.5, height = 19.5, units = "mm", dpi = 400)
sqrt(b = 1.1)
b <- 1.1
d <- 0.8
numerator <- -2*b(-1 + d) + 2*b^2*d + sqrt(-4*b^2 (-1 + d) - 2*(-2 + d)*d + 4*b (-1 + d)*d - 4*b^3 (-1 + d)*d + 2*b^4*d^2)
numerator <- -2*b*(-1 + d) + 2*b^2*d + sqrt(-4*b^2 (-1 + d) - 2*(-2 + d)*d + 4*b*(-1 + d)*d - 4*b^3*(-1 + d)*d + 2*b^4*d^2)
numerator <- -2*b*(-1 + d) + 2*b^2*d + sqrt(-4*b^2*(-1 + d) - 2*(-2 + d)*d + 4*b*(-1 + d)*d - 4*b^3*(-1 + d)*d + 2*b^4*d^2)
denom <- (-1+b)*d*(2+(-1+b)*d)
rm(list = ls())
####################
# Source necessary scripts/libraries
####################
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
# Beta sweeps -----------------------------------------------------------------
####################
# Plot: Beta sweep - positive social influence
####################
load("output/ParameterSpace/GroupSizeBetaSweep_Sigma0-Epsilon0.1.Rdata")
pal <- brewer_pal("seq", "GnBu")
pal <- pal(9)
analytical_data <- data.frame(beta = seq(1.001, 1.255, 0.0001), n = rep(NA, length(seq(1.001, 1.255, 0.0001))))
for (i in 1:nrow(analytical_data)) {
b <- analytical_data[i, 1]
d <- 0.8
numerator <- -2*b*(-1 + d) + 2*b^2*d + sqrt(-4*b^2*(-1 + d) - 2*(-2 + d)*d + 4*b*(-1 + d)*d - 4*b^3*(-1 + d)*d + 2*b^4*d^2)
denom <- (-1+b)*d*(2+(-1+b)*d)
analytical_data[i, 2] <- numerator/denom
}
analytical_data <- analytical_data %>%
filter(n < 102.5)
# As one plot
gg_beta_all <- ggplot() +
geom_tile(data = entropy, aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
theme_bw() +
geom_hline(yintercept = 1, size = 0.3, linetype = "dashed") +
geom_line(data = analytical_data, aes(x = n, y = beta), size = 0.6) +
scale_x_continuous(breaks = c(5, seq(20, 100, 20)),
expand = c(0,0),
limits = c(2.5, 102.5)) +
scale_y_continuous(breaks = seq(0.75, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste( "Interaction bias (", italic(beta), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 2)
gg_beta_all
# Not accounting for double interact
analytical_data <- data.frame(beta = seq(1.001, 1.255, 0.0001), n = rep(NA, length(seq(1.001, 1.255, 0.0001))))
for (i in 1:nrow(analytical_data)) {
analytical_data[i, 2] <- (2 * analytical_data[i, 1]) / (0.8 * (analytical_data[i, 1] - 1))
}
analytical_data <- analytical_data %>%
filter(n < 102.5)
# Accounting for double interact
analytical_data <- data.frame(beta = seq(1.001, 1.255, 0.0001), n = rep(NA, length(seq(1.001, 1.255, 0.0001))))
for (i in 1:nrow(analytical_data)) {
b <- analytical_data[i, 1]
d <- 0.8
numerator <- -2*b*(-1 + d) + 2*b^2*d + sqrt(-4*b^2*(-1 + d) - 2*(-2 + d)*d + 4*b*(-1 + d)*d - 4*b^3*(-1 + d)*d + 2*b^4*d^2)
denom <- (-1+b)*d*(2+(-1+b)*d)
analytical_data[i, 2] <- numerator/denom
}
analytical_data <- analytical_data %>%
filter(n < 102.5)
# As one plot
gg_beta_all <- ggplot() +
geom_tile(data = entropy, aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
theme_bw() +
geom_hline(yintercept = 1, size = 0.3, linetype = "dashed") +
geom_line(data = analytical_data, aes(x = n, y = beta), size = 0.6) +
scale_x_continuous(breaks = c(5, seq(20, 100, 20)),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(0.75, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste( "Interaction bias (", italic(beta), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 2)
gg_beta_all
####################
# Plot: Beta sweep - negative social influence
####################
load("output/ParameterSpace/GroupSizeBetaSweep_Sigma0-Epsilon-0.1.Rdata")
pal <- brewer_pal("seq", "GnBu")
pal <- pal(9)
# As one plot
gg_beta_all <- ggplot() +
geom_tile(data = entropy, aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
theme_bw() +
geom_hline(yintercept = 1, size = 0.3, linetype = "dashed") +
geom_line(data = analytical_data, aes(x = n, y = beta), size = 0.6) +
scale_x_continuous(breaks = c(5, seq(20, 100, 20)),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(0.75, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste( "Interaction bias (", italic(beta), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 2)
gg_beta_all
betas <- seq(1, 2, 0.001)
nstar <- lapply(betas, function(beta) {
full_solution_nom <- (4*beta-delta-4*beta*delta+5*beta^2*delta+sqrt(16*beta^2-8*beta*delta+16*beta^2*delta-8*beta^3*delta+delta^2+8*beta*delta^2-18*beta^2*delta^2+8*beta^3*delta^2+beta^4*delta^2))
full_solution_denom <- 2*(-2*delta+2*beta*delta+delta^2-2*beta*delta^2=beta^2*delta^2)
full_solution <- full_solution_nom / full_solution_denom
simp_solution <- 2*beta / (delta * (beta-1))
to_return <- data.frame(beta = beta, nstar_simp = simp_solution, nstar_full = full_solution)
})
betas <- seq(1, 2, 0.001)
delta <- 0.8
nstar <- lapply(betas, function(beta) {
full_solution_nom <- (4*beta-delta-4*beta*delta+5*beta^2*delta+sqrt(16*beta^2-8*beta*delta+16*beta^2*delta-8*beta^3*delta+delta^2+8*beta*delta^2-18*beta^2*delta^2+8*beta^3*delta^2+beta^4*delta^2))
full_solution_denom <- 2*(-2*delta+2*beta*delta+delta^2-2*beta*delta^2=beta^2*delta^2)
full_solution <- full_solution_nom / full_solution_denom
simp_solution <- 2*beta / (delta * (beta-1))
to_return <- data.frame(beta = beta, nstar_simp = simp_solution, nstar_full = full_solution)
})
nstar <- lapply(betas, function(beta) {
full_solution_nom <- (4*beta-delta-4*beta*delta+5*beta^2*delta+sqrt(16*beta^2-8*beta*delta+16*beta^2*delta-8*beta^3*delta+delta^2+8*beta*delta^2-18*beta^2*delta^2+8*beta^3*delta^2+beta^4*delta^2))
full_solution_denom <- 2*(-2*delta+2*beta*delta+delta^2-2*beta*delta^2+beta^2*delta^2)
full_solution <- full_solution_nom / full_solution_denom
simp_solution <- 2*beta / (delta * (beta-1))
to_return <- data.frame(beta = beta, nstar_simp = simp_solution, nstar_full = full_solution)
})
nstar <- do.call('rbind', nstar)
View(nstar)
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp)) +
geom_line(aes(y = nstar_full)) +
ylab(expression(n*)) +
theme_ctokita()
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp)) +
geom_line(aes(y = nstar_full)) +
ylab(expression(n*)) +
theme_ctokita()
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp)) +
geom_line(aes(y = nstar_full)) +
ylab(expression(paste(n*))) +
theme_ctokita()
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp)) +
geom_line(aes(y = nstar_full)) +
ylab(expression(paste(n^*))) +
theme_ctokita()
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp)) +
geom_line(aes(y = nstar_full)) +
ylab(expression(paste(n^*, "blah"))) +
theme_ctokita()
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp)) +
geom_line(aes(y = nstar_full)) +
ylab(expression(paste(n^{*}, "blah"))) +
theme_ctokita()
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp)) +
geom_line(aes(y = nstar_full)) +
ylab(expression(n[*])) +
theme_ctokita()
source("scripts/util/__Util__MASTER.R")
betas <- seq(1, 2, 0.001)
delta <- 0.8
nstar <- lapply(betas, function(beta) {
full_solution_nom <- (4*beta-delta-4*beta*delta+5*beta^2*delta+sqrt(16*beta^2-8*beta*delta+16*beta^2*delta-8*beta^3*delta+delta^2+8*beta*delta^2-18*beta^2*delta^2+8*beta^3*delta^2+beta^4*delta^2))
full_solution_denom <- 2*(-2*delta+2*beta*delta+delta^2-2*beta*delta^2+beta^2*delta^2)
full_solution <- full_solution_nom / full_solution_denom
simp_solution <- 2*beta / (delta * (beta-1))
to_return <- data.frame(beta = beta, nstar_simp = simp_solution, nstar_full = full_solution)
})
nstar <- do.call('rbind', nstar)
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp)) +
geom_line(aes(y = nstar_full)) +
ylab(expression(n[*])) +
theme_ctokita()
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp)) +
geom_line(aes(y = nstar_full)) +
ylab(expression(n[1])) +
theme_ctokita()
gg_nstar_comp
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp)) +
geom_line(aes(y = nstar_full)) +
ylab(expression(n[1])) +
scale_y_continuous(limits = c(0, 100)) +
theme_ctokita()
gg_nstar_comp
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp)) +
geom_line(aes(y = nstar_full)) +
ylab(expression(n[1])) +
scale_y_continuous(limits = c(0, 50)) +
theme_ctokita()
gg_nstar_comp
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp)) +
geom_line(aes(y = nstar_full)) +
ylab(expression(n[1])) +
scale_y_continuous(limits = c(0, 50)) +
theme_ctokita() +
theme(aspect.ratio = 1)
gg_nstar_comp
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp)) +
geom_line(aes(y = nstar_full)) +
ylab(expression(n[1])) +
xlab(expression(beta)) +
scale_y_continuous(limits = c(0, 50)) +
theme_ctokita() +
theme(aspect.ratio = 1)
gg_nstar_comp
xlab(expression(paste("Interaction bias (", beta, ")")) +
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp)) +
geom_line(aes(y = nstar_full)) +
ylab(expression(n[1])) +
xlab(expression(paste("Interaction bias (", beta, ")"))) +
scale_y_continuous(limits = c(0, 50)) +
theme_ctokita() +
theme(aspect.ratio = 1)
gg_nstar_comp
gg_nstar_comp
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp)) +
geom_line(aes(y = nstar_full)) +
ylab(expression(n[1])) +
xlab(expression(paste("Interaction bias (", beta, ")"))) +
scale_y_continuous(limits = c(0, 50)) +
theme_ctokita() +
theme(aspect.ratio = 1)
gg_nstar_comp
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp), color = "#e41a1c") +
geom_line(aes(y = nstar_full), color = "#377eb8") +
ylab(expression(n[1])) +
xlab(expression(paste("Interaction bias (", beta, ")"))) +
scale_y_continuous(limits = c(0, 50)) +
theme_ctokita() +
theme(aspect.ratio = 1)
gg_nstar_comp
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp), color = "#e41a1c") +
geom_line(aes(y = nstar_full), color = "#377eb8") +
ylab(expression(n^\*)) +
xlab(expression(paste("Interaction bias (", beta, ")"))) +
scale_y_continuous(limits = c(0, 50)) +
theme_ctokita() +
theme(aspect.ratio = 1)
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp), color = "#e41a1c") +
geom_line(aes(y = nstar_full), color = "#377eb8") +
ylab("n*")) +
xlab(expression(paste("Interaction bias (", beta, ")"))) +
scale_y_continuous(limits = c(0, 50)) +
theme_ctokita() +
theme(aspect.ratio = 1)
gg_nstar_comp
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp), color = "#e41a1c") +
geom_line(aes(y = nstar_full), color = "#377eb8") +
ylab("n*") +
xlab(expression(paste("Interaction bias (", beta, ")"))) +
scale_y_continuous(limits = c(0, 50)) +
theme_ctokita() +
theme(aspect.ratio = 1)
gg_nstar_comp
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp), color = "#e41a1c") +
geom_line(aes(y = nstar_full), color = "#377eb8") +
ylab("n*") +
xlab(expression(paste("Interaction bias (", beta, ")"))) +
scale_y_continuous(limits = c(0, 50)) +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.location = "right")
gg_nstar_comp
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta)) +
geom_line(aes(y = nstar_simp), color = "#e41a1c") +
geom_line(aes(y = nstar_full), color = "#377eb8") +
ylab("n*") +
xlab(expression(paste("Interaction bias (", beta, ")"))) +
scale_y_continuous(limits = c(0, 50)) +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.position = "right")
gg_nstar_comp
nstar_melt <- nstar %>%
gather(-beta)
View(nstar_melt)
nstar_melt <- nstar %>%
gather(beta, variable, value, -beta)
nstar_melt <- nstar %>%
gather(beta, variable, value, -beta)
nstar_melt <- nstar %>%
melt(id.vars = "beta")
View(nstar_melt)
# Plot
gg_nstar_comp <- ggplot(nstar, aes(x = beta, group = variable, color = variable)) +
geom_line(aes(y = value)) +
ylab("n*") +
xlab(expression(paste("Interaction bias (", beta, ")"))) +
scale_y_continuous(limits = c(0, 50)) +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.position = "right")
gg_nstar_comp
# Plot
gg_nstar_comp <- ggplot(nstar_melt, aes(x = beta, group = variable, color = variable)) +
geom_line(aes(y = value)) +
ylab("n*") +
xlab(expression(paste("Interaction bias (", beta, ")"))) +
scale_y_continuous(limits = c(0, 50)) +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.position = "right")
gg_nstar_comp
# Plot
gg_nstar_comp <- ggplot(nstar_melt, aes(x = beta, group = variable, color = variable)) +
geom_line(aes(y = value)) +
ylab("n*") +
xlab(expression(paste("Interaction bias (", beta, ")"))) +
scale_y_continuous(limits = c(0, 50)) +
scale_color_manual(name = "Solution") +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.position = "right")
gg_nstar_comp
# Plot
gg_nstar_comp <- ggplot(nstar_melt, aes(x = beta, group = variable, color = variable)) +
geom_line(aes(y = value)) +
ylab("n*") +
xlab(expression(paste("Interaction bias (", beta, ")"))) +
scale_y_continuous(limits = c(0, 50)) +
scale_color_manual(name = "Solution", values = c("#984ea3", "#4daf4a")) +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.position = "right")
gg_nstar_comp
