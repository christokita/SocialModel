scale_colour_gradient2(name = "Threshold\nRatio (ln)",
high = "#d7191c",
mid = "#ffffbf",
low = "#2c7bb6",
midpoint = 0,
limits = c(-2, 2),
oob = squish) +
xlab("Task 1") +
ylab("Task 2") +
facet_wrap( ~ n)
gg_activity
ggsave(filename = "output/NetworkDataPlots/Social_TaskPerfVsThreshRatio.png", width = 5, height = 4, units = "in", dpi = 600)
gg_degree_act
ggsave(filename = "output/NetworkDataPlots/Social_DegreeVsActivity.png", width = 5, height = 4, units = "in", dpi = 600)
gg_FIX_degree_act <- ggplot(data = fixed_graphs,
aes(x = ActTotal, y = degree, colour = ThreshRatioColor, group = n)) +
geom_point(size = 0.2) +
theme_bw(base_size = 10) +
scale_colour_gradient2(name = "Threshold\nRatio (ln)",
high = "#2c7bb6",
mid = "#ffffbf",
low = "#d7191c",
midpoint = 0,
limits = c(-2, 2),
oob = squish) +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA),
axis.text = element_text(color = "black"),
strip.background = element_blank()) +
facet_wrap( ~ n, scales = "free_y")
gg_FIX_degree_act
ggsave(filename = "output/NetworkDataPlots/Fixed_DegreeVsActivity.png", width = 5, height = 4, units = "in", dpi = 600)
rm(list = ls())
source("scripts/__Util__MASTER.R")
####################
# Set global variables
####################
# Initial paramters: Free to change
# Base parameters
Ns             <- c(20) #vector of number of individuals to simulate
m              <- 2 #number of tasks
gens           <- 10000 #number of generations to run simulation
corrStep       <- 200 #number of time steps for calculation of correlation
reps           <- 1 #number of replications per simulation (for ensemble)
# Threshold Parameters
ThreshM        <- rep(10, m) #population threshold means
ThreshSD       <- ThreshM * 0.01 #population threshold standard deviations
InitialStim    <- rep(0, m) #intital vector of stimuli
deltas         <- rep(0.6, m) #vector of stimuli increase rates
alpha          <- m #efficiency of task performance
quitP          <- 0.2 #probability of quitting task once active
# Social Network Parameters
epsilon        <- 0 #relative weighting of social interactions for lowering thresholds #0.01 = epsilon = phi
phi            <- 0 #default forgetting rate of thresholds
p              <- 0.1 #probability of interacting with individual in other states
q              <- 1.1 #probability of interacting with individual in same state relative to others
####################
# Run simulation multiple times
####################
# Prep meta-lists for collection of group size simulations
groups_taskDist  <- list()
groups_taskCorr  <- list()
groups_taskStep  <- list()
groups_taskTally <- list()
groups_stim      <- list()
groups_thresh    <- list()
groups_entropy   <- list()
groups_graphs    <- list()
groups_specialization <- data.frame(NULL)
# Loop through group sizes
for (i in 1:length(Ns)) {
# Set group size
n <- Ns[i]
# Prep lists for collection of simulation outputs
ens_taskDist  <- list()
ens_taskCorr  <- list()
ens_taskStep  <- list()
ens_taskTally <- list()
ens_entropy   <- list()
ens_stim      <- list()
ens_thresh    <- list()
ens_graphs    <- list()
# Run Simulations
for (sim in 1:reps) {
####################
# Seed structures and intial matrices
####################
# Set initial probability matrix (P_g)
P_g <- matrix(data = rep(0, n * m), ncol = m)
# Seed task (external) stimuli
stimMat <- seedStimuls(InitialSVector = InitialStim,
gens = gens)
# Seed internal thresholds
threshMat <- seedThresholds(n = n,
m = m,
ThresholdMeans = ThreshM,
ThresholdSDs = ThreshSD)
# Start task performance
X_g <- matrix(data = rep(0, length(P_g)), ncol = ncol(P_g))
# Create cumulative task performance matrix
X_tot <- X_g
# Create cumulative adjacency matrix
g_tot <-  matrix(data = rep(0, n * n), ncol = n)
colnames(g_tot) <- paste0("v-", 1:n)
rownames(g_tot) <- paste0("v-", 1:n)
# Prep correlation step matrix
X_prev <- matrix(data = rep(0, n * m), ncol = m)
X_prevTot <- matrix(data = rep(0, n * m), ncol = m)
taskCorr <- list()
taskStep <- list()
taskTally <- list()
taskOverTime  <- matrix(nrow = 0, ncol = n)
####################
# Simulate
####################
# Run simulation
for (t in 1:gens) {
# Update stimuli
for (j in 1:ncol(stimMat)) {
# update stim
stimMat[t + 1, j] <- globalStimUpdate(stimulus = stimMat[t, j],
delta = deltas[j],
alpha = alpha,
Ni = sum(X_g[ , j]),
n = n)
}
# Update social network
g_adj <- temporalNetwork(X_sub_g = X_g,
p = p,
bias = q)
g_tot <- g_tot + g_adj
# Calculate task demand based on global stimuli
P_g <- calcThresholdDetermMat(TimeStep = t + 1, # first row is generation 0
ThresholdMatrix = threshMat,
StimulusMatrix = stimMat)
# Update task performance
X_g <- updateTaskPerformance(P_sub_g    = P_g,
TaskMat    = X_g,
QuitProb   = quitP)
# Adjust thresholds
threshMat <- adjustThresholdsSocial(SocialNetwork = g_adj,
ThresholdMatrix = threshMat,
X_sub_g = X_g,
epsilon = epsilon,
phi = phi)
# Note which task is being peformed
taskPerf <- matrix(nrow = 1, ncol = n)
for (i in 1:nrow(X_g)) {
task <- unname(which(X_g[i, ] == 1))
if (length(task) == 0) {
task <- 0
}
taskPerf[i] <- task
}
colnames(taskPerf) <- row.names(X_g)
taskOverTime <- rbind(taskOverTime, taskPerf)
# Capture current task performance tally
tally <- matrix(c(t, colSums(X_g)), ncol = ncol(X_g) + 1)
colnames(tally) <- c("t", colnames(X_g))
tally <- transform(tally, Inactive = n - sum(X_g), n = n, replicate = sim)
taskTally[[t]] <- tally
# Update total task performance profile
X_tot <- X_tot + X_g
# Create time step for correlation
if (t %% corrStep == 0) {
# Get tasks performance in correlation step
X_step <- X_tot - X_prevTot
# Add to ensemble list of task steps
taskStep[[t / corrStep]] <- X_step
# Calculate rank correlation if it is not the first step
if(sum(X_prev) != 0) {
# Normalize
stepNorm <- X_step / rowSums(X_step)
prevNorm <- X_prev / rowSums(X_prev)
# Calculate ranks
step_ranks <- calculateTaskRank(TaskStepMat = X_step)
prev_ranks <- calculateTaskRank(TaskStepMat = X_prev)
# Calculate Correlation
rankCorr <- cor(prev_ranks, step_ranks, method = "spearman")
# Put in list
taskCorr[[(t / corrStep) - 1]] <- diag(rankCorr)
names(taskCorr)[(t / corrStep) - 1] <- paste0("Gen", t)
}
# Update previous step total matrix
X_prevTot <- X_tot
# Update previous step total matrix
X_prev <- X_step
}
}
# Calculate specialization of task performance
# from Gautrais et al. (2002)
for (col in 1:ncol(taskOverTime)) {
# Grab column of individual
t_prof <- taskOverTime[ , col ]
# Remove inactivity
t_prof <- paste(t_prof, collapse = "")
# Calculate transitions
t_prof <- gsub("1+", "1", t_prof)
t_prof <- gsub("2+", "2", t_prof)
t_prof <- gsub("0+", "", t_prof)
t_prof <- as.numeric(unlist(strsplit(as.character(t_prof), "")))
transitions <- lapply(2:length(t_prof), function(entry) {
a <- t_prof[entry] != t_prof[entry - 1]
})
C_i <- sum(unlist(transitions))
C_i <- C_i / (length(t_prof) - 1)
# Calulate specialization
F_i <- 1 - m * C_i
to_return <- data.frame(individual = paste0("v-", col),
n = n,
replicate = sim,
TransSpec = F_i)
groups_specialization <- rbind(groups_specialization, to_return)
}
# Calculate Entropy
entropy <- mutualEntropy(TotalStateMat = X_tot)
entropy <- transform(entropy, n = n, replicate = sim)
# Calculate total task distribution
# totalTaskDist <- X_tot / rowSums(X_tot)
totalTaskDist <- X_tot / gens
totalTaskDist <- transform(totalTaskDist, Inactive = gens - rowSums(X_tot), n = n, replicate = sim)
# Create tasktally table
taskTally <- do.call("rbind", taskTally)
# Create tasktally table
stimMat <- transform(stimMat, n = n, replicate = sim)
# Create tasktally table
taskCorr <- transform(taskCorr, replicate = sim)
# Add total task distributions, entropy values, and graphs to lists
ens_taskDist[[sim]]  <- totalTaskDist
ens_entropy[[sim]]   <- entropy
ens_taskCorr[[sim]]  <- taskCorr
ens_taskTally[[sim]] <- taskTally
ens_taskStep[[sim]]  <- taskStep
ens_stim[[sim]]      <- stimMat
ens_thresh[[sim]]    <- threshMat
ens_graphs[[sim]]    <- g_tot / gens
# Print simulation completed
print(paste0("DONE: N = ", n, ", Simulation ", sim))
}
# Calculate mean correlation for each n
runCorrs <- lapply(ens_taskCorr, function(x) {
# Unlist
runs <- do.call("rbind", x)
replicate <- runs[nrow(runs), ]
replicate <- unique(replicate)
runs <- runs[-nrow(runs), ]
# Calculate mean
runMean <- matrix(data = rep(NA, m), ncol =  m)
for (column in 1:m) {
runMean[ , column] <- mean(runs[ , column], na.rm = TRUE)
}
runMean <- cbind(runMean, replicate)
colnames(runMean) <- c(paste0("Task", 1:m), "replicate")
return(runMean)
})
runCorrs <- do.call("rbind", runCorrs)
runCorrs <- transform(runCorrs, n = n)
# Add to list of lists
groups_taskDist[[i]]  <- ens_taskDist
groups_taskCorr[[i]]  <- runCorrs
groups_taskStep[[i]]  <- ens_taskStep
groups_taskTally[[i]] <- ens_taskTally
groups_stim[[i]]      <- ens_stim
groups_thresh[[i]]    <- ens_thresh
groups_entropy[[i]]   <- ens_entropy
groups_graphs[[i]]    <- ens_graphs
}
# trim out correlations for group size 1
if(1 %in% Ns) {
groups_taskCorr <- groups_taskCorr[-1]
}
g <- g_tot / gens
# Drop edges below baseline interaction probability
g[g < p] <- 0
# Edgelist
graph <- graph.adjacency(g, weighted = T)
edgelist <- get.edgelist(graph)
edgelist <- as.data.frame(edgelist)
names(edgelist) <- c("Source", "Target")
edgelist$Weight <- E(graph)$weight
# Nodelist
nodelist <- data.frame(Id = rownames(threshMat))
nodelist$Thresh1 <- threshMat[ , 1]
nodelist$Thresh2 <- threshMat[ , 2]
nodelist$ThreshRatio <- log(threshMat[ , 1] / threshMat[ , 2])
write.csv(edgelist, file = "output/Networks/GroupSize20edgelistFixed.csv", row.names = FALSE)
write.csv(nodelist, file = "output/Networks/GroupSize20nodelistFixed.csv", row.names = FALSE)
rm(list = ls())
source("scripts/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
filename <- "Sigma001-Eps001-Phi001-ConnectP01-Bias1.1"
# Cutoff for threshold ratio to allow easier plotting
ThreshCutoffValue <- 10
ThreshCutoffReplacement <- Inf
ThreshCutoffReplacementColor <- 10
####################
# Compare entropies
####################
# Load social
load("output/Rdata/Sigma001-Eps001-Phi001-ConnectP01-Bias1.1.Rdata")
graphs <- unlist(groups_graphs, recursive = FALSE)
threshMat <- unlist(groups_thresh, recursive = FALSE)
actMat <- unlist(groups_taskDist, recursive = FALSE)
social_graphs <- lapply(1:length(graphs), function(i) {
# Calculated degree
degree <- rowSums(graphs[[i]])
degree <- as.data.frame(degree)
degree$Id <- row.names(degree)
# Calculate thresholds
thresh <- threshMat[[i]] %>%
as.data.frame(.) %>%
mutate(ThreshRatio = log(Thresh1 / Thresh2),
Id = row.names(.))
thresh$ThreshRatio[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacement
thresh$ThreshRatio[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacement
thresh$ThreshRatioColor <- thresh$ThreshRatio
thresh$ThreshRatioColor[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacementColor
thresh$ThreshRatioColor[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacementColor
# Calculate actibity
activity <- actMat[[i]] %>%
as.data.frame(.) %>%
mutate(ActRatio = log(Task1 / Task2),
ActTotal = Task1 + Task2,
Id = row.names(.))
# Merge and return
mergedNodes <- merge(degree, thresh)
mergedNodes <- merge(mergedNodes, activity)
return(mergedNodes)
})
social_graphs <- do.call("rbind", social_graphs)
# Load fixed
load("output/Rdata/Sigma001-FIXED-ConnectP01-Bias1.1.Rdata")
graphs <- unlist(groups_graphs, recursive = FALSE)
threshMat <- unlist(groups_thresh, recursive = FALSE)
actMat <- unlist(groups_taskDist, recursive = FALSE)
fixed_graphs <- lapply(1:length(graphs), function(i) {
# Calculated degree
degree <- rowSums(graphs[[i]])
degree <- as.data.frame(degree)
degree$Id <- row.names(degree)
# Calculate thresholds
thresh <- threshMat[[i]] %>%
as.data.frame(.) %>%
mutate(ThreshRatio = log(Thresh1 / Thresh2),
Id = row.names(.))
thresh$ThreshRatio[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacement
thresh$ThreshRatio[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacement
thresh$ThreshRatioColor <- thresh$ThreshRatio
thresh$ThreshRatioColor[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacementColor
thresh$ThreshRatioColor[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacementColor
# Calculate actibity
activity <- actMat[[i]] %>%
as.data.frame(.) %>%
mutate(ActRatio = log(Task1 / Task2),
ActTotal = Task1 + Task2,
Id = row.names(.))
# Merge and return
mergedNodes <- merge(degree, thresh)
mergedNodes <- merge(mergedNodes, activity)
return(mergedNodes)
})
fixed_graphs <- do.call("rbind", fixed_graphs)
gg_activity <- ggplot(data = social_graphs,
aes(x = Task1, y = Task2, color = ThreshRatioColor, group = n)) +
geom_point(size = 0.2) +
theme_bw(base_size = 10) +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA),
axis.text = element_text(color = "black"),
strip.background = element_blank()) +
scale_colour_gradient2(name = "Threshold\nRatio (ln)",
high = "#d7191c",
mid = "#ffffbf",
low = "#2c7bb6",
midpoint = 0,
limits = c(-2, 2),
oob = squish) +
xlab("Task 1") +
ylab("Task 2") +
facet_wrap( ~ n)
gg_activity
gg_activity <- ggplot(data = fixed_graphs,
aes(x = Task1, y = Task2, color = ThreshRatioColor, group = n)) +
geom_point(size = 0.2) +
theme_bw(base_size = 10) +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA),
axis.text = element_text(color = "black"),
strip.background = element_blank()) +
scale_colour_gradient2(name = "Threshold\nRatio (ln)",
high = "#d7191c",
mid = "#ffffbf",
low = "#2c7bb6",
midpoint = 0,
limits = c(-2, 2),
oob = squish) +
xlab("Task 1") +
ylab("Task 2") +
facet_wrap( ~ n)
gg_activity
gg_activity <- ggplot(data = fixed_graphs,
aes(x = Task1, y = Task2, color = ThreshRatioColor, group = n)) +
geom_point(size = 0.2) +
theme_bw(base_size = 10) +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA),
axis.text = element_text(color = "black"),
strip.background = element_blank()) +
scale_colour_gradient2(name = "Threshold\nRatio (ln)",
high = "#d7191c",
mid = "#grey",
low = "#2c7bb6",
midpoint = 0,
limits = c(-2, 2),
oob = squish) +
xlab("Task 1") +
ylab("Task 2") +
facet_wrap( ~ n)
gg_activity
gg_activity <- ggplot(data = fixed_graphs,
aes(x = Task1, y = Task2, color = ThreshRatioColor, group = n)) +
geom_point(size = 0.2) +
theme_bw(base_size = 10) +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA),
axis.text = element_text(color = "black"),
strip.background = element_blank()) +
scale_colour_gradient2(name = "Threshold\nRatio (ln)",
high = "#d7191c",
low = "#2c7bb6",
midpoint = 0,
limits = c(-2, 2),
oob = squish) +
xlab("Task 1") +
ylab("Task 2") +
facet_wrap( ~ n)
gg_activity
gg_activity <- ggplot(data = fixed_graphs,
aes(x = Task1, y = Task2, color = ThreshRatioColor, group = n)) +
geom_point(size = 0.2) +
theme_bw(base_size = 10) +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA),
axis.text = element_text(color = "black"),
strip.background = element_blank()) +
scale_colour_gradient(name = "Threshold\nRatio (ln)",
high = "#d7191c",
low = "#2c7bb6",
midpoint = 0,
limits = c(-2, 2),
oob = squish) +
xlab("Task 1") +
ylab("Task 2") +
facet_wrap( ~ n)
gg_activity
gg_activity <- ggplot(data = fixed_graphs,
aes(x = Task1, y = Task2, color = ThreshRatioColor, group = n)) +
geom_point(size = 0.2) +
theme_bw(base_size = 10) +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA),
axis.text = element_text(color = "black"),
strip.background = element_blank()) +
scale_colour_gradient(name = "Threshold\nRatio (ln)",
high = "#d7191c",
mid = "#756bb1"
low = "#2c7bb6",
midpoint = 0,
limits = c(-2, 2),
oob = squish) +
xlab("Task 1") +
ylab("Task 2") +
facet_wrap( ~ n)
gg_activity <- ggplot(data = fixed_graphs,
aes(x = Task1, y = Task2, color = ThreshRatioColor, group = n)) +
geom_point(size = 0.2) +
theme_bw(base_size = 10) +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA),
axis.text = element_text(color = "black"),
strip.background = element_blank()) +
scale_colour_gradient2(name = "Threshold\nRatio (ln)",
high = "#d7191c",
mid = "#756bb1"
low = "#2c7bb6",
midpoint = 0,
limits = c(-2, 2),
oob = squish) +
xlab("Task 1") +
ylab("Task 2") +
facet_wrap( ~ n)
gg_activity
gg_activity <- ggplot(data = fixed_graphs,
aes(x = Task1, y = Task2, color = ThreshRatioColor, group = n)) +
geom_point(size = 0.2) +
theme_bw(base_size = 10) +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA),
axis.text = element_text(color = "black"),
strip.background = element_blank()) +
scale_colour_gradient2(name = "Threshold\nRatio (ln)",
high = "#d7191c",
mid = "#756bb1",
low = "#2c7bb6",
midpoint = 0,
limits = c(-2, 2),
oob = squish) +
xlab("Task 1") +
ylab("Task 2") +
facet_wrap( ~ n)
gg_activity
