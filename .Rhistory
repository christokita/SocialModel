# Summarise
cumulative_summary <- cumulative_dist %>%
group_by(n, Rank_task1Cum) %>%
summarise(mean_cum = mean(Cumu_task1),
SE_cum = sd(Cumu_task1) / sqrt(length(Cumu_task1)))
####################
# Plot
####################
gg_cumsum <- ggplot(data = cumulative_summary, aes(x = Rank_task1Cum, y = mean_cum)) +
geom_abline(slope = 1, intercept = 0, size = 0.1, color = "#737373") +
geom_errorbar(aes(ymax = mean_cum + SE_cum , ymin = mean_cum - SE_cum), width = 0) +
geom_point(color = "#045a8d", size = 0.5) +
theme_ctokita() +
facet_wrap(~n)
gg_cumsum
View(cumulative_dist)
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
library(viridis)
library(ggridges)
p <- 1 #prob of interact
run <- "SigmaNaN-Epsilon0.1-Beta1.1"
####################
# Load and process data
####################
# Load Thresholds
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", run, "/"), full.names = TRUE)
# Seed internal thresholds
threshMat <- as.data.frame(matrix(rep(0, n *m), ncol = m))
n = 10
m =2
# Seed internal thresholds
threshMat <- as.data.frame(matrix(rep(0, n *m), ncol = m))
threshMat
colnames(thresh_mat) <- paste0("Thresh", 1:length(threshold_means))
rownames(thresh_mat) <- paste0("v-", 1:n)
# Seed internal thresholds
threshMat <- as.data.frame(matrix(rep(0, n *m), ncol = m))
colnames(threshMat) <- paste0("Thresh", 1:length(threshold_means))
rownames(threshMat) <- paste0("v-", 1:n)
colnames(threshMat) <- paste0("Thresh", 1:m)
rownames(threshMat) <- paste0("v-", 1:n)
threshMat
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/2b_Process_ClusterSimData.R', echo=TRUE)
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
# Load data
load("output/Rdata/_ProcessedData/Entropy/SigmaNaN-Epsilon0.1-Beta1.1-0Mean.Rdata")
compiled_data$Model <- "Social"
entropy_data <- compiled_data
rm(compiled_data)
load("output/Rdata/_ProcessedData/Entropy/Sigma0.05-Epsilon0-Beta1.1.Rdata")
compiled_data$Model <- "Fixed"
entropy_data <- rbind(entropy_data, compiled_data)
rm(compiled_data)
# Calculate mean and SE
entropy <- entropy_data %>%
group_by(Model, n) %>%
summarise(Mean = mean(Dind),
SE = sd(Dind) / sqrt(length(Dind)))
gg_solo <- ggplot(data = entropy, aes(x = n, colour = Model, fill = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 1, shape = 21) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold",
values = c("#ffffff", "#4d4d4d")) +
scale_linetype_manual(name = "Threshold",
values = c("dotted", "solid")) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3),
axis.line = element_line(size = 0.3),
aspect.ratio = 1)
gg_solo
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
library(viridis)
library(ggridges)
p <- 1 #prob of interact
run <- "Sigma0-Epsilon0.1-Beta1.1"
####################
# Load and process data
####################
# Load Thresholds
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", run, "/"), full.names = TRUE)
# Loop through group sizes
group_thresh <- lapply(files, function(file) {
# Load
load(file)
# Bind
thresh_data <- as.data.frame(do.call("rbind", listed_data))
# # Summarise
# thresh_sum <- thresh_data %>%
#   mutate(run = paste0(sim, "-", chunk)) %>%
#   group_by(n, run) %>%
#   summarise(Thresh1SD = sd(Thresh1),
#             Thresh2SD = sd(Thresh2),
#             ThreshSD = (sd(Thresh1)  + sd(Thresh2)) / 2) %>%
#   select(n, ThreshSD)
return(thresh_data)
})
# Bind
all_thresh <- do.call('rbind', group_thresh)
View(all_thresh)
test <- all_thresh %>% filter(n == 30)
View(test)
look <- test %>% filter(sim == 1, chunk ==1)
plot(look$Thresh1, look$Thresh2)
look <- test %>% filter(sim == 1, chunk ==5)
plot(look$Thresh1, look$Thresh2)
look <- test %>% filter(chunk == 1)
qplot(data = look, x= Thresh1, y = Thresh2, col = sim) +geom_point()
qplot(data = look, x= Thresh1, y = Thresh2, col = as.factor(sim)) +geom_point()
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
############### Sweep across beta values ###############
####################
# Load data
####################
load("output/Rdata/_ProcessedData/Entropy/Sigma0-Epsilon0.1-Beta1.01.Rdata")
compiled_data$Model <- "Social_Beta1.01"
entropy_data <- compiled_data
rm(compiled_data)
load("output/Rdata/_ProcessedData/Entropy/Sigma0-Epsilon0.1-Beta1.05.Rdata")
compiled_data$Model <- "Social_Beta1.05"
entropy_data <- rbind(entropy_data, compiled_data)
rm(compiled_data)
load("output/Rdata/_ProcessedData/Entropy/Sigma0-Epsilon0.1-Beta1.1.Rdata")
compiled_data$Model <- "Social_Beta1.1"
entropy_data <- rbind(entropy_data, compiled_data)
rm(compiled_data)
load("output/Rdata/_ProcessedData/Entropy/Sigma0-Epsilon0.1-Beta1.2.Rdata")
compiled_data$Model <- "Social_Beta1.2"
entropy_data <- rbind(entropy_data, compiled_data)
rm(compiled_data)
####################
# Summarise data
####################
# Calculate mean and SE
entropy <- entropy_data %>%
group_by(Model, n) %>%
summarise(Mean = mean(Dind),
SE = sd(Dind) / sqrt(length(Dind)))
####################
# Plot
####################
pal <- brewer.pal(5, "Greens")[2:5]
gg_entropy <- ggplot(data = entropy, aes(x = n, colour = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(values = pal,
labels = c("1.2", "1.1"),
name = expression("Interaction bias"(Beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_entropy
ggsave(gg_entropy, file = "output/SpecializationPlots/Sigma0-Epsilon0.1-BetaSweep.png",
height = 45, width = 45, units = "mm", dpi = 800)
rm(list = ls())
####################
# Source necessary scripts/libraries
####################
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
####################
# Plot: Beta sweep - positive social influence
####################
load("output/ParameterSpace/GroupSizeBetaSweep_Sigma0-Epsilon0.1.Rdata")
pal <- brewer_pal("seq", "GnBu")
pal <- pal(9)
for (bias in c("Homophily", "Heterophily")) {
# Filter
if (bias == "Homophily") {
entropy_filt <- entropy %>%
filter(beta >= 1)
} else {
entropy_filt <- entropy %>%
filter(beta <= 1)
}
# Graph
gg_beta <- ggplot(data = entropy_filt, aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
geom_tile() +
theme_bw() +
scale_x_continuous(breaks = seq(0, 100, 20),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(0.75, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste( "Interaction bias (", italic(beta), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 1)
gg_beta
# Save
file_png <- paste0("output/ParameterSpace/Plots/BetaSweep_Positive", bias,  ".png")
file_svg <- paste0("output/ParameterSpace/Plots/svg/BetaSweep_Positive", bias,  ".svg")
ggsave(gg_beta, file = file_png, height = 45, width = 45, units = "mm", dpi = 400)
ggsave(gg_beta, file = file_svg, height = 45, width = 45, units = "mm")
}
####################
# Only beta = 1.1
####################
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
# Load data
load("output/Rdata/_ProcessedData/Entropy/Sigma0-Epsilon0.1-Beta1.1.Rdata")
compiled_data$Model <- "Social"
entropy_data <- compiled_data
rm(compiled_data)
load("output/Rdata/_ProcessedData/Entropy/Sigma0.05-Epsilon0-Beta1.1.Rdata")
compiled_data$Model <- "Fixed"
entropy_data <- rbind(entropy_data, compiled_data)
rm(compiled_data)
# Calculate mean and SE
entropy <- entropy_data %>%
group_by(Model, n) %>%
summarise(Mean = mean(Dind),
SE = sd(Dind) / sqrt(length(Dind)))
gg_solo <- ggplot(data = entropy, aes(x = n, colour = Model, fill = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 1, shape = 21) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold",
values = c("#ffffff", "#4d4d4d")) +
scale_linetype_manual(name = "Threshold",
values = c("dotted", "solid")) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3),
axis.line = element_line(size = 0.3),
aspect.ratio = 1)
gg_solo
ggsave(gg_solo, filename = "output/SpecializationPlots/Beta1.1withfixed.png", width = 60.5, height = 60.5, units = "mm", dpi = 400)
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
# Load data
load("output/Rdata/_ProcessedData/Entropy/Sigma0-Epsilon0.1-Beta1.1.Rdata")
compiled_data$Model <- "Social"
entropy_data <- compiled_data
rm(compiled_data)
load("output/Rdata/_ProcessedData/Entropy/Sigma0.05-Epsilon0-Beta1.1.Rdata")
compiled_data$Model <- "Fixed"
entropy_data <- rbind(entropy_data, compiled_data)
rm(compiled_data)
# Calculate mean and SE
entropy <- entropy_data %>%
group_by(Model, n) %>%
summarise(Mean = mean(Dind),
SE = sd(Dind) / sqrt(length(Dind)))
# Plot
gg_solo <- ggplot(data = entropy, aes(x = n, colour = Model, fill = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 1, shape = 21) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold",
values = c("#ffffff", "#4d4d4d")) +
scale_linetype_manual(name = "Threshold",
values = c("dotted", "solid")) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3),
axis.line = element_line(size = 0.3),
aspect.ratio = 1)
gg_solo
ggsave(gg_solo, filename = "output/SpecializationPlots/Beta1.1_withfixed.svg", width = 60.5, height = 60.5, units = "mm")
ggsave(gg_solo, filename = "output/SpecializationPlots/Beta1.1withfixed.png", width = 60.5, height = 60.5, units = "mm", dpi = 400)
################################################################################
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
p <- 1 #prob of interact
run <- "Sigma0-Epsilon0.1-Beta1.1"
################################################################################
#
# Analyzing average social networks of simulations
#
################################################################################
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
p <- 1 #prob of interact
run <- "Sigma0-Epsilon0.1-Beta1.1"
####################
# Load and process data
####################
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Graphs/", run, "/"), full.names = TRUE)
soc_networks <- list()
for (i in 1:length(files)) {
load(files[i])
soc_networks[[i]] <- listed_data
}
# Load threshold matrices
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", run, "/"), full.names = TRUE)
thresh_data <- list()
for (i in 1:length(files)) {
load(files[i])
thresh_data[[i]] <- listed_data
}
####################
# Graph relative interactrion rates
####################
interaction_graphs <- lapply(1:length(soc_networks), function(i) {
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
# For each each compute interaction matrix
# Get graph and make adjacency matrix
size_graph <- lapply(1:length(graphs), function(j) {
# Format: set diagonal, rescale, and make adj matrix
this_graph <- graphs[[j]]
diag(this_graph) <- NA
dimensions <- dim(this_graph)
labs <- colnames(this_graph)
this_graph <- as.vector(this_graph)
not_chosen <- 1 - (( 1 / (dimensions[1] - 1)) * p)
expected_random <-  1 - not_chosen^2
this_graph <- (this_graph - expected_random) / expected_random #relative to expected by random (i.e., 1 - chance of not being chosen^2)
this_graph <- matrix(data = this_graph, nrow = dimensions[1], ncol = dimensions[2])
colnames(this_graph) <- labs
rownames(this_graph) <- labs
# Calculate thresh bias
thresh <- as.data.frame(thresh_data[[i]][j])
thresh$ThreshBias <- thresh$Thresh1 - thresh$Thresh2
bias <- order(thresh$ThreshBias)
this_graph <- this_graph[bias, bias]
colnames(this_graph) <- paste0("i-", 1:dimensions[1])
rownames(this_graph) <- paste0("i-", 1:dimensions[1])
# return
return(this_graph)
})
# Avearge across all to make 'typical' adjacency matrix
avg_g <- Reduce("+", size_graph) / length(size_graph)
# Create graph object
g <- graph_from_adjacency_matrix(avg_g, mode = c("directed"), weighted = TRUE, diag = TRUE)
# Get node and edge list
node_list <- get.data.frame(g, what = "vertices")
edge_list <- get.data.frame(g, what = "edges")
# Create dataframe for plotting
plot_data <- edge_list %>% mutate(
to = factor(to, levels = node_list$name),
from = factor(from, levels = node_list$name))
# Get info for plot
groupsize <- ncol(avg_g)
if (groupsize < 20) {
breaks <- c(1, seq(5, length(unique(plot_data$to)), 5))
} else if(groupsize < 35) {
breaks <- c(1, seq(10, length(unique(plot_data$to)), 15))
} else {
breaks <- c(1, seq(20, length(unique(plot_data$to)), 20))
}
# Color palette
# pal <- c('#525252','#5b5b5b','#646464','#6e6e6e','#787878','#818181','#8b8b8b',
#          '#959595','#a0a0a0','#a9a9a9','#b4b4b4','#bfbfbf','#c8c8c8','#d4d4d4',
#          '#dedede','#e9e9e9','#f4f4f4','#ffffff','#edf5f9','#dee9f2','#d3ddec',
#          '#c7d1e5','#bfc4de','#b7b7d7','#b0aad0','#a99ec8','#a391c1','#9e83b9',
#          '#9a76b1','#9569a9','#915aa1','#8c4c98','#893c8f','#852986','#810f7c')
pal <- c('#525252', '#737373', '#969696', '#bdbdbd', '#d9d9d9',
'#ffffff',
'#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3')
# Plot
gg_avg_adj <- ggplot(plot_data, aes(x = from, y = to, fill = weight, color = weight)) +
geom_tile() +
theme_bw() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE, expand = c(0, 0),
position = "top",
breaks = levels(plot_data$to)[breaks],
labels = rep("", length(levels(plot_data$to)[breaks]))) +
scale_y_discrete(drop = FALSE, expand = c(0, 0),
limits = rev(levels(plot_data$to)),
breaks = levels(plot_data$to)[breaks],
labels = rep("", length(levels(plot_data$to)[breaks]))) +
scale_fill_gradientn(name = "Relative\ninteraction\nfrequency",
colours = pal,
na.value = "white",
limit = c(-0.05, 0.05),
oob = squish) +
scale_color_gradientn(name = "Relative\ninteraction\nfrequency",
colours =  pal,
na.value = "white",
limit = c(-0.05, 0.05),
oob = squish) +
xlab("Individual") +
ylab("Individual") +
theme(aspect.ratio = 1,
# Hide the legend (optional)
legend.key.width = unit(3, "mm"),
legend.key.height = unit(6, "mm"),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
panel.border = element_rect(size = 0.3, fill = NA, colour = "black"),
plot.title = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
# # Minimal settings
# axis.ticks = element_blank(),
# Detailed Settings
axis.ticks = element_line(size = 0.3, colour = "black"),
legend.position = "none") +
ggtitle(paste0("Group Size = ", groupsize))
# return graph
return(gg_avg_adj)
# return(avg_g)
})
# save specific plot (only for fully detailed plot)
gg_inter <- interaction_graphs[80/5]
gg_inter
# Save (only for minimal plots)
plots <- seq(4, 7, 1)
for (plot in plots) {
gg_inter <- interaction_graphs[[plot]]
ggsave(gg_inter,
filename = paste0("output/Networks/RawPlots/", run, "_n", plot*5 ,".svg"),
width = 20,
height = 20,
units = "mm")
}
# save specific plot (only for fully detailed plot)
gg_inter <- interaction_graphs[80/5]
gg_inter
ggsave("output/Networks/RawPlots/GroupSize80.svg", width = 38, height = 38, units = "mm")
