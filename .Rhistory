labels = c("-0.6", rep("", length(seq(-0.6, 0, 0.1))-2), "0.0", rep("", length(seq(-0.6, 0, 0.1))-2), "0.6")) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Interaction Bias (", italic(beta), ")"))) +
ylab(expression(paste( "Social influence (", italic(epsilon), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 1) +
geom_vline(xintercept = 1, size = 0.3, linetype = "dotted") +
geom_vline(xintercept = 1.032258, size = 0.3) + #beta star
geom_hline(yintercept = 0, size = 0.3, linetype = "dotted")
# Plot
gg_betaeps_all <- ggplot(data = entropy, aes(x = beta, y = epsilon, fill = Dind_mean, colour = Dind_mean)) +
geom_tile() +
theme_bw() +
scale_x_continuous(breaks = seq(0.75, 1.25, 0.05),
expand = c(0,0),
labels = c("0.75", rep("", length(seq(0.75, 1, 0.05))-2), "1.00",rep("", length(seq(0.75, 1, 0.05))-2), "1.25")) +
scale_y_continuous(breaks = seq(-0.6, 0.6, 0.1),
expand = c(0,0),
labels = c("-0.6", rep("", length(seq(-0.6, 0, 0.1))-2), "0.0", rep("", length(seq(-0.6, 0, 0.1))-2), "0.6")) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Interaction Bias (", italic(beta), ")"))) +
ylab(expression(paste( "Social influence (", italic(epsilon), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 1) +
geom_vline(xintercept = 1, size = 0.3, linetype = "dotted") +
geom_vline(xintercept = 1.032258, size = 0.3) + #beta star
geom_hline(yintercept = 0, size = 0.3, linetype = "dotted")
gg_betaeps_all
# ggsave(gg_betaeps_all, file = "output/ParameterSpace/Plots/BetaEpsSweep_n80_allcombos.png", height = 45, width = 45, units = "mm", dpi = 400)
ggsave(gg_betaeps_all, file = "output/ParameterSpace/Plots/svg/BetaEpsSweep_n80_allcombos.svg", height = 75, width = 75, units = "mm")
rm(list = ls())
####################
# Source necessary scripts/libraries
####################
source("scripts/util/__Util__MASTER.R")
library(parallel)
library(snowfall)
####################
# Set global variables
####################
# Initial paramters: Free to change
# Base parameters
n              <- 80 #group size
m              <- 2 #number of tasks
gens           <- 500000 #number of generations to run simulation
reps           <- 100 #number of replications per simulation (for ensemble)
chunk_size     <- 5 #number of simulations sent to single core
# Threshold Parameters
ThreshM        <- rep(50, m) #population threshold means
ThreshSD       <- ThreshM * 0 #population threshold standard deviations
InitialStim    <- rep(0, m) #intital vector of stimuli
deltas         <- rep(0.8, m) #vector of stimuli increase rates
alpha          <- m #efficiency of task performance
quitP          <- 0.2 #probability of quitting task once active
# Social Network Parameters
p              <- 1 #baseline probablity of initiating an interaction per time step
epsilons       <- seq(0, 0.6, 0.025) #relative weighting of social interactions for adjusting thresholds
beta           <- 1.1 #probability of interacting with individual in same state relative to others
####################
# Prep for Parallelization
####################
# Create directory for depositing data
storage_path <- "/scratch/gpfs/ctokita/"
dir_name <- paste0("n", n,  "-Sigma", (ThreshSD/ThreshM)[1], "-Beta", beta, "_EpsSweep-NoThreshLimit-LongRun") #CHANGE THRESH LIMIT, RUN TIME
full_path <- paste0(storage_path, dir_name)
dir.create(full_path)
sub_dirs <- c("TaskDist", "Entropy", "TaskTally", "Stim",
"Thresh", "Thresh1Time", "Thresh2Time", "Graphs")
for (sub_dir in sub_dirs) {
dir.create(paste0(full_path, "/", sub_dir), showWarnings = FALSE)
}
storage_path <- "output/Rdata/"
dir_name <- paste0("n", n,  "-Sigma", (ThreshSD/ThreshM)[1], "-Beta", beta, "_EpsSweep-NoThreshLimit-LongRun") #CHANGE THRESH LIMIT, RUN TIME
full_path <- paste0(storage_path, dir_name)
dir.create(full_path)
sub_dirs <- c("TaskDist", "Entropy", "TaskTally", "Stim",
"Thresh", "Thresh1Time", "Thresh2Time", "Graphs")
for (sub_dir in sub_dirs) {
dir.create(paste0(full_path, "/", sub_dir), showWarnings = FALSE)
}
# Break up parameter replications into smaller batches\
chunk_run  <- 1:(reps / chunk_size)
run_in_parallel <- expand.grid(epsilon = round(epsilons, digits = 4), run = chunk_run) #rounding to make sure numbers are what they appear
run_in_parallel <- run_in_parallel %>%
arrange(epsilon)
# Read files already simulated and filter out of needed parameters
already_ran <- list.files(path = paste0(full_path, "/Entropy/"))
ran_files <- lapply(already_ran, function(f) {
epsilon_val <- as.numeric(gsub("([\\.0-9]+)-[0-9]+\\.Rdata", "\\1", x = f, perl = TRUE))
chunk_num <- as.numeric(gsub("[\\.0-9]+-([0-9]+)\\.Rdata", "\\1", x = f, perl = TRUE))
to_return <- data.frame(epsilon = epsilon_val, run = chunk_num)
return(to_return)
})
ran_files <- do.call('rbind', ran_files)
run_in_parallel <- run_in_parallel %>%
anti_join(ran_files)
!is.null(ran_riles)
!is.null(ran_files)
####################
# Analuyze data
####################
# Load
load('output/ThresholdTime/Examples/n80-eps0.1-beta1.1.Rdata')
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
library(viridis)
library(rje)
p <- 1 #prob of interact
run <- "Sigma0-Epsilon0-Beta1.1"
####################
# Load and process data
####################
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh1Time/", run, "/"), full.names = TRUE)
run <- "Sigma0-Epsilon0-Beta1.1"
####################
# Load and process data
####################
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh1Time/", run, "/"), full.names = TRUE)
run <- "Sigma0-Epsilon0-Beta1.1"
run <- "Sigma0.0-Epsilon0-Beta1.1"
####################
# Load and process data
####################
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh1Time/", run, "/"), full.names = TRUE)
run <- "Sigma0-Epsilon0.1-Beta1.1"
####################
# Load and process data
####################
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh1Time/", run, "/"), full.names = TRUE)
files
load("output/Rdata/_ProcessedData/Thresh1Time/Sigma0-Epsilon0.1-Beta1.1/080-01.Rdata")
rm(list = ls())
####################
# Source necessary scripts/libraries
####################
source("scripts/util/__Util__MASTER.R")
####################
# Set global variables
####################
# Initial paramters: Free to change
# Base parameters
Ns             <- c(80) #vector of number of individuals to simulate
m              <- 2 #number of tasks
gens           <- 50000 #number of generations to run simulation
reps           <- 1 #number of replications per simulation (for ensemble)
# Threshold Parameters
ThreshM        <- rep(50, m) #population threshold means
ThreshSD       <- ThreshM * 0 #population threshold standard deviations
InitialStim    <- rep(0, m) #intital vector of stimuli
deltas         <- rep(0.8, m) #vector of stimuli increase rates
alpha          <- m #efficiency of task performance
quitP          <- 0.2 #probability of quitting task once active
thresh_max     <- 100
# Social Network Parameters
p              <- 1 #baseline probablity of initiating an interaction per time step
epsilon        <- 0.1 #relative weighting of social interactions for adjusting thresholds
beta           <- 1.1 #probability of interacting with individual in same state relative to others
####################
# Run ensemble simulation
####################
# Prep meta-lists for collection of group size simulations
groups_taskDist    <- list()
groups_taskTally   <- list()
groups_stim        <- list()
groups_thresh      <- list()
groups_entropy     <- list()
groups_thresh1Time <- list()
groups_thresh2Time <- list()
groups_graphs      <- list()
# Loop through group sizes
for (i in 1:length(Ns)) {
# Set group size
n <- Ns[i]
# Prep lists for collection of simulation outputs from this group size
ens_taskDist    <- list()
ens_taskTally   <- list()
ens_entropy     <- list()
ens_stim        <- list()
ens_thresh      <- list()
ens_thresh1Time <- list()
ens_thresh2Time <- list()
ens_graphs      <- list()
# Run Simulations
for (sim in 1:reps) {
####################
# Seed structures and intial matrices
####################
# Set initial probability matrix (P_g)
P_g <- matrix(data = rep(0, n * m), ncol = m)
# Seed task (external) stimuli
stimMat <- seed_stimuls(intitial_stim = InitialStim,
gens = gens)
# Seed internal thresholds
threshMat <- seed_thresholds(n = n,
m = m,
threshold_means = ThreshM,
threshold_sds = ThreshSD)
# Start task performance
X_g <- matrix(data = rep(0, length(P_g)), ncol = ncol(P_g))
# Create cumulative task performance matrix
X_tot <- X_g
# Create cumulative adjacency matrix
g_tot <-  matrix(data = rep(0, n * n), ncol = n)
colnames(g_tot) <- paste0("v-", 1:n)
rownames(g_tot) <- paste0("v-", 1:n)
# Prep lists for data collection within simulation
taskTally <- list()
thresh1time <- list()
thresh2time <- list()
thresh1time[[1]] <- threshMat[ ,1]
thresh2time[[1]] <- threshMat[ ,2]
####################
# Simulate individual run
####################
# Run simulation
for (t in 1:gens) {
# Current timestep is actually t+1 in this formulation, because first row is timestep 0
# Update stimuli
stimMat <- update_stim(stim_matrix = stimMat,
deltas = deltas,
alpha = alpha,
state_matrix = X_g,
time_step = t)
# Calculate task demand based on global stimuli
P_g <- calc_determ_thresh(time_step        = t + 1, # first row is generation 0
threshold_matrix = threshMat,
stimulus_matrix  = stimMat)
# Update task performance
X_g <- update_task_performance(task_probs   = P_g,
state_matrix = X_g,
quit_prob    = quitP)
# Update social network (previously this was before probability/task update)
g_adj <- temporalNetwork(X_sub_g = X_g,
prob_interact = p,
bias = beta)
g_tot <- g_tot + g_adj
# Adjust thresholds
threshMat <- adjust_thresholds_social_capped(social_network = g_adj,
threshold_matrix = threshMat,
state_matrix = X_g,
epsilon = epsilon,
threshold_max = thresh_max)
# Capture threshold values
thresh1time[[t + 1]] <- threshMat[,1]
thresh2time[[t + 1]] <- threshMat[,2]
# Update total task performance profile
X_tot <- X_tot + X_g
# Capture current task performance tally
tally <- matrix(c(t, colSums(X_g)), ncol = ncol(X_g) + 1)
colnames(tally) <- c("t", colnames(X_g))
taskTally[[t]] <- tally
}
####################
# Post run calculations
####################
# Bind together task tally
col_names <- colnames(taskTally[[1]])
taskTally <- matrix(unlist(taskTally),
ncol = length(taskTally[[1]]),
byrow = TRUE,
dimnames = list(c(NULL), c(col_names)))
# Calculate Entropy
entropy <- mutualEntropy(TotalStateMat = X_tot)
# Calculate total task distribution
totalTaskDist <- X_tot / gens
# Create tasktally table
stimMat <- cbind(stimMat, 0:(nrow(stimMat) - 1))
colnames(stimMat)[ncol(stimMat)] <- "t"
# Add total task distributions, entropy values, and graphs to lists
ens_taskDist[[sim]]    <- totalTaskDist
ens_entropy[[sim]]     <- entropy
ens_taskTally[[sim]]   <- taskTally
ens_stim[[sim]]        <- stimMat
ens_thresh[[sim]]      <- threshMat
ens_thresh1Time[[sim]] <- thresh1time
ens_thresh2Time[[sim]] <- thresh2time
ens_graphs[[sim]]      <- g_tot / gens
}
# Add to list of lists
groups_taskDist[[i]]    <- ens_taskDist
groups_taskTally[[i]]   <- ens_taskTally
groups_stim[[i]]        <- ens_stim
groups_thresh[[i]]      <- ens_thresh
groups_entropy[[i]]     <- ens_entropy
groups_thresh1Time[[i]] <- ens_thresh1Time
groups_thresh2Time[[i]] <- ens_thresh2Time
groups_graphs[[i]]      <- ens_graphs
}
thresh_time1 <- do.call('rbind', thresh1time)
thresh_time1 <- as.data.frame(thresh_time1)
thresh_time1 <- thresh_time1 %>%
mutate(t = 0:(nrow(.)-1)) %>%
gather(., Id, Threshold, -t)
thresh_time2 <- do.call('rbind', thresh2time)
thresh_time2 <- as.data.frame(thresh_time2)
thresh_time2 <- thresh_time2 %>%
mutate(t = 0:(nrow(.)-1)) %>%
gather(., Id, Threshold, -t)
#Save
save(thresh_time1, thresh_time2, file = paste0("output/ThresholdTime/Examples/n", n, "-eps", epsilon, "-beta", beta, ".Rdata"))
####################
# Analuyze data
####################
# Load
load('output/ThresholdTime/Examples/n80-eps0.1-beta1.1.Rdata')
# Plot time series
gg_threshtime <- ggplot(thresh_time1, aes(x = t, y = Threshold, group = Id)) +
geom_line(size = 0.1, alpha = 0.1, colour = "#1f78b4") +
scale_x_continuous(name = expression(paste("Time step (", italic(t), ")")),
breaks = c(1, seq(10000, 50000, 10000)),
labels = c("0", "", "", "", "", "50,000"),
expand = c(0, 0)) +
scale_y_continuous(name = expression(paste("Task 1 threshold (", italic(theta[i1,t]), ")")),
limits = c(0, 100),
breaks = seq(0, 100, 50)) +
theme_ctokita() +
theme(axis.title = element_blank(),
axis.text.x = element_text(hjust = 0.7))
gg_threshtime
ggsave(gg_threshtime, filename = paste0("output/ThresholdTime/Examples/TimeSeries_n", n, "-beta", beta, "-epsilon", epsilon, ".png"),
width = 30, height = 23, units = "mm", dpi = 400)
ggsave(gg_threshtime, filename = paste0("output/ThresholdTime/Examples/TimeSeries_n", n, "-beta", beta, "-epsilon", epsilon, ".png"),
width = 28, height = 20, units = "mm", dpi = 400)
# Plot histogram of task performance
thresh_data <- as.data.frame(X_tot)
# Plot histogram of task performance
task_data <- as.data.frame(X_tot)
View(task_data)
# Plot histogram of task performance
task_data <- as.data.frame(X_tot) / gens
View(task_data)
names(task_data)
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(binwidth = 5) +
theme_ctokita() +
coord_flip()
gg_threshdist
gg_taskdist
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(binwidth = 5) +
theme_ctokita()
gg_taskdist
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram() +
theme_ctokita()
gg_taskdist
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bin = 20) +
theme_ctokita()
gg_taskdist
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 20) +
theme_ctokita()
gg_taskdist
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 50) +
theme_ctokita()
gg_taskdist
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 50, width = 1) +
theme_ctokita()
gg_taskdist
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 50, size = 1) +
theme_ctokita()
gg_taskdist
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 50, size = 0.1) +
theme_ctokita()
gg_taskdist
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 50, size = 0.1, color = "white") +
theme_ctokita()
gg_taskdist
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 50, size = 0.5, color = "white") +
theme_ctokita()
gg_taskdist
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 50, size = 0.5, color = "white") +
xlab(expression(paste("Task 1 freq. (", x[i], ")")))
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 50, size = 0.5, color = "white") +
xlab(expression(paste("Task 1 freq. (", x[i], ")"))) +
theme_ctokita()
gg_taskdist
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 50, size = 0.5, color = "white") +
theme_ctokita() +
theme(axis.title = element_blank(),
axis.text.x = element_text(hjust = 0.7))
gg_taskdist
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 50, size = 0.5, color = "white" fill = "#1f78b4") +
theme_ctokita() +
theme(axis.title = element_blank(),
axis.text.x = element_text(hjust = 0.7))
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 50, size = 0.5, color = "white", fill = "#1f78b4") +
theme_ctokita() +
theme(axis.title = element_blank(),
axis.text.x = element_text(hjust = 0.7))
gg_taskdist
ggsave(gg_threshtime, filename = paste0("output/ThresholdTime/Examples/TaskDist_n", n, "-beta", beta, "-epsilon", epsilon, ".png"),
width = 28, height = 20, units = "mm", dpi = 400)
ggsave(gg_taskdist, filename = paste0("output/ThresholdTime/Examples/TaskDist_n", n, "-beta", beta, "-epsilon", epsilon, ".png"),
width = 28, height = 20, units = "mm", dpi = 400)
gg_taskdist
ggsave(gg_taskdist, filename = paste0("output/ThresholdTime/Examples/TaskDist_n", n, "-beta", beta, "-epsilon", epsilon, ".png"),
width = 28, height = 20, units = "mm", dpi = 400)
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 50, size = 0.1, color = "white", fill = "#1f78b4") +
theme_ctokita() +
theme(axis.title = element_blank(),
axis.text.x = element_text(hjust = 0.7))
gg_taskdist
ggsave(gg_taskdist, filename = paste0("output/ThresholdTime/Examples/TaskDist_n", n, "-beta", beta, "-epsilon", epsilon, ".png"),
width = 28, height = 20, units = "mm", dpi = 400)
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 25, size = 0.1, color = "white", fill = "#1f78b4") +
theme_ctokita() +
theme(axis.title = element_blank(),
axis.text.x = element_text(hjust = 0.7))
gg_taskdist
ggsave(gg_taskdist, filename = paste0("output/ThresholdTime/Examples/TaskDist_n", n, "-beta", beta, "-epsilon", epsilon, ".png"),
width = 28, height = 20, units = "mm", dpi = 400)
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 25, size = 0.1, color = "white", fill = "#1f78b4") +
theme_ctokita() +
scale_y_continuous(breaks = seq(0, 40, 20)) +
theme(axis.title = element_blank(),
axis.text.x = element_text(hjust = 0.7))
gg_taskdist
ggsave(gg_taskdist, filename = paste0("output/ThresholdTime/Examples/TaskDist_n", n, "-beta", beta, "-epsilon", epsilon, ".png"),
width = 28, height = 20, units = "mm", dpi = 400)
ggsave(gg_taskdist, filename = paste0("output/ThresholdTime/Examples/TaskDist_n", n, "-beta", beta, "-epsilon", epsilon, ".svg"),
width = 28, height = 20, units = "mm", dpi = 400)
ggsave(gg_taskdist, filename = paste0("output/ThresholdTime/Examples/TaskDist_n", n, "-beta", beta, "-epsilon", epsilon, ".svg"),
width = 31, height = 20, units = "mm", dpi = 400)
ggsave(gg_taskdist, filename = paste0("output/ThresholdTime/Examples/TaskDist_n", n, "-beta", beta, "-epsilon", epsilon, ".svg"),
width = 31, height = 21, units = "mm", dpi = 400)
ggsave(gg_threshtime, filename = paste0("output/ThresholdTime/Examples/TimeSeries_n", n, "-beta", beta, "-epsilon", epsilon, ".png"),
width = 28, height = 21, units = "mm", dpi = 400)
ggsave(gg_threshtime, filename = paste0("output/ThresholdTime/Examples/TimeSeries_n", n, "-beta", beta, "-epsilon", epsilon, ".png"),
width = 31, height = 21, units = "mm", dpi = 400)
ggsave(gg_taskdist, filename = paste0("output/ThresholdTime/Examples/TaskDist_n", n, "-beta", beta, "-epsilon", epsilon, ".svg"),
width = 30, height = 18, units = "mm", dpi = 400)
ggsave(gg_threshtime, filename = paste0("output/ThresholdTime/Examples/TimeSeries_n", n, "-beta", beta, "-epsilon", epsilon, ".png"),
width = 31, height = 18, units = "mm", dpi = 400)
theme_ctokita
ggsave(gg_taskdist, filename = paste0("output/ThresholdTime/Examples/TaskDist_n", n, "-beta", beta, "-epsilon", epsilon, ".svg"),
width = 30, height = 20, units = "mm", dpi = 400)
ggsave(gg_threshtime, filename = paste0("output/ThresholdTime/Examples/TimeSeries_n", n, "-beta", beta, "-epsilon", epsilon, ".png"),
width = 31, height = 20, units = "mm", dpi = 400)
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 25, size = 0.2, color = "white", fill = "#1f78b4") +
theme_ctokita() +
scale_y_continuous(breaks = seq(0, 40, 20)) +
theme(axis.title = element_blank(),
axis.text.x = element_text(hjust = 0.7))
gg_taskdist
ggsave(gg_taskdist, filename = paste0("output/ThresholdTime/Examples/TaskDist_n", n, "-beta", beta, "-epsilon", epsilon, ".svg"),
width = 30, height = 20, units = "mm", dpi = 400)
ggsave(gg_taskdist, filename = paste0("output/ThresholdTime/Examples/TaskDist_n", n, "-beta", beta, "-epsilon", epsilon, ".svg"),
width = 30, height = 19.5, units = "mm", dpi = 400)
ggsave(gg_threshtime, filename = paste0("output/ThresholdTime/Examples/TimeSeries_n", n, "-beta", beta, "-epsilon", epsilon, ".png"),
width = 31, height = 19.5, units = "mm", dpi = 400)
task_data$bias <- task_data$Task2 - task_data$Task1
gg_taskdist <- ggplot(data = task_data, aes(x = bias)) +
geom_histogram(bins = 25, size = 0.2, color = "white", fill = "#1f78b4") +
theme_ctokita() +
scale_y_continuous(breaks = seq(0, 40, 20)) +
theme(axis.title = element_blank(),
axis.text.x = element_text(hjust = 0.7))
gg_taskdist
ggsave(gg_taskdist, filename = paste0("output/ThresholdTime/Examples/TaskDist_n", n, "-beta", beta, "-epsilon", epsilon, ".svg"),
width = 30.5, height = 19.5, units = "mm", dpi = 400)
gg_taskdist <- ggplot(data = task_data, aes(x = Task1)) +
geom_histogram(bins = 25, size = 0.2, color = "white", fill = "#1f78b4") +
theme_ctokita() +
scale_y_continuous(breaks = seq(0, 40, 20)) +
theme(axis.title = element_blank(),
axis.text.x = element_text(hjust = 0.7))
gg_taskdist
ggsave(gg_taskdist, filename = paste0("output/ThresholdTime/Examples/TaskDist_n", n, "-beta", beta, "-epsilon", epsilon, ".svg"),
width = 30.5, height = 19.5, units = "mm", dpi = 400)
