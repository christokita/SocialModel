for (file in 1:length(files)) {
load(files[file])
thresh_data[[file]] <- listed_data
}
# Loop through individual graphs
interaction_info <- lapply(1:length(soc_networks), function(i) {
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
# For each each compute interaction matrix
# Get graph and make adjacency matrix
size_graph <- lapply(1:length(graphs), function(j) {
# Format: set diagonal, rescale, and make adj matrix
this_graph <- graphs[[j]]
diag(this_graph) <- 0
g <- graph_from_adjacency_matrix(this_graph, mode = "undirected", weighted = TRUE)
g_clust <- cluster_fast_greedy(g, weights = E(g)$weight)
# g_membership <- membership(g_clust)
# mod <- modularity(g, membership = g_membership, weights = E(g)$weight)
mod <- modularity(g_clust)
clust_coeff <- transitivity(graph = g, type = "weighted", weights = E(g)$weight)
# return
replicate_row <- data.frame(parameter_value = as.numeric(parameter_value[i]),
Modularity = mod,
ClustCoeff =  mean(clust_coeff, na.rm = TRUE))
return(replicate_row)
})
size_data <- do.call("rbind", size_graph)
})
# Bind and return
interaction_info <- do.call("rbind", interaction_info)
interaction_info$parameter <- run_names[run]
return(interaction_info)
})
# Bind
mod_data <- do.call("rbind", modularity)
mod_data <- mod_data %>%
group_by(parameter, parameter_value) %>%
summarise(Modul_mean = mean(Modularity),
Modul_SD = sd(Modularity),
Modul_SE = sd(Modularity)/length(Modularity))
# Plot
mod_data_beta <- mod_data %>%
filter(parameter == "Beta")
gg_mod_beta <- ggplot(mod_data_beta, aes(x = parameter_value, y = Modul_mean, colour = parameter, fill = parameter)) +
# geom_line(size = 0.4) +
geom_errorbar(aes(ymin = ifelse(Modul_mean - Modul_SD < 0, 0, Modul_mean - Modul_SD), ymax = Modul_mean + Modul_SD),
width = 0,
size = 0.3) +
geom_point(size = 0.8, shape = 21) +
scale_color_manual(name = "Threshold",
# values = c("#878787", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_fill_manual(name = "Threshold",
# values = c("#ffffff", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_x_continuous(breaks = seq(1, 1.5, 0.05)) +
scale_y_continuous(breaks = seq(0, 0.03, 0.01), limits = c(-0.0002, 0.031)) +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab("Modularity") +
theme_ctokita() +
theme(legend.position = "none",
legend.key.height = unit(0.5, "line"))
gg_mod_beta
mod_data_eps <- mod_data %>%
filter(parameter == "Epsilon")
gg_mod_eps <- ggplot(mod_data_eps, aes(x = parameter_value, y = Modul_mean, colour = parameter, fill = parameter)) +
# geom_line(size = 0.4) +
geom_errorbar(aes(ymin = ifelse(Modul_mean - Modul_SD < 0, 0, Modul_mean - Modul_SD), ymax = Modul_mean + Modul_SD),
width = 0,
size = 0.3) +
geom_point(size = 0.8, shape = 21) +
scale_color_manual(name = "Threshold",
# values = c("#878787", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_fill_manual(name = "Threshold",
# values = c("#ffffff", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_x_continuous(breaks = seq(0, 0.6, 0.1)) +
scale_y_continuous(breaks = seq(0, 0.03, 0.01), limits = c(-0.0002, 0.031)) +
xlab(expression(paste("Social influence (", italic(epsilon), ")"))) +
ylab("Modularity") +
theme_ctokita() +
theme(legend.position = "none",
legend.key.height = unit(0.5, "line"))
gg_mod_eps
mod_data_gs <- mod_data %>%
filter(parameter == "GroupSize")
gg_mod_gs <- ggplot(mod_data_gs, aes(x = parameter_value, y = Modul_mean, colour = parameter, fill = parameter)) +
# geom_line(size = 0.4) +
geom_errorbar(aes(ymin = ifelse(Modul_mean - Modul_SD < 0, 0, Modul_mean - Modul_SD), ymax = Modul_mean + Modul_SD),
width = 0,
size = 0.3) +
geom_point(size = 0.8, shape = 21) +
scale_color_manual(name = "Threshold",
# values = c("#878787", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_fill_manual(name = "Threshold",
# values = c("#ffffff", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_y_continuous(breaks = seq(0, 0.03, 0.01), limits = c(-0.0002, 0.031)) +
xlab(expression(paste("Group size (", italic(n), ")"))) +
ylab("Modularity") +
theme_ctokita() +
theme(legend.position = "none",
legend.key.height = unit(0.5, "line"))
gg_mod_gs
gg_mod_gs <- ggplot(mod_data_gs, aes(x = parameter_value, y = Modul_mean, colour = parameter, fill = parameter)) +
# geom_line(size = 0.4) +
geom_errorbar(aes(ymin = ifelse(Modul_mean - Modul_SD < 0, 0, Modul_mean - Modul_SD), ymax = Modul_mean + Modul_SD),
width = 0,
size = 0.3) +
geom_point(size = 0.8, shape = 21) +
scale_color_manual(name = "Threshold",
# values = c("#878787", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_fill_manual(name = "Threshold",
# values = c("#ffffff", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_y_continuous(breaks = seq(0, 0.015, 0.005), limits = c(-0.0002, 0.031)) +
xlab(expression(paste("Group size (", italic(n), ")"))) +
ylab("Modularity") +
theme_ctokita() +
theme(legend.position = "none",
legend.key.height = unit(0.5, "line"))
gg_mod_gs
gg_mod_gs <- ggplot(mod_data_gs, aes(x = parameter_value, y = Modul_mean, colour = parameter, fill = parameter)) +
# geom_line(size = 0.4) +
geom_errorbar(aes(ymin = ifelse(Modul_mean - Modul_SD < 0, 0, Modul_mean - Modul_SD), ymax = Modul_mean + Modul_SD),
width = 0,
size = 0.3) +
geom_point(size = 0.8, shape = 21) +
scale_color_manual(name = "Threshold",
# values = c("#878787", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_fill_manual(name = "Threshold",
# values = c("#ffffff", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_y_continuous(breaks = seq(0, 0.015, 0.005), limits = c(-0.0002, 0.016)) +
xlab(expression(paste("Group size (", italic(n), ")"))) +
ylab("Modularity") +
theme_ctokita() +
theme(legend.position = "none",
legend.key.height = unit(0.5, "line"))
gg_mod_gs
gg_mod_gs <- ggplot(mod_data_gs, aes(x = parameter_value, y = Modul_mean, colour = parameter, fill = parameter)) +
# geom_line(size = 0.4) +
geom_errorbar(aes(ymin = ifelse(Modul_mean - Modul_SD < 0, 0, Modul_mean - Modul_SD), ymax = Modul_mean + Modul_SD),
width = 0,
size = 0.3) +
geom_point(size = 0.8, shape = 21) +
scale_color_manual(name = "Threshold",
# values = c("#878787", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_fill_manual(name = "Threshold",
# values = c("#ffffff", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_y_continuous(breaks = seq(0, 0.012, 0.004), limits = c(-0.0002, 0.016)) +
xlab(expression(paste("Group size (", italic(n), ")"))) +
ylab("Modularity") +
theme_ctokita() +
theme(legend.position = "none",
legend.key.height = unit(0.5, "line"))
gg_mod_gs
gg_mod_gs <- ggplot(mod_data_gs, aes(x = parameter_value, y = Modul_mean, colour = parameter, fill = parameter)) +
# geom_line(size = 0.4) +
geom_errorbar(aes(ymin = ifelse(Modul_mean - Modul_SD < 0, 0, Modul_mean - Modul_SD), ymax = Modul_mean + Modul_SD),
width = 0,
size = 0.3) +
geom_point(size = 0.8, shape = 21) +
scale_color_manual(name = "Threshold",
# values = c("#878787", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_fill_manual(name = "Threshold",
# values = c("#ffffff", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_y_continuous(breaks = seq(0, 0.012, 0.004), limits = c(-0.0002, 0.012)) +
xlab(expression(paste("Group size (", italic(n), ")"))) +
ylab("Modularity") +
theme_ctokita() +
theme(legend.position = "none",
legend.key.height = unit(0.5, "line"))
gg_mod_gs
gg_net_mod <- grid.arrange(gg_mod_beta, gg_mod_eps, gg_mod_gs, nrow = 1)
# Together
library(gridExtra)
gg_net_mod <- grid.arrange(gg_mod_beta, gg_mod_eps, gg_mod_gs, nrow = 1)
ggsave(gg_net_mod, filename = "Output/Networks/NetworkMetrics/Modularity_parametersweep.svg",
height = 23.1, width = 1.515*95, units = "mm")
gg_mod_gs <- ggplot(mod_data_gs, aes(x = parameter_value, y = Modul_mean, colour = parameter, fill = parameter)) +
# geom_line(size = 0.4) +
geom_errorbar(aes(ymin = ifelse(Modul_mean - Modul_SD < 0, 0, Modul_mean - Modul_SD), ymax = Modul_mean + Modul_SD),
width = 0,
size = 0.3) +
geom_point(size = 0.8, shape = 21) +
scale_color_manual(name = "Threshold",
# values = c("#878787", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_fill_manual(name = "Threshold",
# values = c("#ffffff", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_y_continuous(breaks = seq(0, 0.015, 0.05), limits = c(-0.0002, 0.012)) +
xlab(expression(paste("Group size (", italic(n), ")"))) +
ylab("Modularity") +
theme_ctokita() +
theme(legend.position = "none",
legend.key.height = unit(0.5, "line"))
gg_mod_gs
gg_mod_gs <- ggplot(mod_data_gs, aes(x = parameter_value, y = Modul_mean, colour = parameter, fill = parameter)) +
# geom_line(size = 0.4) +
geom_errorbar(aes(ymin = ifelse(Modul_mean - Modul_SD < 0, 0, Modul_mean - Modul_SD), ymax = Modul_mean + Modul_SD),
width = 0,
size = 0.3) +
geom_point(size = 0.8, shape = 21) +
scale_color_manual(name = "Threshold",
# values = c("#878787", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_fill_manual(name = "Threshold",
# values = c("#ffffff", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_y_continuous(breaks = seq(0, 0.0015, 0.05), limits = c(-0.0002, 0.012)) +
xlab(expression(paste("Group size (", italic(n), ")"))) +
ylab("Modularity") +
theme_ctokita() +
theme(legend.position = "none",
legend.key.height = unit(0.5, "line"))
gg_mod_gs
gg_mod_gs <- ggplot(mod_data_gs, aes(x = parameter_value, y = Modul_mean, colour = parameter, fill = parameter)) +
# geom_line(size = 0.4) +
geom_errorbar(aes(ymin = ifelse(Modul_mean - Modul_SD < 0, 0, Modul_mean - Modul_SD), ymax = Modul_mean + Modul_SD),
width = 0,
size = 0.3) +
geom_point(size = 0.8, shape = 21) +
scale_color_manual(name = "Threshold",
# values = c("#878787", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_fill_manual(name = "Threshold",
# values = c("#ffffff", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_y_continuous(breaks = seq(0, 0.0015, 0.005), limits = c(-0.0002, 0.012)) +
xlab(expression(paste("Group size (", italic(n), ")"))) +
ylab("Modularity") +
theme_ctokita() +
theme(legend.position = "none",
legend.key.height = unit(0.5, "line"))
gg_mod_gs
gg_mod_gs <- ggplot(mod_data_gs, aes(x = parameter_value, y = Modul_mean, colour = parameter, fill = parameter)) +
# geom_line(size = 0.4) +
geom_errorbar(aes(ymin = ifelse(Modul_mean - Modul_SD < 0, 0, Modul_mean - Modul_SD), ymax = Modul_mean + Modul_SD),
width = 0,
size = 0.3) +
geom_point(size = 0.8, shape = 21) +
scale_color_manual(name = "Threshold",
# values = c("#878787", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_fill_manual(name = "Threshold",
# values = c("#ffffff", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_y_continuous(breaks = seq(0, 0.015, 0.005), limits = c(-0.0002, 0.012)) +
xlab(expression(paste("Group size (", italic(n), ")"))) +
ylab("Modularity") +
theme_ctokita() +
theme(legend.position = "none",
legend.key.height = unit(0.5, "line"))
gg_mod_gs
gg_mod_gs <- ggplot(mod_data_gs, aes(x = parameter_value, y = Modul_mean, colour = parameter, fill = parameter)) +
# geom_line(size = 0.4) +
geom_errorbar(aes(ymin = ifelse(Modul_mean - Modul_SD < 0, 0, Modul_mean - Modul_SD), ymax = Modul_mean + Modul_SD),
width = 0,
size = 0.3) +
geom_point(size = 0.8, shape = 21) +
scale_color_manual(name = "Threshold",
# values = c("#878787", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_fill_manual(name = "Threshold",
# values = c("#ffffff", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_y_continuous(breaks = seq(0, 0.015, 0.005), limits = c(-0.0002, 0.011)) +
xlab(expression(paste("Group size (", italic(n), ")"))) +
ylab("Modularity") +
theme_ctokita() +
theme(legend.position = "none",
legend.key.height = unit(0.5, "line"))
gg_mod_gs
gg_net_mod <- grid.arrange(gg_mod_beta, gg_mod_eps, gg_mod_gs, nrow = 1)
ggsave(gg_net_mod, filename = "Output/Networks/NetworkMetrics/Modularity_parametersweep.svg",
height = 23.1, width = 1.515*95, units = "mm")
ggsave(gg_net_mod, filename = "Output/Networks/NetworkMetrics/Modularity_parametersweep.svg",
height = 23.1, width = 1.525*95, units = "mm")
ggsave(gg_net_mod, filename = "Output/Networks/NetworkMetrics/Modularity_parametersweep.svg",
height = 23.1, width = 1.535*95, units = "mm")
ggsave(gg_net_mod, filename = "Output/Networks/NetworkMetrics/Modularity_parametersweep.svg",
height = 23.1, width = 1.54*95, units = "mm")
ggsave(gg_net_mod, filename = "Output/Networks/NetworkMetrics/Modularity_parametersweep.svg",
height = 23.1, width = 1.545*95, units = "mm")
gg_mod_gs <- ggplot(mod_data_gs, aes(x = parameter_value, y = Modul_mean, colour = parameter, fill = parameter)) +
# geom_line(size = 0.4) +
geom_errorbar(aes(ymin = ifelse(Modul_mean - Modul_SD < 0, 0, Modul_mean - Modul_SD), ymax = Modul_mean + Modul_SD),
width = 0,
size = 0.3) +
geom_point(size = 0.8, shape = 21) +
scale_color_manual(name = "Threshold",
# values = c("#878787", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_fill_manual(name = "Threshold",
# values = c("#ffffff", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_y_continuous(breaks = seq(0, 0.02, 0.01), limits = c(-0.0002, 0.031)) +
xlab(expression(paste("Group size (", italic(n), ")"))) +
ylab("Modularity") +
theme_ctokita() +
theme(legend.position = "none",
legend.key.height = unit(0.5, "line"))
gg_mod_gs
gg_mod_gs <- ggplot(mod_data_gs, aes(x = parameter_value, y = Modul_mean, colour = parameter, fill = parameter)) +
# geom_line(size = 0.4) +
geom_errorbar(aes(ymin = ifelse(Modul_mean - Modul_SD < 0, 0, Modul_mean - Modul_SD), ymax = Modul_mean + Modul_SD),
width = 0,
size = 0.3) +
geom_point(size = 0.8, shape = 21) +
scale_color_manual(name = "Threshold",
# values = c("#878787", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_fill_manual(name = "Threshold",
# values = c("#ffffff", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_y_continuous(breaks = seq(0, 0.02, 0.01), limits = c(-0.0002, 0.021)) +
xlab(expression(paste("Group size (", italic(n), ")"))) +
ylab("Modularity") +
theme_ctokita() +
theme(legend.position = "none",
legend.key.height = unit(0.5, "line"))
gg_mod_gs
gg_mod_gs <- ggplot(mod_data_gs, aes(x = parameter_value, y = Modul_mean, colour = parameter, fill = parameter)) +
# geom_line(size = 0.4) +
geom_errorbar(aes(ymin = ifelse(Modul_mean - Modul_SD < 0, 0, Modul_mean - Modul_SD), ymax = Modul_mean + Modul_SD),
width = 0,
size = 0.3) +
geom_point(size = 0.8, shape = 21) +
scale_color_manual(name = "Threshold",
# values = c("#878787", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_fill_manual(name = "Threshold",
# values = c("#ffffff", "#4d4d4d")) +
values = c("#4d4d4d")) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_y_continuous(breaks = seq(0, 0.02, 0.01), limits = c(-0.0002, 0.02)) +
xlab(expression(paste("Group size (", italic(n), ")"))) +
ylab("Modularity") +
theme_ctokita() +
theme(legend.position = "none",
legend.key.height = unit(0.5, "line"))
gg_mod_gs
gg_net_mod <- grid.arrange(gg_mod_beta, gg_mod_eps, gg_mod_gs, nrow = 1)
ggsave(gg_net_mod, filename = "Output/Networks/NetworkMetrics/Modularity_parametersweep.svg",
height = 23.1, width = 1.515*95, units = "mm")
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
############### Sweep across beta values ###############
####################
# Load data
####################
load("output/Rdata/_ProcessedData/Entropy/Sigma0-Epsilon0.1-Beta1.01.Rdata")
compiled_data$Model <- "Social_Beta1.01"
entropy_data <- compiled_data
rm(compiled_data)
len(entropy_data)
length(entropy_data)
entropy_data[1]
entropy_data[1][1:10]
head(entropy_data[1])
entropy_data[1]
####################
# Source necessary scripts/libraries
####################
source("scripts/util/__Util__MASTER.R")
####################
# Set global variables
####################
# Initial paramters: Free to change
# Base parameters
Ns             <- c(5, 10, 20, 30, 50, 70) #vector of number of individuals to simulate
m              <- 3 #number of tasks
gens           <- 1000 #number of generations to run simulation
reps           <- 2 #number of replications per simulation (for ensemble)
# Threshold Parameters
ThreshM        <- rep(50, m) #population threshold means
ThreshSD       <- ThreshM * 0 #population threshold standard deviations
InitialStim    <- rep(0, m) #intital vector of stimuli
deltas         <- rep(0.8, m) #vector of stimuli increase rates
alpha          <- m #efficiency of task performance
quitP          <- 0.2 #probability of quitting task once active
# Social Network Parameters
p              <- 1 #baseline probablity of initiating an interaction per time step
epsilon        <- 0.1 #relative weighting of social interactions for adjusting thresholds
beta           <- 1.1 #probability of interacting with individual in same state relative to others
####################
# Run ensemble simulation
####################
# Prep meta-lists for collection of group size simulations
groups_taskDist    <- list()
groups_stim        <- list()
groups_thresh      <- list()
groups_entropy     <- list()
groups_graphs      <- list()
# Loop through group sizes
for (i in 1:length(Ns)) {
# Set group size
n <- Ns[i]
# Prep lists for collection of simulation outputs from this group size
ens_taskDist    <- list()
ens_entropy     <- list()
ens_stim        <- list()
ens_thresh      <- list()
ens_graphs      <- list()
# Run Simulations
for (sim in 1:reps) {
####################
# Seed structures and intial matrices
####################
# Set initial probability matrix (P_g)
P_g <- matrix(data = rep(0, n * m), ncol = m)
# Seed task (external) stimuli
stimMat <- seed_stimuls(intitial_stim = InitialStim,
gens = gens)
# Seed internal thresholds
threshMat <- seed_thresholds(n = n,
m = m,
threshold_means = ThreshM,
threshold_sds = ThreshSD)
# Start task performance
X_g <- matrix(data = rep(0, length(P_g)), ncol = ncol(P_g))
# Create cumulative task performance matrix
X_tot <- X_g
# Create cumulative adjacency matrix
g_tot <-  matrix(data = rep(0, n * n), ncol = n)
colnames(g_tot) <- paste0("v-", 1:n)
rownames(g_tot) <- paste0("v-", 1:n)
####################
# Simulate individual run
####################
# Run simulation
for (t in 1:gens) {
# Current timestep is actually t+1 in this formulation, because first row is timestep 0
# Update stimuli
stimMat <- update_stim(stim_matrix = stimMat,
deltas = deltas,
alpha = alpha,
state_matrix = X_g,
time_step = t)
# Calculate task demand based on global stimuli
P_g <- calc_determ_thresh(time_step        = t + 1, # first row is generation 0
threshold_matrix = threshMat,
stimulus_matrix  = stimMat)
# Update task performance
X_g <- update_task_performance(task_probs   = P_g,
state_matrix = X_g,
quit_prob    = quitP)
# Update social network (previously this was before probability/task update)
g_adj <- temporalNetwork(X_sub_g = X_g,
prob_interact = p,
bias = beta)
g_tot <- g_tot + g_adj
# Adjust thresholds
threshMat <- adjust_thresholds_social_capped(social_network = g_adj,
threshold_matrix = threshMat,
state_matrix = X_g,
epsilon = epsilon,
threshold_max = 2 * ThreshM[1])
# Update total task performance profile
X_tot <- X_tot + X_g
}
####################
# Post run calculations
####################
# Calculate Entropy
entropy <- mutualEntropy(TotalStateMat = X_tot)
# Calculate total task distribution
totalTaskDist <- X_tot / gens
# Create tasktally table
stimMat <- cbind(stimMat, 0:(nrow(stimMat) - 1))
colnames(stimMat)[ncol(stimMat)] <- "t"
# Add total task distributions, entropy values, and graphs to lists
ens_taskDist[[sim]]    <- totalTaskDist
ens_entropy[[sim]]     <- entropy
ens_stim[[sim]]        <- stimMat
ens_thresh[[sim]]      <- threshMat
ens_graphs[[sim]]      <- g_tot / gens
}
# Add to list of lists
groups_taskDist[[i]]    <- ens_taskDist
groups_stim[[i]]        <- ens_stim
groups_thresh[[i]]      <- ens_thresh
groups_entropy[[i]]     <- ens_entropy
groups_graphs[[i]]      <- ens_graphs
}
ens_entropy
groups_entropy
