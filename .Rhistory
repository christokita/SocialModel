no_cores <- detectCores()
sfInit(parallel = TRUE, cpus = no_cores)
sfExportAll()
sfLibrary(dplyr)
sfLibrary(reshape2)
sfLibrary(igraph)
sfLibrary(ggplot2)
sfLibrary(msm)
sfLibrary(gtools)
sfLibrary(snowfall)
sfLibrary(tidyr)
sfLibrary(stringr)
# sfClusterSetupRNGstream(seed = 100)
sfStop()
k = 1
# Set group size
epsilon <- run_in_parallel[k, 1]
beta    <- run_in_parallel[k, 2]
g <- matrix(data = rep(0, n * m), ncol = m)
# Seed task (external) stimuli
stimMat <- seed_stimuls(intitial_stim = InitialStim,
gens = gens)
# Seed internal thresholds
threshMat <- seed_thresholds(n = n,
m = m,
threshold_means = ThreshM,
threshold_sds = ThreshSD)
# Start task performance
X_g <- matrix(data = rep(0, length(P_g)), ncol = ncol(P_g))
# Create cumulative task performance matrix
X_tot <- X_g
# Create cumulative adjacency matrix
g_tot <-  matrix(data = rep(0, n * n), ncol = n)
colnames(g_tot) <- paste0("v-", 1:n)
rownames(g_tot) <- paste0("v-", 1:n)
####################
P_g <- matrix(data = rep(0, n * m), ncol = m)
# Seed task (external) stimuli
stimMat <- seed_stimuls(intitial_stim = InitialStim,
gens = gens)
# Seed internal thresholds
threshMat <- seed_thresholds(n = n,
m = m,
threshold_means = ThreshM,
threshold_sds = ThreshSD)
# Start task performance
X_g <- matrix(data = rep(0, length(P_g)), ncol = ncol(P_g))
# Create cumulative task performance matrix
X_tot <- X_g
# Create cumulative adjacency matrix
g_tot <-  matrix(data = rep(0, n * n), ncol = n)
colnames(g_tot) <- paste0("v-", 1:n)
rownames(g_tot) <- paste0("v-", 1:n)
####################
# Simulate individual run
####################
# Run simulation
for (t in 1:gens) {
# Current timestep is actually t+1 in this formulation, because first row is timestep 0
# Update stimuli
stimMat <- update_stim(stim_matrix = stimMat,
deltas = deltas,
alpha = alpha,
state_matrix = X_g,
time_step = t)
# Calculate task demand based on global stimuli
P_g <- calc_determ_thresh(time_step        = t + 1, # first row is generation 0
threshold_matrix = threshMat,
stimulus_matrix  = stimMat)
# Update task performance
X_g <- update_task_performance(task_probs   = P_g,
state_matrix = X_g,
quit_prob    = quitP)
# Update social network (previously this was before probability/task update)
g_adj <- temporalNetwork(X_sub_g = X_g,
prob_interact = p,
bias = beta)
g_tot <- g_tot + g_adj
# Adjust thresholds
threshMat <- adjust_thresholds_social_capped(social_network = g_adj,
threshold_matrix = threshMat,
state_matrix = X_g,
epsilon = epsilon,
threshold_max = 2 * ThreshM[1])
# Update total task performance profile
X_tot <- X_tot + X_g
}
####################
# Post run calculations
####################
# Calculate Entropy
entropy <- as.data.frame(mutualEntropy(TotalStateMat = X_tot))
entropy$epsilon <- epsilon
entropy$beta <- beta
View(entropy)
View(run_in_parallel)
length(seq(5, 100, 5))
length(epsilons)
length(seq(1, 1.25, 0.01))
26/5
26/6
file_name <- paste0("EpsilonBetaSweep_Sigma", ThreshSD[1], "-n", n)
full_path <- paste0(storage_path, file_name, '/')
dir.create(full_path, showWarnings = FALSE)
file_name
paste0(full_path,
"eps",
str_pad(string = epsilon, width =  3, pad =  "0"),
"-beta",
beta,
".Rdata")
file = paste0(full_path,
"eps",
epsilon,
"-beta",
beta,
".Rdata")
file
files <- "/scratch/gpfs/ctokita/EpsilonBetaSweep_Sigma0-n60/eps0-beta1.Rdata"
completed_runs <- data.frame(beta = as.numeric(gsub(x = files, "eps([0-9]+)-.*", "\\1", perl = T)))
View(completed_runs)
completed_runs <- data.frame(epsilons = as.numeric(gsub(x = files, "eps([0-9]+)-.*", "\\1", perl = T)))
gsub(x = files, "eps([0-9]+)-.*", "\\1", perl = T))
gsub(x = files, "eps([0-9]+)-.*", "\\1", perl = T)
completed_runs <- data.frame(epsilons = as.numeric(gsub(x = files, ".*eps([0-9]+)-.*", "\\1", perl = T)))
View(completed_runs)
completed_runs$beta <- as.numeric(gsub(x = files, ".*-beta([\\.0-9]+).Rdata$", "\\1", perl = T))
View(completed_runs)
directory <- "output/Rdata/EpsilonBetaSweep_Sigma0-n60/"
rm(list = ls())
directory <- "output/Rdata/EpsilonBetaSweep_Sigma0-n60/"
# List files
files <- list.files(directory, full.names = TRUE)
load(files[1])
View(entropy_sum)
rm(list = ls())
directory <- "output/Rdata/EpsilonBetaSweep_Sigma0-n60/"
# List files
files <- list.files(directory, full.names = TRUE)
for (file in files) {
load(file)
if (!exists("entropy")) {
entropy <- entropy_sum
} else {
entropy <- rbind(entropy, entropy_sum)
}
}
620^0.5
save(entropy, file = "output/ParameterSpace/EpsilonBetaSweep-n60.Rdata")
load("output/ParameterSpace/EpsilonBetaSweep-n60.Rdata")
pal <- brewer_pal("seq", "GnBu")
pal <- pal(9)
rm(list = ls())
####################
# Source necessary scripts/libraries
####################
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
###################
load("output/ParameterSpace/EpsilonBetaSweep-n60.Rdata")
pal <- brewer_pal("seq", "GnBu")
pal <- pal(9)
names(entropy)
# Graph
gg_betaeps <- ggplot(data = entropy, aes(x = epsilon, y = beta, fill = Dind_mean, colour = Dind_mean)) +
geom_tile() +
theme_bw() +
scale_x_continuous(breaks = seq(0, 100, 20),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(-1, 1, 0.1),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste( "Social influence (", italic(epsilon), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 1)
gg_betaeps
summary(entropy)
# Graph
gg_betaeps <- ggplot(data = entropy, aes(x = epsilon, y = beta, fill = Dind_mean, colour = Dind_mean)) +
geom_tile() +
theme_bw() +
scale_x_continuous(breaks = seq(0, 0.6, 0.1),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(1, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste( "Social influence (", italic(epsilon), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 1)
gg_betaeps
# Graph
gg_betaeps <- ggplot(data = entropy, aes(x = epsilon, y = beta, fill = Dind_mean, colour = Dind_mean)) +
geom_tile() +
theme_bw() +
scale_x_continuous(breaks = seq(0, 0.6, 0.1),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(1, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
ylab(expression(paste("Interaction Bias (", italic(beta), ")"))) +
xlab(expression(paste( "Social influence (", italic(epsilon), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 1)
gg_betaeps
# Graph
gg_betaeps <- ggplot(data = entropy, aes(y = epsilon, x = beta, fill = Dind_mean, colour = Dind_mean)) +
geom_tile() +
theme_bw() +
scale_x_continuous(breaks = seq(0, 0.6, 0.1),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(1, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Interaction Bias (", italic(beta), ")"))) +
ylab(expression(paste( "Social influence (", italic(epsilon), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 1)
gg_betaeps
# Graph
gg_betaeps <- ggplot(data = entropy, aes(x = beta, y = epsilon, fill = Dind_mean, colour = Dind_mean)) +
geom_tile() +
theme_bw() +
scale_x_continuous(breaks = seq(0, 0.6, 0.1),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(1, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Interaction Bias (", italic(beta), ")"))) +
ylab(expression(paste( "Social influence (", italic(epsilon), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 1)
gg_betaeps
# Graph
gg_betaeps <- ggplot(data = entropy, aes(x = beta, y = epsilon, fill = Dind_mean, colour = Dind_mean)) +
geom_tile() +
theme_bw() +
scale_x_continuous(breaks = seq(1, 1.25, 0.05),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(0, 0.6, 0.1),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Interaction Bias (", italic(beta), ")"))) +
ylab(expression(paste( "Social influence (", italic(epsilon), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 1)
gg_betaeps
rm(list = ls())
directory <- "output/Rdata/EpsilonBetaSweep_Sigma0-n60/"
# List files
files <- list.files(directory, full.names = TRUE)
for (file in files) {
load(file)
if (!exists("entropy")) {
entropy <- entropy_sum
} else {
entropy <- rbind(entropy, entropy_sum)
}
}
save(entropy, file = "output/ParameterSpace/EpsilonBetaSweep-n60.Rdata")
rm(list = ls())
####################
# Source necessary scripts/libraries
####################
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
load("output/ParameterSpace/EpsilonBetaSweep-n60.Rdata")
pal <- brewer_pal("seq", "GnBu")
pal <- pal(9)
# Graph
gg_betaeps <- ggplot(data = entropy, aes(x = beta, y = epsilon, fill = Dind_mean, colour = Dind_mean)) +
geom_tile() +
theme_bw() +
scale_x_continuous(breaks = seq(1, 1.25, 0.05),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(0, 0.6, 0.1),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Interaction Bias (", italic(beta), ")"))) +
ylab(expression(paste( "Social influence (", italic(epsilon), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 1)
gg_betaeps
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
####################
# Load data
####################
load("output/ParameterSpace/EpsilonBetaSweep-n60.Rdata")
View(entropy)
# Filter to parameter combos of interest
betas <- entropy %>%
filter(epsilon %in% c(0, 0.1, 0.3, 0.5))
View(betas)
names(entorpy)
beta
names(betas)
# Filter to parameter combos of interest
betas <- entropy %>%
filter(epsilon %in% c(0, 0.1, 0.3, 0.5)) %>%
mutate(Mean = Dind_mean,
SD = Dind_SD)
####################
# Plot
####################
gg_entropy_betas <- ggplot(data = betas, aes(x = beta, colour = epsilon)) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(values = pal,
labels = c("1.2", "1.1"),
name = expression("Interaction bias"(Beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_entropy
# Filter to parameter combos of interest
values_of_interest <- c(0, 0.1, 0.3, 0.5)
betas <- entropy %>%
filter(epsilon %in% values_of_interest) %>%
mutate(Mean = Dind_mean,
SD = Dind_SD)
####################
# Plot
####################
pal <- brewer.pal(5, "Greens")[2:5]
gg_entropy_betas <- ggplot(data = betas, aes(x = beta, colour = epsilon)) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
scale_color_manual(values = pal,
labels = c("0.0", "0.1", "0.3", "0.5"),
name = expression("Social influence "(epsilon))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_entropy_betas
betas <- entropy %>%
filter(epsilon %in% values_of_interest) %>%
mutate(Mean = Dind_mean,
SD = Dind_SD,
epsilon = as.factor(epsilon))
####################
# Plot
####################
pal <- brewer.pal(5, "Greens")[2:5]
gg_entropy_betas <- ggplot(data = betas, aes(x = beta, colour = epsilon)) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
scale_color_manual(values = pal,
labels = c("0.0", "0.1", "0.3", "0.5"),
name = expression("Social influence "(epsilon))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_entropy_betas
View(betas)
unique(betas$epsilon)
# Filter to parameter combos of interest
values_of_interest <- c(0, 0.1, 0.3, 0.5)
betas <- entropy %>%
filter(epsilon %in% values_of_interest) %>%
mutate(Mean = Dind_mean,
SD = Dind_SD,
epsilon = as.factor(epsilon))
View(entropy)
unique(entropy$epsilon)
# Filter to parameter combos of interest
values_of_interest <- c(0, 0.1, 0.3, 0.5)
betas <- entropy %>%
filter(epsilon %in% values_of_interest) %>%
mutate(Mean = Dind_mean,
SD = Dind_SD,
epsilon = as.factor(epsilon))
0.3 %in% entropy$epsilon
0.300 %in% entropy$epsilon
View(entropy)
entropy$epsilon[313]
entropy$epsilon[313] == 0.3
class(entropy$epsilon[313])
class(0.3)
0.1 %in% entropy$epsilon
test <- entropy$epsilon[313]
test
test == 0.3
