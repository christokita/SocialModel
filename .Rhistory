####################
# Seed structures and intial matrices
####################
# Set initial probability matrix (P_g)
P_g <- matrix(data = rep(0, n * m), ncol = m)
# Seed task (external) stimuli
stimMat <- seed_stimuls(intitial_stim = InitialStim,
gens = gens)
# Seed internal thresholds
threshMat <- seed_thresholds(n = n,
m = m,
threshold_means = ThreshM,
threshold_sds = ThreshSD)
# Start task performance
X_g <- matrix(data = rep(0, length(P_g)), ncol = ncol(P_g))
# Create cumulative task performance matrix
X_tot <- X_g
# Prep correlation step matrix
X_prev <- matrix(data = rep(0, n * m), ncol = m)
X_prevTot <- matrix(data = rep(0, n * m), ncol = m)
taskCorr <- list()
gens           <- 100 #number of generations to run simulation
gens           <- 1000 #number of generations to run simulation
# Run Simulations
for (sim in 1:chunk_size) {
####################
# Seed structures and intial matrices
####################
# Set initial probability matrix (P_g)
P_g <- matrix(data = rep(0, n * m), ncol = m)
# Seed task (external) stimuli
stimMat <- seed_stimuls(intitial_stim = InitialStim,
gens = gens)
# Seed internal thresholds
threshMat <- seed_thresholds(n = n,
m = m,
threshold_means = ThreshM,
threshold_sds = ThreshSD)
# Start task performance
X_g <- matrix(data = rep(0, length(P_g)), ncol = ncol(P_g))
# Create cumulative task performance matrix
X_tot <- X_g
# Prep correlation step matrix
X_prev <- matrix(data = rep(0, n * m), ncol = m)
X_prevTot <- matrix(data = rep(0, n * m), ncol = m)
taskCorr <- list()
taskStep <- list()
# Create cumulative adjacency matrix
g_tot <-  matrix(data = rep(0, n * n), ncol = n)
colnames(g_tot) <- paste0("v-", 1:n)
rownames(g_tot) <- paste0("v-", 1:n)
####################
# Simulate individual run
####################
# Run simulation
for (t in 1:gens) {
# Current timestep is actually t+1 in this formulation, because first row is timestep 0
# Update stimuli
stimMat <- update_stim(stim_matrix = stimMat,
deltas = deltas,
alpha = alpha,
state_matrix = X_g,
time_step = t)
# Calculate task demand based on global stimuli
P_g <- calc_determ_thresh(time_step        = t + 1, # first row is generation 0
threshold_matrix = threshMat,
stimulus_matrix  = stimMat)
# Update task performance
X_g <- update_task_performance(task_probs   = P_g,
state_matrix = X_g,
quit_prob    = quitP)
# Update social network (previously this was before probability/task update)
g_adj <- temporalNetwork(X_sub_g = X_g,
prob_interact = p,
bias = beta)
g_tot <- g_tot + g_adj
# Adjust thresholds
threshMat <- adjust_thresholds_social_capped(social_network = g_adj,
threshold_matrix = threshMat,
state_matrix = X_g,
epsilon = epsilon,
threshold_max = 2 * ThreshM[1])
# Update total task performance profile
X_tot <- X_tot + X_g
# Create time step for correlation
if (t %% corrStep == 0) {
# Get tasks performance in correlation step
X_step <- X_tot - X_prevTot
# Add to ensemble list of task steps
taskStep[[t / corrStep]] <- X_step
# Calculate rank correlation if it is not the first step
if(sum(X_prev) != 0) {
# Normalize
stepNorm <- X_step / rowSums(X_step)
prevNorm <- X_prev / rowSums(X_prev)
# Calculate ranks
step_ranks <- calculateTaskRank(TaskStepMat = X_step)
prev_ranks <- calculateTaskRank(TaskStepMat = X_prev)
# Calculate Correlation
rankCorr <- cor(prev_ranks, step_ranks, method = "spearman")
# Put in list
taskCorr[[(t / corrStep) - 1]] <- diag(rankCorr)
names(taskCorr)[(t / corrStep) - 1] <- paste0("Gen", t)
}
# Update previous step total matrix
X_prevTot <- X_tot
# Update previous step total matrix
X_prev <- X_step
}
}
####################
# Post run calculations
####################
# Calculate Entropy
entropy <- mutualEntropy(TotalStateMat = X_tot)
entropy <- label_parallel_runs(matrix = entropy, n = n, simulation = sim, chunk = chunk)
# Calculate total task distribution
totalTaskDist <- X_tot / gens
totalTaskDist <- label_parallel_runs(matrix = totalTaskDist, n = n, simulation = sim, chunk = chunk)
# Create thresh table
threshMat <- label_parallel_runs(matrix = threshMat, n = n, simulation = sim, chunk = chunk)
# Create rank correlation table
taskCorr$replicate <- sim
# Add total task distributions, entropy values, and graphs to lists
ens_taskDist[[sim]]    <- totalTaskDist
ens_entropy[[sim]]     <- entropy
ens_thresh[[sim]]      <- threshMat
ens_graphs[[sim]]      <- g_tot / gens
ens_taskCorr[[sim]]  <- taskCorr
}
n <- run_in_parallel[k, 1]
chunk <- run_in_parallel[k, 2]
# Prep lists for collection of simulation outputs from this group size
ens_taskDist    <- list()
ens_entropy     <- list()
ens_thresh      <- list()
ens_graphs      <- list()
ens_taskCorr  <- list()
# Run Simulations
for (sim in 1:chunk_size) {
####################
# Seed structures and intial matrices
####################
# Set initial probability matrix (P_g)
P_g <- matrix(data = rep(0, n * m), ncol = m)
# Seed task (external) stimuli
stimMat <- seed_stimuls(intitial_stim = InitialStim,
gens = gens)
# Seed internal thresholds
threshMat <- seed_thresholds(n = n,
m = m,
threshold_means = ThreshM,
threshold_sds = ThreshSD)
# Start task performance
X_g <- matrix(data = rep(0, length(P_g)), ncol = ncol(P_g))
# Create cumulative task performance matrix
X_tot <- X_g
# Prep correlation step matrix
X_prev <- matrix(data = rep(0, n * m), ncol = m)
X_prevTot <- matrix(data = rep(0, n * m), ncol = m)
taskCorr <- list()
taskStep <- list()
# Create cumulative adjacency matrix
g_tot <-  matrix(data = rep(0, n * n), ncol = n)
colnames(g_tot) <- paste0("v-", 1:n)
rownames(g_tot) <- paste0("v-", 1:n)
####################
# Simulate individual run
####################
# Run simulation
for (t in 1:gens) {
# Current timestep is actually t+1 in this formulation, because first row is timestep 0
# Update stimuli
stimMat <- update_stim(stim_matrix = stimMat,
deltas = deltas,
alpha = alpha,
state_matrix = X_g,
time_step = t)
# Calculate task demand based on global stimuli
P_g <- calc_determ_thresh(time_step        = t + 1, # first row is generation 0
threshold_matrix = threshMat,
stimulus_matrix  = stimMat)
# Update task performance
X_g <- update_task_performance(task_probs   = P_g,
state_matrix = X_g,
quit_prob    = quitP)
# Update social network (previously this was before probability/task update)
g_adj <- temporalNetwork(X_sub_g = X_g,
prob_interact = p,
bias = beta)
g_tot <- g_tot + g_adj
# Adjust thresholds
threshMat <- adjust_thresholds_social_capped(social_network = g_adj,
threshold_matrix = threshMat,
state_matrix = X_g,
epsilon = epsilon,
threshold_max = 2 * ThreshM[1])
# Update total task performance profile
X_tot <- X_tot + X_g
# Create time step for correlation
if (t %% corrStep == 0) {
# Get tasks performance in correlation step
X_step <- X_tot - X_prevTot
# Add to ensemble list of task steps
taskStep[[t / corrStep]] <- X_step
# Calculate rank correlation if it is not the first step
if(sum(X_prev) != 0) {
# Normalize
stepNorm <- X_step / rowSums(X_step)
prevNorm <- X_prev / rowSums(X_prev)
# Calculate ranks
step_ranks <- calculateTaskRank(TaskStepMat = X_step)
prev_ranks <- calculateTaskRank(TaskStepMat = X_prev)
# Calculate Correlation
rankCorr <- cor(prev_ranks, step_ranks, method = "spearman")
# Put in list
taskCorr[[(t / corrStep) - 1]] <- diag(rankCorr)
names(taskCorr)[(t / corrStep) - 1] <- paste0("Gen", t)
}
# Update previous step total matrix
X_prevTot <- X_tot
# Update previous step total matrix
X_prev <- X_step
}
}
####################
# Post run calculations
####################
# Calculate Entropy
entropy <- mutualEntropy(TotalStateMat = X_tot)
entropy <- label_parallel_runs(matrix = entropy, n = n, simulation = sim, chunk = chunk)
# Calculate total task distribution
totalTaskDist <- X_tot / gens
totalTaskDist <- label_parallel_runs(matrix = totalTaskDist, n = n, simulation = sim, chunk = chunk)
# Create thresh table
threshMat <- label_parallel_runs(matrix = threshMat, n = n, simulation = sim, chunk = chunk)
# Create rank correlation table
taskCorr$replicate <- sim
# Add total task distributions, entropy values, and graphs to lists
ens_taskDist[[sim]]    <- totalTaskDist
ens_entropy[[sim]]     <- entropy
ens_thresh[[sim]]      <- threshMat
ens_graphs[[sim]]      <- g_tot / gens
ens_taskCorr[[sim]]  <- taskCorr
}
# Bind task correlation data
# Calculate mean correlation for each n
runCorrs <- lapply(ens_taskCorr, function(x) {
# Unlist
runs <- do.call("rbind", x)
replicate <- runs[nrow(runs), ]
replicate <- unique(replicate)
runs <- runs[-nrow(runs), ]
# Calculate mean
runMean <- matrix(data = rep(NA, m), ncol =  m)
for (column in 1:m) {
runMean[ , column] <- mean(runs[ , column], na.rm = TRUE)
}
runMean <- cbind(runMean, replicate)
colnames(runMean) <- c(paste0("Task", 1:m), "replicate")
return(runMean)
})
runCorrs <- do.call("rbind", runCorrs)
runCorrs$n <- n
runnCorrs$chunk <- chunk
runCorrs
# Bind task correlation data
# Calculate mean correlation for each n
runCorrs <- lapply(ens_taskCorr, function(x) {
# Unlist
runs <- do.call("rbind", x)
replicate <- runs[nrow(runs), ]
replicate <- unique(replicate)
runs <- runs[-nrow(runs), ]
# Calculate mean
runMean <- matrix(data = rep(NA, m), ncol =  m)
for (column in 1:m) {
runMean[ , column] <- mean(runs[ , column], na.rm = TRUE)
}
runMean <- cbind(runMean, replicate)
colnames(runMean) <- c(paste0("Task", 1:m), "replicate")
return(runMean)
})
runCorrs
runCorrs <- do.call("rbind", runCorrs)
View(runCorrs)
runCorrs <- as.data.frame(do.call("rbind", runCorrs))
# Bind task correlation data
# Calculate mean correlation for each n
runCorrs <- lapply(ens_taskCorr, function(x) {
# Unlist
runs <- do.call("rbind", x)
replicate <- runs[nrow(runs), ]
replicate <- unique(replicate)
runs <- runs[-nrow(runs), ]
# Calculate mean
runMean <- matrix(data = rep(NA, m), ncol =  m)
for (column in 1:m) {
runMean[ , column] <- mean(runs[ , column], na.rm = TRUE)
}
runMean <- cbind(runMean, replicate)
colnames(runMean) <- c(paste0("Task", 1:m), "replicate")
return(runMean)
})
runCorrs <- as.data.frame(do.call("rbind", runCorrs))
runCorrs$n <- n
runnCorrs$chunk <- chunk
View(runCorrs)
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
directory_path <- "output/Rdata/Sigma0-Epsilon0-Beta1.1_RankCorr/"
output_path <- "output/Rdata/_ProcessedData/"
run_info <- gsub("^.*(Sigma.*)/$", "\\1", directory_path, perl = TRUE)
####################
# Create folders
####################
# Get names of folders
folders <- list.files(directory_path)
output_folders <- list.files(output_path)
# Create folders for those not existing in processed data
missing_folders <- folders[!folders %in% output_folders]
missing_folders
folder = "RankCorr"
files <- list.files(paste0(directory_path, folder), full.names = TRUE)
files
for (file in files) {
load(file)
data <- do.call('rbind', data)
if (!exists("compiled_data")) {
compiled_data <- data
} else {
compiled_data <- rbind(compiled_data, data)
}
}
compiled_data <- as.data.frame(compiled_data)
View(compiled_data)
data[[1]]
data[1]
load(file)
data
data[1][1]
head(data[1])
test <- data[[1]]
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
p <- 1 #prob of interact
runs <- c("Sigma0.05-Epsilon0-Beta1.1",
"Sigma0-Epsilon0.1-Beta1.1")
run_names <- c("Fixed", "Social")
interaction_rates <- lapply(1:length(runs), function(run) {
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Graphs/", runs[run], "/"), full.names = TRUE)
soc_networks <- list()
for (file in 1:length(files)) {
load(files[file])
soc_networks[[file]] <- listed_data
}
# Load threshold matrices
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", runs[run], "/"), full.names = TRUE)
thresh_data <- list()
for (file in 1:length(files)) {
load(files[file])
thresh_data[[file]] <- listed_data
}
# Loop through individual graphs
interaction_info <- lapply(1:length(soc_networks), function(i) {
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
# For each each compute interaction matrix
# Get graph and make adjacency matrix
size_graph <- lapply(1:length(graphs), function(j) {
# Format: set diagonal, rescale, and make adj matrix
this_graph <- graphs[[j]]
diag(this_graph) <- NA
thresh <- as.data.frame(thresh_data[[i]][j])
thresh$ThreshRatio <- log(thresh$Thresh1 / thresh$Thresh2)
ratio <- order(thresh$ThreshRatio)
# Create order by threshold ratio
this_graph <- this_graph[ratio, ratio]
colnames(this_graph) <- 1:nrow(this_graph)
rownames(this_graph) <- colnames(this_graph)
g <- graph.adjacency(adjmatrix = this_graph, weighted = T)
edgelist_graph <- as.data.frame(get.edgelist(g))
names(edgelist_graph) <- c("From", "To")
edgelist_graph$Weight <- E(g)$weight
edgelist_graph$Interaction <- paste0(edgelist_graph$From, "-", edgelist_graph$To)
# return
return(edgelist_graph)
})
#Calculate baseline probability of interaction
dimensions <- dim(graphs[[1]])
not_chosen <- 1 - (( 1 / (dimensions[1] - 1)) * p)
expected_random <-  1 - not_chosen^2
# Bind
all_edgelist <- do.call("rbind", size_graph)
#  Calcualte 99% CI interval of interaction rate
edgelist_sig <- all_edgelist %>%
group_by(From, To, Interaction) %>%
# filter(!is.na(Weight)) %>%
summarise(samp_mean = mean(Weight),
samp_sd = sd(Weight),
samples = length(Weight)) %>%
mutate(error = qt(0.995,df = samples-1) * samp_sd/sqrt(samples),
CI_low = samp_mean - error,
CI_high = samp_mean + error) %>%
mutate(Lower_check = CI_low > expected_random,
Higher_check = CI_high > expected_random)
# Determine if it is different than random
edgelist_sig <- as.data.frame(edgelist_sig)
edgelist_sig$DiffDirection <- 0
edgelist_sig$DiffDirection[edgelist_sig$Lower_check & edgelist_sig$Higher_check] <- 1
edgelist_sig$DiffDirection[edgelist_sig$Lower_check==FALSE & edgelist_sig$Higher_check==FALSE] <- -1
# Make graph
edgelist_sig <- edgelist_sig %>%
summarise(Nonrandom = sum(DiffDirection!=0),
HigherThanRandom = sum(DiffDirection == 1),
LowerThanRandom = sum(DiffDirection == -1),
TotalInteractions = n()) %>%
mutate(PercentNonRandom = Nonrandom / TotalInteractions,
PercentHigher = HigherThanRandom / TotalInteractions,
PercentLower = LowerThanRandom / TotalInteractions,
n = dimensions[1],
Model = run_names[run])
# Return
print(paste0(run_names[run], ": ", dimensions[1]))
return(edgelist_sig)
})
# Bind and return
interaction_info <- do.call("rbind", interaction_info)
return(interaction_info)
})
# Bind
interaction_data <- do.call('rbind', interaction_rates)
# Graph
gg_interactions <- ggplot(interaction_data, aes(x = n, y = PercentNonRandom,
colour = Model, group = Model, fill = Model)) +
geom_line(size = 0.4, aes(linetype = Model)) +
geom_point(size = 0.8, shape = 21) +
scale_y_continuous(limits = c(0, 1)) +
scale_color_manual(name = "Threshold type",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold type",
values = c("#ffffff", "#4d4d4d")) +
scale_linetype_manual(name = "Threshold type",
values = c("dotted", "solid")) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab("% Non-random interactions") +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.position = "none")
gg_interactions
# Graph
gg_interactions <- ggplot(interaction_data, aes(x = n, y = PercentNonRandom,
colour = Model, group = Model, fill = Model)) +
geom_line(size = 0.4, aes(linetype = Model)) +
geom_point(size = 0.8, shape = 21) +
scale_y_continuous(limits = c(0, 1)) +
scale_color_manual(name = "Threshold type",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold type",
values = c("#ffffff", "#4d4d4d")) +
# scale_linetype_manual(name = "Threshold type",
#                       values = c("dotted", "solid")) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab("% Non-random interactions") +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.position = "none")
gg_interactions
# Graph
gg_interactions <- ggplot(interaction_data, aes(x = n, y = PercentNonRandom,
colour = Model, group = Model, fill = Model)) +
geom_line(size = 0.4, aes(linetype = Model)) +
geom_point(size = 0.8, shape = 21) +
scale_y_continuous(limits = c(0, 1)) +
scale_color_manual(name = "Threshold type",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold type",
values = c("#ffffff", "#4d4d4d")) +
scale_linetype_manual(name = "Threshold type",
values = c("dashed", "solid")) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab("% Non-random interactions") +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.position = "none")
gg_interactions
ggsave(gg_interactions, filename = "Output/Networks/NetworkMetrics/PercentNonRandomInteractions.png",
height = 45, width = 45, units = "mm", dpi = 400)
# Graph
gg_interactions <- ggplot(interaction_data, aes(x = n, y = PercentNonRandom,
colour = Model, group = Model, fill = Model)) +
geom_line(size = 0.4) +
geom_point(size = 0.8, shape = 21) +
scale_y_continuous(limits = c(0, 1)) +
scale_color_manual(name = "Threshold type",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold type",
values = c("#ffffff", "#4d4d4d")) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab("% Non-random interactions") +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.position = "none")
gg_interactions
ggsave(gg_interactions, filename = "Output/Networks/NetworkMetrics/PercentNonRandomInteractions.png",
height = 45, width = 45, units = "mm", dpi = 400)
ggsave(gg_interactions, filename = "Output/Networks/NetworkMetrics/PercentNonRandomInteractions.svg",
height = 45, width = 45, units = "mm")
