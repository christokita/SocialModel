rep_data <- do.call('rbind', rep_data)
# Combine all stim data
all_stim <- c(rep_data$s1, rep_data$s2)
# Calculate statistics and return
to_return <- data.frame(n = n,
sMean = mean(rep_data$sTotal),
sSD = sd(rep_data$sTotal),
sSE = sd(rep_data$sTotal)/sqrt(nrow(rep_data)))
return(to_return)
})
# Bind
stim_data <- do.call("rbind", stim_data)
####################
# Plot
####################
gg_stimdiff <- ggplot(stim_data, aes(x = n, y = sMean)) +
geom_errorbar(aes(ymin = sMean - sSD, ymax = sMean + sSD),
size = 0.3,
width = 0) +
geom_point(size = 0.8) +
theme_classic() +
ylab("Change in Total Stim. Level") +
scale_x_continuous(breaks = seq(0, 100, 20)) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_stimdiff
####################
# Average change in stim levels: beginning to end
####################
files <- list.files("output/Rdata/_ProcessedData/Stim/Sigma0.05-Epsilon0-Beta1.1/", full.names = TRUE)
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
library(viridis)
library(ggridges)
p <- 1 #prob of interact
run <- "Sigma0.05-Epsilon0-Beta1.1"
####################
# Load and process data
####################
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", run, "/"), full.names = TRUE)
# Loop through group sizes
group_thresh <- lapply(files, function(file) {
# Load
load(file)
# Bind
thresh_data <- as.data.frame(do.call("rbind", listed_data))
# # Summarise
# thresh_sum <- thresh_data %>%
#   mutate(run = paste0(sim, "-", chunk)) %>%
#   group_by(n, run) %>%
#   summarise(Thresh1SD = sd(Thresh1),
#             Thresh2SD = sd(Thresh2),
#             ThreshSD = (sd(Thresh1)  + sd(Thresh2)) / 2) %>%
#   select(n, ThreshSD)
return(thresh_data)
})
# Bind
all_thresh <- do.call('rbind', group_thresh)
# Plot
pal <- brewer_pal("seq", "RdPu")
pal <- pal(9)
gg_threshvar <- ggplot(data = all_thresh,
aes(x = Thresh1, y = n, fill = n, group = n)) +
theme_invisible() +
geom_density_ridges(size = 0.2, stat = "binline", bins = 100) +
xlab("Threshold value") +
scale_x_continuous(breaks = seq(0, 100, 25),
expand = c(0.03, 0)) +
scale_y_continuous(breaks = c(5, seq(25, 100, 25)),
expand = c(0.03, 0)) +
scale_fill_viridis() +
scale_color_viridis() +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, color = "black"),
axis.title.y = element_text(size = 7, color = "black", face = 'italic'),
legend.position = "none",
axis.ticks = element_line(size = 0.2, color = "black"))
gg_threshvar
gg_threshvar <- ggplot(data = all_thresh,
aes(x = Thresh1, y = n, fill = n, group = n)) +
theme_invisible() +
geom_density_ridges(size = 0.2, stat = "binline", bins = 100) +
xlab("Threshold value") +
scale_x_continuous(breaks = seq(0, 100, 25),
expand = c(0.03, 0)) +
scale_y_continuous(breaks = c(5, seq(25, 100, 25)),
limits = c(0, 0),
expand = c(0.03, 0)) +
scale_fill_viridis() +
scale_color_viridis() +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, color = "black"),
axis.title.y = element_text(size = 7, color = "black", face = 'italic'),
legend.position = "none",
axis.ticks = element_line(size = 0.2, color = "black"))
gg_threshvar
gg_threshvar <- ggplot(data = all_thresh,
aes(x = Thresh1, y = n, fill = n, group = n)) +
theme_invisible() +
geom_density_ridges(size = 0.2, stat = "binline", bins = 100) +
xlab("Threshold value") +
scale_x_continuous(breaks = seq(0, 100, 25),
expand = c(0.03, 0)) +
scale_y_continuous(breaks = c(5, seq(25, 100, 25)),
limits = c(0, 100),
expand = c(0.03, 0)) +
scale_fill_viridis() +
scale_color_viridis() +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, color = "black"),
axis.title.y = element_text(size = 7, color = "black", face = 'italic'),
legend.position = "none",
axis.ticks = element_line(size = 0.2, color = "black"))
gg_threshvar
gg_threshvar <- ggplot(data = all_thresh,
aes(x = Thresh1, y = n, fill = n, group = n)) +
theme_invisible() +
geom_density_ridges(size = 0.2, stat = "binline", bins = 100) +
xlab("Threshold value") +
scale_x_continuous(breaks = seq(0, 100, 25),
limits = c(0, 100),
expand = c(0.03, 0)) +
scale_y_continuous(breaks = c(5, seq(25, 100, 25)),
expand = c(0.03, 0)) +
scale_fill_viridis() +
scale_color_viridis() +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, color = "black"),
axis.title.y = element_text(size = 7, color = "black", face = 'italic'),
legend.position = "none",
axis.ticks = element_line(size = 0.2, color = "black"))
gg_threshvar
run <- "Sigma0-Epsilon0.1-Beta1.1"
####################
# Load and process data
####################
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", run, "/"), full.names = TRUE)
# Loop through group sizes
group_thresh <- lapply(files, function(file) {
# Load
load(file)
# Bind
thresh_data <- as.data.frame(do.call("rbind", listed_data))
# # Summarise
# thresh_sum <- thresh_data %>%
#   mutate(run = paste0(sim, "-", chunk)) %>%
#   group_by(n, run) %>%
#   summarise(Thresh1SD = sd(Thresh1),
#             Thresh2SD = sd(Thresh2),
#             ThreshSD = (sd(Thresh1)  + sd(Thresh2)) / 2) %>%
#   select(n, ThreshSD)
return(thresh_data)
})
# Bind
all_thresh <- do.call('rbind', group_thresh)
# Plot
pal <- brewer_pal("seq", "RdPu")
pal <- pal(9)
gg_threshvar <- ggplot(data = all_thresh,
aes(x = Thresh1, y = n, fill = n, group = n)) +
theme_invisible() +
geom_density_ridges(size = 0.2, stat = "binline", bins = 100) +
xlab("Threshold value") +
scale_x_continuous(breaks = seq(0, 100, 25),
limits = c(0, 100),
expand = c(0.03, 0)) +
scale_y_continuous(breaks = c(5, seq(25, 100, 25)),
expand = c(0.03, 0)) +
scale_fill_viridis() +
scale_color_viridis() +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, color = "black"),
axis.title.y = element_text(size = 7, color = "black", face = 'italic'),
legend.position = "none",
axis.ticks = element_line(size = 0.2, color = "black"))
gg_threshvar
gg_threshvar <- ggplot(data = all_thresh,
aes(x = Thresh1, y = n, fill = n, group = n)) +
theme_invisible() +
geom_density_ridges(size = 0.2, stat = "binline", bins = 100) +
xlab("Threshold value") +
scale_x_continuous(breaks = seq(0, 100, 25),
# limits = c(0, 100),
expand = c(0.03, 0)) +
scale_y_continuous(breaks = c(5, seq(25, 100, 25)),
expand = c(0.03, 0)) +
scale_fill_viridis() +
scale_color_viridis() +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, color = "black"),
axis.title.y = element_text(size = 7, color = "black", face = 'italic'),
legend.position = "none",
axis.ticks = element_line(size = 0.2, color = "black"))
gg_threshvar
gg_threshvar <- ggplot(data = all_thresh,
aes(x = Thresh1, y = n, fill = n, group = n)) +
theme_invisible() +
geom_density_ridges(size = 0.2, stat = "binline", bins = 100) +
xlab("Threshold value") +
scale_x_continuous(breaks = seq(0, 100, 25),
limits = c(-05, 105),
expand = c(0.03, 0)) +
scale_y_continuous(breaks = c(5, seq(25, 100, 25)),
expand = c(0.03, 0)) +
scale_fill_viridis() +
scale_color_viridis() +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, color = "black"),
axis.title.y = element_text(size = 7, color = "black", face = 'italic'),
legend.position = "none",
axis.ticks = element_line(size = 0.2, color = "black"))
gg_threshvar
gg_threshvar <- ggplot(data = all_thresh,
aes(x = Thresh1, y = n, fill = n, group = n)) +
theme_invisible() +
geom_density_ridges(size = 0.2, stat = "binline", bins = 100) +
xlab("Threshold value") +
scale_x_continuous(breaks = seq(0, 100, 25),
limits = c(-01, 101),
expand = c(0.03, 0)) +
scale_y_continuous(breaks = c(5, seq(25, 100, 25)),
expand = c(0.03, 0)) +
scale_fill_viridis() +
scale_color_viridis() +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, color = "black"),
axis.title.y = element_text(size = 7, color = "black", face = 'italic'),
legend.position = "none",
axis.ticks = element_line(size = 0.2, color = "black"))
gg_threshvar
look <- all_thresh %>% filter(n == 10)
names(look)
####################
# Plot thresholds by replicate
####################
look <- all_thresh %>%
filter(n == 10)
####################
# Plot thresholds by replicate
####################
look <- all_thresh %>%
filter(n == 10) %>%
mutate(replicate = paste0(sim, chunk, sep = "-"))
View(look)
####################
# Plot thresholds by replicate
####################
look <- all_thresh %>%
filter(n == 10) %>%
mutate(replicate = paste0(sim, chunk, collapse = "-"))
View(look)
####################
# Plot thresholds by replicate
####################
look <- all_thresh %>%
filter(n == 10) %>%
mutate(replicate = paste(sim, chunk, sep = "-"))
View(look)
names(look)
gg_thresh <- ggplot(look, aes(x = Thresh1, y = Thresh2, color = replicate)) +
geom_point() +
theme_classic()
gg_thresh
gg_thresh <- ggplot(look, aes(x = Thresh1, y = Thresh2, color = replicate)) +
geom_point() +
theme_classic() +
theme(legend.position = "none")
gg_thresh
run <- "Sigma0.05-Epsilon0-Beta1.1"
####################
# Load and process data
####################
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", run, "/"), full.names = TRUE)
# Loop through group sizes
group_thresh <- lapply(files, function(file) {
# Load
load(file)
# Bind
thresh_data <- as.data.frame(do.call("rbind", listed_data))
# # Summarise
# thresh_sum <- thresh_data %>%
#   mutate(run = paste0(sim, "-", chunk)) %>%
#   group_by(n, run) %>%
#   summarise(Thresh1SD = sd(Thresh1),
#             Thresh2SD = sd(Thresh2),
#             ThreshSD = (sd(Thresh1)  + sd(Thresh2)) / 2) %>%
#   select(n, ThreshSD)
return(thresh_data)
})
# Bind
all_thresh <- do.call('rbind', group_thresh)
####################
# Plot thresholds by replicate
####################
look <- all_thresh %>%
filter(n == 10) %>%
mutate(replicate = paste(sim, chunk, sep = "-"))
gg_thresh <- ggplot(look, aes(x = Thresh1, y = Thresh2, color = replicate)) +
geom_point() +
theme_classic() +
theme(legend.position = "none")
gg_thresh
gg_thresh <- ggplot(look, aes(x = Thresh1, color = replicate)) +
geom_hist() +
theme_classic() +
theme(legend.position = "none")
gg_thresh <- ggplot(look, aes(x = Thresh1, color = replicate)) +
geom_histogram() +
theme_classic() +
theme(legend.position = "none")
gg_thresh
gg_thresh <- ggplot(look, aes(x = Thresh1, fill = replicate)) +
geom_histogram() +
theme_classic() +
theme(legend.position = "none")
gg_thresh
run <- "Sigma0.05-Epsilon0-Beta1.1"
####################
# Load and process data
####################
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", run, "/"), full.names = TRUE)
# Loop through group sizes
group_thresh <- lapply(files, function(file) {
# Load
load(file)
# Bind
thresh_data <- as.data.frame(do.call("rbind", listed_data))
# # Summarise
# thresh_sum <- thresh_data %>%
#   mutate(run = paste0(sim, "-", chunk)) %>%
#   group_by(n, run) %>%
#   summarise(Thresh1SD = sd(Thresh1),
#             Thresh2SD = sd(Thresh2),
#             ThreshSD = (sd(Thresh1)  + sd(Thresh2)) / 2) %>%
#   select(n, ThreshSD)
return(thresh_data)
})
# Bind
all_thresh <- do.call('rbind', group_thresh)
####################
# Plot thresholds by replicate
####################
look <- all_thresh %>%
filter(n == 10) %>%
mutate(replicate = paste(sim, chunk, sep = "-"))
gg_thresh <- ggplot(look, aes(x = Thresh1, fill = replicate)) +
geom_histogram() +
theme_classic() +
theme(legend.position = "none")
gg_thresh
run <- "Sigma0-Epsilon0.1-Beta1.1"
####################
# Load and process data
####################
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", run, "/"), full.names = TRUE)
# Loop through group sizes
group_thresh <- lapply(files, function(file) {
# Load
load(file)
# Bind
thresh_data <- as.data.frame(do.call("rbind", listed_data))
# # Summarise
# thresh_sum <- thresh_data %>%
#   mutate(run = paste0(sim, "-", chunk)) %>%
#   group_by(n, run) %>%
#   summarise(Thresh1SD = sd(Thresh1),
#             Thresh2SD = sd(Thresh2),
#             ThreshSD = (sd(Thresh1)  + sd(Thresh2)) / 2) %>%
#   select(n, ThreshSD)
return(thresh_data)
})
# Bind
all_thresh <- do.call('rbind', group_thresh)
####################
# Plot thresholds by replicate
####################
look <- all_thresh %>%
filter(n == 10) %>%
mutate(replicate = paste(sim, chunk, sep = "-"))
gg_thresh <- ggplot(look, aes(x = Thresh1, fill = replicate)) +
geom_histogram() +
theme_classic() +
theme(legend.position = "none")
gg_thresh
gg_thresh <- ggplot(look, aes(x = Thresh1, fill = replicate)) +
geom_point() +
theme_classic() +
theme(legend.position = "none")
gg_thresh
gg_thresh <- ggplot(look, aes(y = replicate, x = Thresh1,  fill = replicate)) +
geom_point() +
theme_classic() +
theme(legend.position = "none")
gg_thresh
gg_thresh <- ggplot(look, aes(y = replicate, x = Thresh1,  color = replicate)) +
geom_point() +
theme_classic() +
theme(legend.position = "none")
gg_thresh
run <- "Sigma0.05-Epsilon0-Beta1.1"
####################
# Load and process data
####################
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", run, "/"), full.names = TRUE)
# Loop through group sizes
group_thresh <- lapply(files, function(file) {
# Load
load(file)
# Bind
thresh_data <- as.data.frame(do.call("rbind", listed_data))
# # Summarise
# thresh_sum <- thresh_data %>%
#   mutate(run = paste0(sim, "-", chunk)) %>%
#   group_by(n, run) %>%
#   summarise(Thresh1SD = sd(Thresh1),
#             Thresh2SD = sd(Thresh2),
#             ThreshSD = (sd(Thresh1)  + sd(Thresh2)) / 2) %>%
#   select(n, ThreshSD)
return(thresh_data)
})
# Bind
all_thresh <- do.call('rbind', group_thresh)
####################
# Plot thresholds by replicate
####################
look <- all_thresh %>%
filter(n == 10) %>%
mutate(replicate = paste(sim, chunk, sep = "-"))
gg_thresh <- ggplot(look, aes(y = replicate, x = Thresh1,  color = replicate)) +
geom_point() +
theme_classic() +
theme(legend.position = "none")
gg_thresh
run <- "Sigma0-Epsilon0.1-Beta1.1"
####################
# Load and process data
####################
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", run, "/"), full.names = TRUE)
# Loop through group sizes
group_thresh <- lapply(files, function(file) {
# Load
load(file)
# Bind
thresh_data <- as.data.frame(do.call("rbind", listed_data))
# # Summarise
# thresh_sum <- thresh_data %>%
#   mutate(run = paste0(sim, "-", chunk)) %>%
#   group_by(n, run) %>%
#   summarise(Thresh1SD = sd(Thresh1),
#             Thresh2SD = sd(Thresh2),
#             ThreshSD = (sd(Thresh1)  + sd(Thresh2)) / 2) %>%
#   select(n, ThreshSD)
return(thresh_data)
})
# Bind
all_thresh <- do.call('rbind', group_thresh)
####################
# Plot thresholds by replicate
####################
look <- all_thresh %>%
filter(n == 10) %>%
mutate(replicate = paste(sim, chunk, sep = "-"))
gg_thresh <- ggplot(look, aes(y = replicate, x = Thresh1,  color = replicate)) +
geom_point() +
theme_classic() +
theme(legend.position = "none")
gg_thresh
####################
# Plot thresholds by replicate
####################
look <- all_thresh %>%
filter(n == 30) %>%
mutate(replicate = paste(sim, chunk, sep = "-"))
gg_thresh <- ggplot(look, aes(y = replicate, x = Thresh1,  color = replicate)) +
geom_point() +
theme_classic() +
theme(legend.position = "none")
gg_thresh
####################
# Plot thresholds by replicate
####################
look <- all_thresh %>%
filter(n == 25) %>%
mutate(replicate = paste(sim, chunk, sep = "-"))
gg_thresh <- ggplot(look, aes(y = replicate, x = Thresh1,  color = replicate)) +
geom_point() +
theme_classic() +
theme(legend.position = "none")
gg_thresh
####################
# Plot thresholds by replicate
####################
look <- all_thresh %>%
filter(n == 35) %>%
mutate(replicate = paste(sim, chunk, sep = "-"))
gg_thresh <- ggplot(look, aes(y = replicate, x = Thresh1,  color = replicate)) +
geom_point() +
theme_classic() +
theme(legend.position = "none")
gg_thresh
