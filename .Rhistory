size = 0.3) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
scale_color_manual(values = pal,
labels = c("0.0", "0.1", "0.3", "0.5"),
name = expression("Social influence "(epsilon))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "right",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_entropy_betas
gg_entropy_betas <- ggplot(data = betas, aes(x = beta, colour = beta)) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
scale_color_manual(values = pal,
labels = c("0.0", "0.1", "0.3", "0.5"),
name = expression("Social influence "(epsilon))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "right",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_entropy_betas
gg_entropy_betas <- ggplot(data = betas, aes(x = epsilon, colour = beta)) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
scale_color_manual(values = pal,
labels = c("0.0", "0.1", "0.3", "0.5"),
name = expression("Social influence "(epsilon))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "right",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_entropy_betas
gg_entropy_betas <- ggplot(data = betas, aes(x = beta, colour = epsilons)) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
scale_color_manual(values = pal,
labels = c("0.0", "0.1", "0.3", "0.5"),
name = expression("Social influence "(epsilon))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "right",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_entropy_betas
epsilons_of_interest <- c(0, 0.1, 0.3, 0.5)
betas_of_interest <- c(1, 1.01, 1.05, 1.1, 1.2)
betas <- entropy %>%
filter(epsilon %in% epsilons_of_interest) %>%
mutate(Mean = Dind_mean,
SD = Dind_SD,
epsilon = as.factor(epsilon))
epsilons <- entropy %>%
filter(beta %in% betas_of_interest) %>%
mutate(Mean = Dind_mean,
SD = Dind_SD,
beta = as.factor(beta))
####################
# Plot
####################
# Betas
pal <- brewer.pal(5, "Greens")[2:5]
gg_entropy_betas <- ggplot(data = betas, aes(x = beta, colour = epsilons)) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
scale_color_manual(values = pal,
labels = c("0.0", "0.1", "0.3", "0.5"),
name = expression("Social influence "(epsilon))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "right",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_entropy_betas
gg_entropy_betas <- ggplot(data = betas, aes(x = beta, colour = epsilon)) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
scale_color_manual(values = pal,
labels = c("0.0", "0.1", "0.3", "0.5"),
name = expression("Social influence "(epsilon))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "right",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_entropy_betas
ggsave(gg_entropy_betas, file = "output/SpecializationPlots/Beta-Eps-n60-BetaSweep.png",
height = 45, width = 450, units = "mm", dpi = 800)
# Epsilon
pal <- brewer.pal(6, "Greens")[2:6]
gg_entropy_eps <- ggplot(data = epsilons, aes(x = epsilon, colour = beta)) +
geom_errorbar(aes(ymin = ifelse((Mean - SD) > 0 , Mean - SD, 0), ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Social influence (", italic(epsilon), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 0.6, 0.1)) +
scale_y_continuous(limits = c(0, 1)) +
scale_color_manual(values = pal,
labels = as.character(betas_of_interest),
name = expression("Interaction bias "(beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "right",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_entropy_eps
ggsave(gg_entropy_eps, file = "output/SpecializationPlots/Beta-Eps-n60-EpsSweep.png",
height = 45, width = 450, units = "mm", dpi = 800)
ggsave(gg_entropy_betas, file = "output/SpecializationPlots/Beta-Eps-n60-BetaSweep.png",
height = 45, width = 50, units = "mm", dpi = 800)
ggsave(gg_entropy_eps, file = "output/SpecializationPlots/Beta-Eps-n60-EpsSweep.png",
height = 45, width = 50, units = "mm", dpi = 800)
gg_entropy_eps <- ggplot(data = epsilons, aes(x = epsilon, colour = beta)) +
geom_errorbar(aes(ymin = ifelse((Mean - SD) > 0 , Mean - SD, 0), ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Social influence (", italic(epsilon), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 0.6, 0.1)) +
scale_y_continuous(limits = c(0, 1)) +
scale_color_manual(values = pal,
labels = as.character(betas_of_interest),
name = expression("Interaction bias "(beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "right",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(2, "mm"),
legend.key.width = unit(2, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_entropy_eps
ggsave(gg_entropy_eps, file = "output/SpecializationPlots/Beta-Eps-n60-EpsSweep.png",
height = 45, width = 50, units = "mm", dpi = 800)
ggsave(gg_entropy_eps, file = "output/SpecializationPlots/Beta-Eps-n60-EpsSweep.png",
height = 45, width = 70, units = "mm", dpi = 800)
ggsave(gg_entropy_eps, file = "output/SpecializationPlots/Beta-Eps-n60-EpsSweep.png",
height = 45, width = 80, units = "mm", dpi = 800)
gg_entropy_eps <- ggplot(data = epsilons, aes(x = epsilon, colour = beta)) +
geom_errorbar(aes(ymin = ifelse((Mean - SD) > 0 , Mean - SD, 0), ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Social influence (", italic(epsilon), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 0.6, 0.1)) +
scale_y_continuous(limits = c(0, 1)) +
scale_color_manual(values = pal,
labels = as.character(betas_of_interest),
name = expression("Interaction bias "(beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "right",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_entropy_eps
ggsave(gg_entropy_eps, file = "output/SpecializationPlots/Beta-Eps-n60-EpsSweep.png",
height = 45, width = 80, units = "mm", dpi = 800)
gg_entropy_eps <- ggplot(data = epsilons, aes(x = epsilon, colour = beta)) +
geom_errorbar(aes(ymin = ifelse((Mean - SD) > 0 , Mean - SD, 0), ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Social influence (", italic(epsilon), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 0.6, 0.1)) +
scale_y_continuous(limits = c(0, 1)) +
scale_color_manual(values = pal,
labels = as.character(betas_of_interest),
name = expression("Interaction bias "(beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "right",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(2, "mm"),
legend.key.width = unit(4, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_entropy_eps
ggsave(gg_entropy_eps, file = "output/SpecializationPlots/Beta-Eps-n60-EpsSweep.png",
height = 45, width = 80, units = "mm", dpi = 800)
# Betas
pal <- brewer.pal(5, "Greens")[2:5]
gg_entropy_betas <- ggplot(data = betas, aes(x = beta, colour = epsilon)) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
scale_color_manual(values = pal,
labels = c("0.0", "0.1", "0.3", "0.5"),
name = expression("Social influence "(epsilon))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "right",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_entropy_betas
ggsave(gg_entropy_betas, file = "output/SpecializationPlots/Beta-Eps-n60-DiffEpsValues.png",
height = 45, width = 80, units = "mm", dpi = 800)
# Epsilon
pal <- brewer.pal(6, "Greens")[2:6]
gg_entropy_eps <- ggplot(data = epsilons, aes(x = epsilon, colour = beta)) +
geom_errorbar(aes(ymin = ifelse((Mean - SD) > 0 , Mean - SD, 0), ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Social influence (", italic(epsilon), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 0.6, 0.1)) +
scale_y_continuous(limits = c(0, 1)) +
scale_color_manual(values = pal,
labels = as.character(betas_of_interest),
name = expression("Interaction bias "(beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "right",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(2, "mm"),
legend.key.width = unit(4, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_entropy_eps
ggsave(gg_entropy_eps, file = "output/SpecializationPlots/Beta-Eps-n60-DiffBetaValues.png",
height = 45, width = 80, units = "mm", dpi = 800)
View(epsilons)
rm(list = ls())
directory <- "output/Rdata/EpsilonBetaSweep_Sigma0-n60/"
# List files
files <- list.files(directory, full.names = TRUE)
for (file in files) {
load(file)
if (!exists("entropy")) {
entropy <- entropy_sum
} else {
entropy <- rbind(entropy, entropy_sum)
}
}
entropy$epsilon <- round(entropy$epsilon, digits = 5) #the seq() funciton makes weird non-precise values (e.g., 0.3 isn't really 0.3)
save(entropy, file = "output/ParameterSpace/EpsilonBetaSweep-n60.Rdata")
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
load("output/ParameterSpace/EpsilonBetaSweep-n60.Rdata")
pal <- brewer_pal("seq", "GnBu")
pal <- pal(9)
# Graph
gg_betaeps <- ggplot(data = entropy, aes(x = beta, y = epsilon, fill = Dind_mean, colour = Dind_mean)) +
geom_tile() +
theme_bw() +
scale_x_continuous(breaks = seq(1, 1.25, 0.05),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(0, 0.6, 0.1),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Interaction Bias (", italic(beta), ")"))) +
ylab(expression(paste( "Social influence (", italic(epsilon), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 1)
gg_betaeps
gg_betaeps
ggsave(gg_betaeps, "output/ParameterSpace/Plots/BeataEpsSweep_n60.png")
ggsave(gg_betaeps, "output/ParameterSpace/Plots/BeataEpsSweep_n60.png", height = 45, width = 45, units = "mm", dpi = 400)
ggsave(gg_betaeps, file = "output/ParameterSpace/Plots/BeataEpsSweep_n60.png", height = 45, width = 45, units = "mm", dpi = 400)
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
p <- 1 #prob of interact
runs <- c("Sigma0.05-Epsilon0-Beta1.1",
"Sigma0-Epsilon0.1-Beta1.1")
run_names <- c("Fixed", "Social")
run = 2
files <- list.files(paste0("output/Rdata/_ProcessedData/Graphs/", runs[run], "/"), full.names = TRUE)
soc_networks <- list()
for (file in 1:length(files)) {
load(files[file])
soc_networks[[file]] <- listed_data
}
# Load threshold matrices
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", runs[run], "/"), full.names = TRUE)
thresh_data <- list()
for (file in 1:length(files)) {
load(files[file])
thresh_data[[file]] <- listed_data
}
runs
i = 20
graphs <- soc_networks[[i]]
replicates <- length(graphs)
j = 1
this_graph <- graphs[[j]]
diag(this_graph) <- 0
g <- graph_from_adjacency_matrix(this_graph, mode = "undirected", weighted = TRUE)
g_clust <- cluster_fast_greedy(g, weights = E(g)$weight)
g_clust
mod <- modularity(g_clust)
mod
# For each each compute interaction matrix
# Get graph and make adjacency matrix
size_graph <- lapply(1:length(graphs), function(j) {
# Format: set diagonal, rescale, and make adj matrix
this_graph <- graphs[[j]]
diag(this_graph) <- 0
g <- graph_from_adjacency_matrix(this_graph, mode = "undirected", weighted = TRUE)
g_clust <- cluster_fast_greedy(g, weights = E(g)$weight)
# g_membership <- membership(g_clust)
# mod <- modularity(g, membership = g_membership, weights = E(g)$weight)
mod <- modularity(g_clust)
clust_coeff <- transitivity(graph = g, type = "weighted", weights = E(g)$weight)
# return
replicate_row <- data.frame(n = nrow(this_graph),
Modularity = mod,
ClustCoeff =  mean(clust_coeff, na.rm = TRUE))
return(replicate_row)
})
size_data <- do.call("rbind", size_graph)
View(size_data)
i = 10
graphs <- soc_networks[[i]]
replicates <- length(graphs)
# For each each compute interaction matrix
# Get graph and make adjacency matrix
size_graph <- lapply(1:length(graphs), function(j) {
# Format: set diagonal, rescale, and make adj matrix
this_graph <- graphs[[j]]
diag(this_graph) <- 0
g <- graph_from_adjacency_matrix(this_graph, mode = "undirected", weighted = TRUE)
g_clust <- cluster_fast_greedy(g, weights = E(g)$weight)
# g_membership <- membership(g_clust)
# mod <- modularity(g, membership = g_membership, weights = E(g)$weight)
mod <- modularity(g_clust)
clust_coeff <- transitivity(graph = g, type = "weighted", weights = E(g)$weight)
# return
replicate_row <- data.frame(n = nrow(this_graph),
Modularity = mod,
ClustCoeff =  mean(clust_coeff, na.rm = TRUE))
return(replicate_row)
})
size_data <- do.call("rbind", size_graph)
View(size_graph)
View(size_data)
run = 1
files <- list.files(paste0("output/Rdata/_ProcessedData/Graphs/", runs[run], "/"), full.names = TRUE)
soc_networks <- list()
for (file in 1:length(files)) {
load(files[file])
soc_networks[[file]] <- listed_data
}
# Load threshold matrices
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", runs[run], "/"), full.names = TRUE)
thresh_data <- list()
for (file in 1:length(files)) {
load(files[file])
thresh_data[[file]] <- listed_data
}
i = 2
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
# For each each compute interaction matrix
# Get graph and make adjacency matrix
size_graph <- lapply(1:length(graphs), function(j) {
# Format: set diagonal, rescale, and make adj matrix
this_graph <- graphs[[j]]
diag(this_graph) <- 0
g <- graph_from_adjacency_matrix(this_graph, mode = "undirected", weighted = TRUE)
g_clust <- cluster_fast_greedy(g, weights = E(g)$weight)
# g_membership <- membership(g_clust)
# mod <- modularity(g, membership = g_membership, weights = E(g)$weight)
mod <- modularity(g_clust)
clust_coeff <- transitivity(graph = g, type = "weighted", weights = E(g)$weight)
# return
replicate_row <- data.frame(n = nrow(this_graph),
Modularity = mod,
ClustCoeff =  mean(clust_coeff, na.rm = TRUE))
return(replicate_row)
})
size_data <- do.call("rbind", size_graph)
View(size_data)
hist(size_data$Modularity)
