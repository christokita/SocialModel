Model = run_names[run])
# Return
print(paste0(run_names[run], ": ", dimensions[1]))
return(edgelist_sig)
})
# Bind and return
interaction_info <- do.call("rbind", interaction_info)
return(interaction_info)
})
# Bind
interaction_data <- do.call('rbind', interaction_rates)
# Graph
gg_interactions <- ggplot(interaction_data, aes(x = n, y = PercentNonRandom,
colour = Model, group = Model, fill = Model)) +
geom_line(size = 0.4) +
geom_point(size = 0.8, shape = 21) +
scale_y_continuous(limits = c(0, 1)) +
scale_color_manual(name = "Threshold type",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold type",
values = c("#ffffff", "#4d4d4d")) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab("% Non-random interactions") +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.position = "none")
gg_interactions
ggsave(gg_interactions, filename = "Output/Networks/NetworkMetrics/PercentNonRandomInteractions.png",
height = 45, width = 45, units = "mm", dpi = 400)
ggsave(gg_interactions, filename = "Output/Networks/NetworkMetrics/PercentNonRandomInteractions.svg",
height = 45, width = 45, units = "mm")
##########################################################
# Assortivity
##########################################################
runs <- c("Sigma0.05-Epsilon0-Beta1.1",
"Sigma0-Epsilon0.1-Beta1.1")
run_names <- c("Fixed", "Social")
###################
# Correlation of Average interaction partner
###################
network_correlations <- lapply(1:length(runs), function(run) {
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Graphs/", runs[run], "/"), full.names = TRUE)
soc_networks <- list()
for (file in 1:length(files)) {
load(files[file])
soc_networks[[file]] <- listed_data
}
# Load threshold matrices
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", runs[run], "/"), full.names = TRUE)
thresh_data <- list()
for (file in 1:length(files)) {
load(files[file])
thresh_data[[file]] <- listed_data
}
# Loop through individual graphs
interaction_info <- lapply(1:length(soc_networks), function(i) {
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
# For each each compute interaction matrix
# Get graph and make adjacency matrix
size_graph <- lapply(1:length(graphs), function(j) {
# Get graph and calculate threshold differences
this_graph <- graphs[[j]]
diag(this_graph) <- NA
thresh <- as.data.frame(thresh_data[[i]][j])
thresh$ThreshBias <- thresh$Thresh1 - thresh$Thresh2
# Multiply to get bias weighted by interaction frequenchy
social_interaction <- matrix(data = rep(NA, length(this_graph)), ncol = ncol(this_graph))
for (i in 1:nrow(this_graph)) {
# social_interaction[i, ] <- this_graph[i,] *  thresh$ThreshBias
social_interaction[i, ] <- (this_graph[i,] / sum(this_graph[i,], na.rm = T)) *  thresh$ThreshBias
}
effective_interactions <- rowSums(social_interaction, na.rm = T)
to_retun <- data.frame(n = nrow(this_graph), Correlation = cor(effective_interactions, thresh$ThreshBias))
# return
return(to_retun)
})
#Calculate baseline probability of interaction
size_graph <- do.call("rbind", size_graph)
})
# Bind and return
interaction_info <- do.call("rbind", interaction_info)
interaction_info$Model <- run_names[run]
return(interaction_info)
})
# Bind
correlation_data <- do.call('rbind', network_correlations)
correlation_data <- correlation_data %>%
group_by(Model, n) %>%
summarise(Corr_mean = mean(Correlation),
Corr_SE = sd(Correlation)/length(Correlation))
# Plot
gg_correlation <- ggplot(data = correlation_data, aes(x = n, y = Corr_mean,
colour = Model, group = Model, fill = Model)) +
geom_hline(yintercept = 0, color = "black", size = 0.3) +
geom_line(size = 0.4) +
geom_errorbar(aes(ymin = Corr_mean - Corr_SE, ymax = Corr_mean + Corr_SE),
width = 0) +
geom_point(size = 0.8, shape = 21) +
scale_color_manual(name = "Threshold",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold",
values = c("#ffffff", "#4d4d4d")) +
scale_linetype_manual(name = "Threshold",
values = c("dotted", "solid")) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab("Interaction partner correlation") +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.position = c(0.8, 0.7),
legend.key.height = unit(0.5, "line"),
legend.background = element_blank())
gg_correlation
ggsave(gg_correlation, filename = "Output/Networks/NetworkMetrics/CorrelationInNetwork.png",
height = 45, width = 45, units = "mm", dpi = 400)
ggsave(gg_correlation, filename = "Output/Networks/NetworkMetrics/CorrelationInNetwork.svg",
height = 45, width = 45, units = "mm")
log0.013894115
log(0.013894115)
log(0.003511169)
# Plot
gg_correlation <- ggplot(data = correlation_data, aes(x = n, y = Corr_mean,
colour = Model, group = Model, fill = Model)) +
geom_hline(yintercept = 0, color = "black", size = 0.3, linetype = "dotted") +
geom_line(size = 0.4) +
geom_errorbar(aes(ymin = Corr_mean - Corr_SE, ymax = Corr_mean + Corr_SE),
width = 0) +
geom_point(size = 0.8, shape = 21) +
scale_color_manual(name = "Threshold",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold",
values = c("#ffffff", "#4d4d4d")) +
scale_linetype_manual(name = "Threshold",
values = c("dotted", "solid")) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab("Interaction partner correlation") +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.position = c(0.8, 0.7),
legend.key.height = unit(0.5, "line"),
legend.background = element_blank())
gg_correlation
ggsave(gg_correlation, filename = "Output/Networks/NetworkMetrics/CorrelationInNetwork.png",
height = 45, width = 45, units = "mm", dpi = 400)
ggsave(gg_correlation, filename = "Output/Networks/NetworkMetrics/CorrelationInNetwork.svg",
height = 45, width = 45, units = "mm")
ggsave(gg_correlation, filename = "Output/Networks/NetworkMetrics/CorrelationInNetwork.svg",
height = 46, width = 46, units = "mm")
ggsave(gg_correlation, filename = "Output/Networks/NetworkMetrics/CorrelationInNetwork.svg",
height = 45.5, width = 45.5, units = "mm")
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
# Load data
load("output/Rdata/_ProcessedData/Entropy/Sigma0-Epsilon0.1-Beta1.1.Rdata")
compiled_data$Model <- "Social"
entropy_data <- compiled_data
rm(compiled_data)
load("output/Rdata/_ProcessedData/Entropy/Sigma0.05-Epsilon0-Beta1.1.Rdata")
compiled_data$Model <- "Fixed"
entropy_data <- rbind(entropy_data, compiled_data)
rm(compiled_data)
gg_solo <- ggplot(data = entropy, aes(x = n, colour = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 1) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(values = "#636363",
name = expression("Interaction bias"(Beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3),
axis.line = element_line(size = 0.3),
aspect.ratio = 1)
gg_solo <- ggplot(data = entropy_data, aes(x = n, colour = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 1) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(values = "#636363",
name = expression("Interaction bias"(Beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3),
axis.line = element_line(size = 0.3),
aspect.ratio = 1)
gg_solo
# Calculate mean and SE
entropy <- entropy_data %>%
group_by(Model, n) %>%
summarise(Mean = mean(Dind),
SE = sd(Dind) / sqrt(length(Dind)))
gg_solo <- ggplot(data = entropy_data, aes(x = n, colour = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 1) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(values = "#636363",
name = expression("Interaction bias"(Beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3),
axis.line = element_line(size = 0.3),
aspect.ratio = 1)
gg_solo
gg_solo <- ggplot(data = entropy, aes(x = n, colour = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 1) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(values = "#636363",
name = expression("Interaction bias"(Beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3),
axis.line = element_line(size = 0.3),
aspect.ratio = 1)
gg_solo
gg_solo <- ggplot(data = entropy, aes(x = n, colour = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 1) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold",
values = c("#ffffff", "#4d4d4d")) +
scale_linetype_manual(name = "Threshold",
values = c("dotted", "solid")) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3),
axis.line = element_line(size = 0.3),
aspect.ratio = 1)
gg_solo
ggsave(gg_solo, filename = "output/SpecializationPlots/Beta1.1_withfixed.svg", width = 60.5, height = 60.5, units = "mm")
ggsave(gg_solo, filename = "output/SpecializationPlots/Beta1.1withfixed.png", width = 45, height = 45, units = "mm", dpi = 400)
gg_solo <- ggplot(data = entropy, aes(x = n, colour = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Corr_mean - Corr_SE, ymax = Corr_mean + Corr_SE),
width = 0) +
geom_point(size = 1,
shape = 21) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold",
values = c("#ffffff", "#4d4d4d")) +
scale_linetype_manual(name = "Threshold",
values = c("dotted", "solid")) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3),
axis.line = element_line(size = 0.3),
aspect.ratio = 1)
gg_solo
gg_solo <- ggplot(data = entropy, aes(x = n, colour = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 1, shape = 21) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold",
values = c("#ffffff", "#4d4d4d")) +
scale_linetype_manual(name = "Threshold",
values = c("dotted", "solid")) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3),
axis.line = element_line(size = 0.3),
aspect.ratio = 1)
gg_solo
gg_solo <- ggplot(data = entropy, aes(x = n, colour = Model, fill = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 1, shape = 21) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold",
values = c("#ffffff", "#4d4d4d")) +
scale_linetype_manual(name = "Threshold",
values = c("dotted", "solid")) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3),
axis.line = element_line(size = 0.3),
aspect.ratio = 1)
gg_solo
ggsave(gg_solo, filename = "output/SpecializationPlots/Beta1.1_withfixed.svg", width = 60.5, height = 60.5, units = "mm")
ggsave(gg_solo, filename = "output/SpecializationPlots/Beta1.1withfixed.png", width = 45, height = 45, units = "mm", dpi = 400)
directory_path <- "output/Rdata/SigmaNaN-Epsilon0-Beta1.1-0Mean/"
output_path <- "output/Rdata/_ProcessedData/"
run_info <- gsub("^.*(Sigma.*)/$", "\\1", directory_path, perl = TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/2b_Process_ClusterSimData.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/2b_Process_ClusterSimData.R', echo=TRUE)
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
# Load data
load("output/Rdata/_ProcessedData/Entropy/SigmaNaN-Epsilon0-Beta1.1-0Mean.Rdata")
compiled_data$Model <- "Social"
entropy_data <- compiled_data
rm(compiled_data)
load("output/Rdata/_ProcessedData/Entropy/Sigma0.05-Epsilon0-Beta1.1.Rdata")
compiled_data$Model <- "Fixed"
entropy_data <- rbind(entropy_data, compiled_data)
rm(compiled_data)
# Calculate mean and SE
entropy <- entropy_data %>%
group_by(Model, n) %>%
summarise(Mean = mean(Dind),
SE = sd(Dind) / sqrt(length(Dind)))
# Plot
gg_solo <- ggplot(data = entropy, aes(x = n, colour = Model, fill = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 1, shape = 21) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(name = "Threshold",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold",
values = c("#ffffff", "#4d4d4d")) +
scale_linetype_manual(name = "Threshold",
values = c("dotted", "solid")) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3),
axis.line = element_line(size = 0.3),
aspect.ratio = 1)
gg_solo
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
####################
# Load data
####################
load("output/Rdata/_ProcessedData/TaskDist/SigmaNaN-Epsilon0-Beta1.1-0Mean.Rdata")
####################
# Process data
####################
cumulative_dist <- compiled_data %>%
as.data.frame() %>%
group_by(n, sim, chunk) %>%
mutate(Id = 1:length(Task1)) %>%
arrange(Task1, Id, .by_group = TRUE) %>%
mutate(Cumu_task1 = Task1 / sum(Task1),
Cumu_task2 = Task2 / sum(Task2),
Rank_task1 = 1:length(Task1)) %>%
mutate(Cumu_task1 = cumsum(Cumu_task1),
Rank_task1Cum = Rank_task1/length(Rank_task1)) %>%
arrange(Task2, Id, .by_group = TRUE) %>%
mutate(Rank_task2 = 1:length(Task1),
Cumu_task2 = cumsum(Cumu_task2),
Rank_task2Cum = Rank_task2/length(Rank_task2))
# Summarise
cumulative_summary <- cumulative_dist %>%
group_by(n, Rank_task1Cum) %>%
summarise(mean_cum = mean(Cumu_task1),
SE_cum = sd(Cumu_task1) / sqrt(length(Cumu_task1)))
####################
# Plot
####################
gg_cumsum <- ggplot(data = cumulative_summary, aes(x = Rank_task1Cum, y = mean_cum)) +
geom_abline(slope = 1, intercept = 0, size = 0.1, color = "#737373") +
geom_errorbar(aes(ymax = mean_cum + SE_cum , ymin = mean_cum - SE_cum), width = 0) +
geom_point(color = "#045a8d", size = 0.5) +
theme_ctokita() +
facet_wrap(~n)
gg_cumsum
View(cumulative_dist)
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
library(viridis)
library(ggridges)
p <- 1 #prob of interact
run <- "SigmaNaN-Epsilon0.1-Beta1.1"
####################
# Load and process data
####################
# Load Thresholds
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", run, "/"), full.names = TRUE)
# Seed internal thresholds
threshMat <- as.data.frame(matrix(rep(0, n *m), ncol = m))
n = 10
m =2
# Seed internal thresholds
threshMat <- as.data.frame(matrix(rep(0, n *m), ncol = m))
threshMat
colnames(thresh_mat) <- paste0("Thresh", 1:length(threshold_means))
rownames(thresh_mat) <- paste0("v-", 1:n)
# Seed internal thresholds
threshMat <- as.data.frame(matrix(rep(0, n *m), ncol = m))
colnames(threshMat) <- paste0("Thresh", 1:length(threshold_means))
rownames(threshMat) <- paste0("v-", 1:n)
colnames(threshMat) <- paste0("Thresh", 1:m)
rownames(threshMat) <- paste0("v-", 1:n)
threshMat
