####################
# Set global variables
####################
# Initial paramters: Free to change
# Base parameters
Ns             <- c(5, 10, 20, 30, 50, 70, 100) #vector of number of individuals to simulate
m              <- 2 #number of tasks
gens           <- 10000 #number of generations to run simulation
corrStep       <- 200 #number of time steps for calculation of correlation
reps           <- 30 #number of replications per simulation (for ensemble)
# Threshold Parameters
ThreshM        <- rep(10, m) #population threshold means
ThreshSD       <- ThreshM * 0.01 #population threshold standard deviations
InitialStim    <- rep(0, m) #intital vector of stimuli
deltas         <- rep(0.6, m) #vector of stimuli increase rates
alpha          <- m #efficiency of task performance
quitP          <- 0.2 #probability of quitting task once active
# Social Network Parameters
p              <- 0.1 #probability of interacting with individual in other states
q              <- 1.1 #probability of interacting with individual in same state relative to others
####################
# Run simulation multiple times
####################
# Prep meta-lists for collection of group size simulations
groups_taskDist  <- list()
groups_taskCorr  <- list()
groups_taskStep  <- list()
groups_taskTally <- list()
groups_stim      <- list()
groups_thresh    <- list()
groups_entropy   <- list()
groups_graphs    <- list()
groups_specialization <- data.frame(NULL)
# Loop through group sizes
for (i in 1:length(Ns)) {
# Set group size
n <- Ns[i]
# Prep lists for collection of simulation outputs
ens_taskDist  <- list()
ens_taskCorr  <- list()
ens_taskStep  <- list()
ens_taskTally <- list()
ens_entropy   <- list()
ens_stim      <- list()
ens_thresh    <- list()
ens_graphs    <- list()
# Run Simulations
for (sim in 1:reps) {
####################
# Seed structures and intial matrices
####################
# Set initial probability matrix (P_g)
P_g <- matrix(data = rep(0, n * m), ncol = m)
# Seed task (external) stimuli
stimMat <- seedStimuls(InitialSVector = InitialStim,
gens = gens)
# Seed internal thresholds
threshMat <- seedThresholds(n = n,
m = m,
ThresholdMeans = ThreshM,
ThresholdSDs = ThreshSD)
# Start task performance
X_g <- matrix(data = rep(0, length(P_g)), ncol = ncol(P_g))
# Create cumulative task performance matrix
X_tot <- X_g
# Create cumulative adjacency matrix
g_tot <-  matrix(data = rep(0, n * n), ncol = n)
colnames(g_tot) <- paste0("v-", 1:n)
rownames(g_tot) <- paste0("v-", 1:n)
# Prep correlation step matrix
X_prev <- matrix(data = rep(0, n * m), ncol = m)
X_prevTot <- matrix(data = rep(0, n * m), ncol = m)
taskCorr <- list()
taskStep <- list()
taskTally <- list()
taskOverTime  <- matrix(nrow = 0, ncol = n)
####################
# Simulate
####################
# Run simulation
for (t in 1:gens) {
# Update stimuli
for (j in 1:ncol(stimMat)) {
# update stim
stimMat[t + 1, j] <- globalStimUpdate(stimulus = stimMat[t, j],
delta = deltas[j],
alpha = alpha,
Ni = sum(X_g[ , j]),
n = n)
}
# Update social network
g_adj <- temporalNetwork(X_sub_g = X_g,
p = p,
bias = q)
g_tot <- g_tot + g_adj
# Calculate task demand based on global stimuli
P_g <- calcThresholdDetermMat(TimeStep = t + 1, # first row is generation 0
ThresholdMatrix = threshMat,
StimulusMatrix = stimMat)
# Update task performance
X_g <- updateTaskPerformance(P_sub_g    = P_g,
TaskMat    = X_g,
QuitProb   = quitP)
# Note which task is being peformed
taskPerf <- matrix(nrow = 1, ncol = n)
for (i in 1:nrow(X_g)) {
task <- unname(which(X_g[i, ] == 1))
if (length(task) == 0) {
task <- 0
}
taskPerf[i] <- task
}
colnames(taskPerf) <- row.names(X_g)
taskOverTime <- rbind(taskOverTime, taskPerf)
# Capture current task performance tally
tally <- matrix(c(t, colSums(X_g)), ncol = ncol(X_g) + 1)
colnames(tally) <- c("t", colnames(X_g))
tally <- transform(tally, Inactive = n - sum(X_g), n = n, replicate = sim)
taskTally[[t]] <- tally
# Update total task performance profile
X_tot <- X_tot + X_g
# Create time step for correlation
if (t %% corrStep == 0) {
# Get tasks performance in correlation step
X_step <- X_tot - X_prevTot
# Add to ensemble list of task steps
taskStep[[t / corrStep]] <- X_step
# Calculate rank correlation if it is not the first step
if(sum(X_prev) != 0) {
# Normalize
stepNorm <- X_step / rowSums(X_step)
prevNorm <- X_prev / rowSums(X_prev)
# Calculate ranks
step_ranks <- calculateTaskRank(TaskStepMat = X_step)
prev_ranks <- calculateTaskRank(TaskStepMat = X_prev)
# Calculate Correlation
rankCorr <- cor(prev_ranks, step_ranks, method = "spearman")
# Put in list
taskCorr[[(t / corrStep) - 1]] <- diag(rankCorr)
names(taskCorr)[(t / corrStep) - 1] <- paste0("Gen", t)
}
# Update previous step total matrix
X_prevTot <- X_tot
# Update previous step total matrix
X_prev <- X_step
}
}
# Calculate specialization of task performance
# from Gautrais et al. (2002)
for (col in 1:ncol(taskOverTime)) {
# Grab column of individual
t_prof <- taskOverTime[ , col ]
# Remove inactivity
t_prof <- paste(t_prof, collapse = "")
# Calculate transitions
t_prof <- gsub("1+", "1", t_prof)
t_prof <- gsub("2+", "2", t_prof)
t_prof <- gsub("0+", "", t_prof)
t_prof <- as.numeric(unlist(strsplit(as.character(t_prof), "")))
transitions <- lapply(2:length(t_prof), function(entry) {
a <- t_prof[entry] != t_prof[entry - 1]
})
C_i <- sum(unlist(transitions))
C_i <- C_i / (length(t_prof) - 1)
# Calulate specialization
F_i <- 1 - m * C_i
to_return <- data.frame(individual = paste0("v-", col),
n = n,
replicate = sim,
TransSpec = F_i)
groups_specialization <- rbind(groups_specialization, to_return)
}
# Calculate Entropy
entropy <- mutualEntropy(TotalStateMat = X_tot)
entropy <- transform(entropy, n = n, replicate = sim)
# Calculate total task distribution
# totalTaskDist <- X_tot / rowSums(X_tot)
totalTaskDist <- X_tot / gens
totalTaskDist <- transform(totalTaskDist, Inactive = gens - rowSums(X_tot), n = n, replicate = sim)
# Create tasktally table
taskTally <- do.call("rbind", taskTally)
# Create tasktally table
stimMat <- transform(stimMat, n = n, replicate = sim)
# Create tasktally table
taskCorr <- transform(taskCorr, replicate = sim)
# Add total task distributions, entropy values, and graphs to lists
ens_taskDist[[sim]]  <- totalTaskDist
ens_entropy[[sim]]   <- entropy
ens_taskCorr[[sim]]  <- taskCorr
ens_taskTally[[sim]] <- taskTally
ens_taskStep[[sim]]  <- taskStep
ens_stim[[sim]]      <- stimMat
ens_thresh[[sim]]    <- threshMat
ens_graphs[[sim]]    <- g_tot / gens
# Print simulation completed
print(paste0("DONE: N = ", n, ", Simulation ", sim))
}
# Calculate mean correlation for each n
runCorrs <- lapply(ens_taskCorr, function(x) {
# Unlist
runs <- do.call("rbind", x)
replicate <- runs[nrow(runs), ]
replicate <- unique(replicate)
runs <- runs[-nrow(runs), ]
# Calculate mean
runMean <- matrix(data = rep(NA, m), ncol =  m)
for (column in 1:m) {
runMean[ , column] <- mean(runs[ , column], na.rm = TRUE)
}
runMean <- cbind(runMean, replicate)
colnames(runMean) <- c(paste0("Task", 1:m), "replicate")
return(runMean)
})
runCorrs <- do.call("rbind", runCorrs)
runCorrs <- transform(runCorrs, n = n)
# Add to list of lists
groups_taskDist[[i]]  <- ens_taskDist
groups_taskCorr[[i]]  <- runCorrs
groups_taskStep[[i]]  <- ens_taskStep
groups_taskTally[[i]] <- ens_taskTally
groups_stim[[i]]      <- ens_stim
groups_thresh[[i]]    <- ens_thresh
groups_entropy[[i]]   <- ens_entropy
groups_graphs[[i]]    <- ens_graphs
}
# trim out correlations for group size 1
if(1 %in% Ns) {
groups_taskCorr <- groups_taskCorr[-1]
}
filename <- "Sigma001-FIXED-ConnectP01-Bias1.1"
save(groups_entropy, groups_stim, groups_taskCorr, groups_taskDist, groups_graphs,
groups_taskStep, groups_taskTally, groups_specialization, groups_thresh,
file = paste0("output/Rdata/", filename, ".Rdata"))
# qplot(threshMat[,1], threshMat[,2]) +
#   scale_color_gradient2(low = "red", mid = "yellow", high = "blue", midpoint = (max(threshMat) + min(threshMat)) / 2) +
#   theme_bw()
# qplot(X_tot[,1], X_tot[,2], col = X_tot[,3]) +
#   scale_color_gradient2(low = "purple", mid = "grey", high = "green", midpoint = (max(X_tot) + min(X_tot)) / 2) +
#   theme_bw()
#
# plot(stimMat[,1], type = "l")
rm(list = ls())
source("scripts/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
filename <- "Sigma001-Eps001-Phi001-ConnectP01-Bias1.1"
####################
# Compare entropies
####################
# Load social
load("output/Rdata/Sigma001-Eps001-Phi001-ConnectP01-Bias1.1.Rdata")
entropy <- unlist(groups_entropy, recursive = FALSE)
entropy <- do.call("rbind", entropy)  %>%
mutate(set = paste(n, replicate, sep = "-"))%>%
select(-Dsym, -Dtask) %>%
filter(n != 1) %>%
group_by(n) %>%
summarise(Mean = mean(Dind),
SE = sd(Dind) / sqrt(length(Dind))) %>%
mutate(Model = "Social")
# Load non-social
load("output/Rdata/Sigma001-FIXED-ConnectP01-Bias1.1.Rdata")
entropy1 <- unlist(groups_entropy, recursive = FALSE)
entropy1 <- do.call("rbind", entropy1)  %>%
mutate(set = paste(n, replicate, sep = "-"))%>%
select(-Dsym, -Dtask) %>%
filter(n != 1) %>%
group_by(n) %>%
summarise(Mean = mean(Dind),
SE = sd(Dind) / sqrt(length(Dind))) %>%
mutate(Model = "Fixed")
# Join
entropy <- rbind(entropy, entropy1)
gg_entropy <- ggplot(data = entropy, aes(x = n, group = Model)) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE, color = Model),
width = 0.7) +
geom_line(aes(y = Mean, color = Model, linetype = Model)) +
geom_point(aes(y = Mean, color = Model),
size = 1.5,
shape = 21) +
theme_classic() +
xlab("Group Size") +
ylab("DOL Entropy") +
scale_y_continuous(limits = c(0, 1),
breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = unique(entropy$n)) +
scale_color_manual(values = c("black", "mediumseagreen")) +
scale_linetype_manual(values = c("dashed", "solid")) +
theme(legend.position = "right",
legend.title = element_text(size = 7, face = "bold"),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0.1, r = 0.1, b = 0.1, l = 0.1, "cm"),
legend.text = element_text(size = 10),
axis.text = element_text(size = 8),
axis.title = element_text(size = 10),
axis.ticks = element_line(size = 0.5),
panel.grid = element_blank(),
strip.text = element_text(size = 8, face = "italic"),
strip.background = element_rect(fill = NA, colour = NA),
panel.spacing = unit(0.5, "cm"))
gg_entropy
ggsave(gg_entropy, file = paste0("output/SpecializationPlots/", filename, ".png"), height = 3, width = 3.5, units = "in", dpi = 800)
g <- unlist(groups_graphs, recursive = FALSE)
load("output/Rdata/Sigma001-Eps001-Phi001-ConnectP01-Bias1.1_SmallerGroups.Rdata")
load("output/Rdata/Sigma001-Eps001-Phi001-ConnectP01-Bias1.1.Rdata")
g <- unlist(groups_graphs, recursive = FALSE)
g <- g[[1]]
degree <- rowSums(g)
degree <- as.data.frame(degree)
degree$Id <- row.names(degree)
thresh <- threshMat %>%
as.data.frame(.) %>%
mutate(ThreshRatio = log(Thresh1 / Thresh2),
Id = row.names(.))
activity <- X_tot %>%
as.data.frame(.) %>%
mutate(ActRatio = log(Task1 / Task2),
ActTotal = Task1 + Task2,
Id = row.names(.))
mergedNodes <- merge(degree, thresh)
mergedNodes <- merge(mergedNodes, activity)
qplot(data = mergedNodes, x = ThreshRatio, y = degree, colour = ActTotal) +
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA))
X_tot <- unlist(groups_taskDist, recursive = FALSE)
X_tot <- X_tot[[1]]
View(X_tot)
activity <- X_tot %>%
as.data.frame(.) %>%
mutate(ActRatio = log(Task1 / Task2),
ActTotal = Task1 + Task2,
Id = row.names(.))
mergedNodes <- merge(degree, thresh)
mergedNodes <- merge(mergedNodes, activity)
qplot(data = mergedNodes, x = ThreshRatio, y = degree, colour = ActTotal) +
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA))
threshMat <- unlist(groups_thresh, recursive = FALSE)
threshMat <- threshMat[[1]]
thresh <- threshMat %>%
as.data.frame(.) %>%
mutate(ThreshRatio = log(Thresh1 / Thresh2),
Id = row.names(.))
X_tot <- unlist(groups_taskDist, recursive = FALSE)
X_tot <- X_tot[[1]]
activity <- X_tot %>%
as.data.frame(.) %>%
mutate(ActRatio = log(Task1 / Task2),
ActTotal = Task1 + Task2,
Id = row.names(.))
mergedNodes <- merge(degree, thresh)
mergedNodes <- merge(mergedNodes, activity)
qplot(data = mergedNodes, x = ThreshRatio, y = degree, colour = ActTotal) +
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA))
g <- unlist(groups_graphs, recursive = FALSE)
g <- g[[100]]
degree <- rowSums(g)
degree <- as.data.frame(degree)
degree$Id <- row.names(degree)
threshMat <- unlist(groups_thresh, recursive = FALSE)
threshMat <- threshMat[[100]]
thresh <- threshMat %>%
as.data.frame(.) %>%
mutate(ThreshRatio = log(Thresh1 / Thresh2),
Id = row.names(.))
X_tot <- unlist(groups_taskDist, recursive = FALSE)
X_tot <- X_tot[[100]]
activity <- X_tot %>%
as.data.frame(.) %>%
mutate(ActRatio = log(Task1 / Task2),
ActTotal = Task1 + Task2,
Id = row.names(.))
mergedNodes <- merge(degree, thresh)
mergedNodes <- merge(mergedNodes, activity)
qplot(data = mergedNodes, x = ThreshRatio, y = degree, colour = ActTotal) +
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA))
g <- unlist(groups_graphs, recursive = FALSE)
g
g <- unlist(groups_graphs, recursive = FALSE)
g <- g[[180]]
degree <- rowSums(g)
degree <- as.data.frame(degree)
degree$Id <- row.names(degree)
threshMat <- unlist(groups_thresh, recursive = FALSE)
threshMat <- threshMat[[180]]
thresh <- threshMat %>%
as.data.frame(.) %>%
mutate(ThreshRatio = log(Thresh1 / Thresh2),
Id = row.names(.))
X_tot <- unlist(groups_taskDist, recursive = FALSE)
X_tot <- X_tot[[180]]
activity <- X_tot %>%
as.data.frame(.) %>%
mutate(ActRatio = log(Task1 / Task2),
ActTotal = Task1 + Task2,
Id = row.names(.))
mergedNodes <- merge(degree, thresh)
mergedNodes <- merge(mergedNodes, activity)
qplot(data = mergedNodes, x = ThreshRatio, y = degree, colour = ActTotal) +
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA))
g <- unlist(groups_graphs, recursive = FALSE)
g <- g[[210]]
degree <- rowSums(g)
degree <- as.data.frame(degree)
degree$Id <- row.names(degree)
threshMat <- unlist(groups_thresh, recursive = FALSE)
threshMat <- threshMat[[210]]
thresh <- threshMat %>%
as.data.frame(.) %>%
mutate(ThreshRatio = log(Thresh1 / Thresh2),
Id = row.names(.))
X_tot <- unlist(groups_taskDist, recursive = FALSE)
X_tot <- X_tot[[210]]
activity <- X_tot %>%
as.data.frame(.) %>%
mutate(ActRatio = log(Task1 / Task2),
ActTotal = Task1 + Task2,
Id = row.names(.))
mergedNodes <- merge(degree, thresh)
mergedNodes <- merge(mergedNodes, activity)
qplot(data = mergedNodes, x = ThreshRatio, y = degree, colour = ActTotal) +
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA))
qplot(data = mergedNodes, x = ThreshRatio, y = ActTotal, colour = degree) +
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA))
number <- 150
g <- unlist(groups_graphs, recursive = FALSE)
g <- g[[number]]
degree <- rowSums(g)
degree <- as.data.frame(degree)
degree$Id <- row.names(degree)
threshMat <- unlist(groups_thresh, recursive = FALSE)
threshMat <- threshMat[[number]]
thresh <- threshMat %>%
as.data.frame(.) %>%
mutate(ThreshRatio = log(Thresh1 / Thresh2),
Id = row.names(.))
X_tot <- unlist(groups_taskDist, recursive = FALSE)
X_tot <- X_tot[[number]]
activity <- X_tot %>%
as.data.frame(.) %>%
mutate(ActRatio = log(Task1 / Task2),
ActTotal = Task1 + Task2,
Id = row.names(.))
mergedNodes <- merge(degree, thresh)
mergedNodes <- merge(mergedNodes, activity)
qplot(data = mergedNodes, x = ThreshRatio, y = ActTotal, colour = degree) +
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA))
number <- 60
g <- unlist(groups_graphs, recursive = FALSE)
g <- g[[number]]
degree <- rowSums(g)
degree <- as.data.frame(degree)
degree$Id <- row.names(degree)
threshMat <- unlist(groups_thresh, recursive = FALSE)
threshMat <- threshMat[[number]]
thresh <- threshMat %>%
as.data.frame(.) %>%
mutate(ThreshRatio = log(Thresh1 / Thresh2),
Id = row.names(.))
X_tot <- unlist(groups_taskDist, recursive = FALSE)
X_tot <- X_tot[[number]]
activity <- X_tot %>%
as.data.frame(.) %>%
mutate(ActRatio = log(Task1 / Task2),
ActTotal = Task1 + Task2,
Id = row.names(.))
mergedNodes <- merge(degree, thresh)
mergedNodes <- merge(mergedNodes, activity)
qplot(data = mergedNodes, x = ThreshRatio, y = ActTotal, colour = degree) +
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA))
number <- 180
g <- unlist(groups_graphs, recursive = FALSE)
g <- g[[number]]
degree <- rowSums(g)
degree <- as.data.frame(degree)
degree$Id <- row.names(degree)
threshMat <- unlist(groups_thresh, recursive = FALSE)
threshMat <- threshMat[[number]]
thresh <- threshMat %>%
as.data.frame(.) %>%
mutate(ThreshRatio = log(Thresh1 / Thresh2),
Id = row.names(.))
X_tot <- unlist(groups_taskDist, recursive = FALSE)
X_tot <- X_tot[[number]]
activity <- X_tot %>%
as.data.frame(.) %>%
mutate(ActRatio = log(Task1 / Task2),
ActTotal = Task1 + Task2,
Id = row.names(.))
mergedNodes <- merge(degree, thresh)
mergedNodes <- merge(mergedNodes, activity)
qplot(data = mergedNodes, x = ThreshRatio, y = ActTotal, colour = degree) +
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_rect(size = 1, fill = NA))
