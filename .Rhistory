plot.margin = unit(c(0.2, 0.35, 0.1, 0.1), "cm"))
ggsave(gg_threshtime, file = paste0("output/ThresholdTime/ThreshTime_", size, ".png"), width = 90, height = 40, units = "mm", dpi = 600)
gg_threshtime <- ggplot(data = group_data,
aes(x = time, y = threshold, fill = freq, colour = freq)) +
geom_tile() +
theme_bw() +
scale_fill_gradientn(colours = myPalette(100),
limits = c(0, 0.05),
oob = squish) +
scale_colour_gradientn(colours = myPalette(100),
limits = c(0, 0.05),
oob = squish) +
scale_x_continuous(name = "Time step",
breaks = seq(0, 50000, 10000),
label = comma,
expand = c(0, 0)) +
scale_y_continuous(name = "Threshold",
breaks = seq(0, 100, 25),
limits = c(0, 100),
expand = c(0, 0)) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.position = "none",
axis.ticks = element_line(size = 0.2, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
panel.grid = element_blank(),
plot.margin = unit(c(0.2, 0.35, 0.1, 0.1), "cm"))
ggsave(gg_threshtime, file = paste0("output/ThresholdTime/ThreshTime_", size, ".png"), width = 90, height = 40, units = "mm", dpi = 600)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/Analyze_ThreshTime.R', echo=TRUE)
group_sizes <- group_sizes[group_sizes %in% c("020", "025",
"030", "035",
"050")]
# Loop through group sizes
group_plots <- lapply(group_sizes, function(size) {
# Get subset of files that are for this group size
group_files <- files[grep(paste0(".*/", size, "-[0-9]+\\.Rdata"), files)]
# Loop through group files
group_data <- lapply(group_files, function(file) {
load(file)
print(paste("Loaded:", file))
# Loop through replicates and format
replicates <- lapply(data, function(replicate) {
replicate <- replicate %>%
select(t, Threshold)
return(replicate)
})
replicates <- do.call('rbind', replicates)
replicates <- replicates %>%
group_by(t) %>%
mutate(threshold = as.integer(as.character(cut(Threshold,
breaks = c(-Inf, seq(0, 100, 0.5)),
labels = seq(0, 100, 0.5))))) %>%
group_by(threshold) %>%
mutate(time = as.integer(as.character(cut(t,
breaks = c(seq(0, 50000, 250), Inf),
labels = seq(0, 50000, 250),
right = FALSE)))) %>%
group_by(time, threshold) %>%
summarise(count = length(threshold))
return(replicates)
})
# Bind
group_data <- do.call('rbind', group_data)
group_data <- group_data %>%
group_by(time, threshold) %>%
summarise(count = sum(count))
group_data$freq <- group_data$count/max(group_data$count)
# Plot
myPalette <- colorRampPalette(brewer.pal(9, "PuBu"))
gg_threshtime <- ggplot(data = group_data,
aes(x = time, y = threshold, fill = freq, colour = freq)) +
geom_tile() +
theme_bw() +
scale_fill_gradientn(colours = myPalette(100),
limits = c(0, 0.05),
oob = squish) +
scale_colour_gradientn(colours = myPalette(100),
limits = c(0, 0.05),
oob = squish) +
scale_x_continuous(name = "Time step",
breaks = seq(0, 50000, 10000),
label = comma,
expand = c(0, 0)) +
scale_y_continuous(name = "Threshold",
breaks = seq(0, 100, 25),
limits = c(0, 100),
expand = c(0, 0)) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.position = "none",
axis.ticks = element_line(size = 0.2, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
panel.grid = element_blank(),
plot.margin = unit(c(0.2, 0.35, 0.1, 0.1), "cm"))
ggsave(gg_threshtime, file = paste0("output/ThresholdTime/ThreshTime_", size, ".png"), width = 90, height = 40, units = "mm", dpi = 600)
# smoothScatter(x = group_data$t, y = group_data$Threshold,
#               ylim = c(0, 100))
# plot(hexbin(x = group_data$t, y = group_data$Threshold, xbins = 30))
})
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/2b_Process_ClusterSimData.R', echo=TRUE)
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
####################
# Average change in stim levels: beginning to end
####################
files <- list.files("output/Rdata/_ProcessedData/Stim/Sigma0-Epsilon0.1-Beta1.1_P0.5//", full.names = TRUE)
stim_data <- lapply(files, function(file) {
# Load group size data
load(file)
n <- as.numeric(gsub(".*/([0-9]+)\\.Rdata", "\\1", file, perl = T))
print(paste("Loaded: Group Size", n))
# Summarise within each replicate
rep_data <- lapply(listed_data, function(replicate) {
replicate <- as.data.frame(replicate)
replicate <- replicate[-1, ] #remove time step 0
replicate$sTotal <- replicate$s1 + replicate$s2
# Grab first and last 1000 time steps
begin <- head(replicate, 1000)
end <- tail(replicate, 1000)
# Summarise
begin <- begin %>%
summarise(s1 = mean(s1),
s2 = mean(s2),
sTotal = mean(sTotal))
end <- end %>%
summarise(s1 = mean(s1),
s2 = mean(s2),
sTotal = mean(sTotal))
diff <- end - begin
return(diff)
})
rep_data <- do.call('rbind', rep_data)
# Combine all stim data
all_stim <- c(rep_data$s1, rep_data$s2)
# Calculate statistics and return
to_return <- data.frame(n = n,
sMean = mean(rep_data$sTotal),
sSD = sd(rep_data$sTotal),
sSE = sd(rep_data$sTotal)/sqrt(nrow(rep_data)))
return(to_return)
})
# Bind
stim_data <- do.call("rbind", stim_data)
####################
# Plot
####################
gg_stimdiff <- ggplot(stim_data, aes(x = n, y = sMean)) +
geom_errorbar(aes(ymin = sMean - sSD, ymax = sMean + sSD),
size = 0.3,
width = 0) +
geom_point(size = 0.8) +
theme_classic() +
ylab("Change in Total Stim. Level") +
scale_x_continuous(breaks = seq(0, 100, 20)) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_stimdiff
ggsave("output/StimLevels/ChangeInStimLevels_P0.5.png", width = 45, height = 45, units = 'mm', dpi = 800)
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
####################
# Load Data: epsilon
####################
directory <- "output/Rdata/GroupSizeBetaSweep_Sigma0-Epsilon0.1/"
# List files
files <- list.files(directory, full.names = TRUE)
for (file in files) {
load(file)
epsilon <- as.numeric(gsub(".*epsilon([\\.0-9]+).Rdata", "\\1", file, perl = TRUE))
entropy_sum$epsilon <- epsilon
if (!exists("entropy")) {
entropy <- entropy_sum
} else {
entropy <- rbind(entropy, entropy_sum)
}
}
warnings
warnings()
View(entropy)
####################
# Load Data: beta
####################
directory <- "output/Rdata/_GroupSizeBetaSweep_Sigma0-Epsilon0.1/"
# List files
files <- list.files(directory, full.names = TRUE)
for (file in files) {
load(file)
if (!exists("entropy")) {
entropy <- entropy_sum
} else {
entropy <- rbind(entropy, entropy_sum)
}
}
View(entropy)
rm(entropy)
for (file in files) {
load(file)
if (!exists("entropy")) {
entropy <- entropy_sum
} else {
entropy <- rbind(entropy, entropy_sum)
}
}
View(entropy_sum)
####################
# Load Data: beta
####################
directory <- "output/Rdata/_GroupSizeBetaSweep_Sigma0-Epsilon0.1/"
# List files
files <- list.files(directory, full.names = TRUE)
for (file in files) {
load(file)
if (!exists("entropy")) {
entropy <- entropy_sum
} else {
entropy <- rbind(entropy, entropy_sum)
}
}
##########################################################################
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
####################
# Load Data: beta
####################
directory <- "output/Rdata/_GroupSizeBetaSweep_Sigma0-Epsilon0.1/"
####################
# Load Data: beta
####################
directory <- "output/Rdata/GroupSizeBetaSweep_Sigma0-Epsilon0.1/"
# List files
files <- list.files(directory, full.names = TRUE)
for (file in files) {
load(file)
if (!exists("entropy")) {
entropy <- entropy_sum
} else {
entropy <- rbind(entropy, entropy_sum)
}
}
View(entropy)
unique(entropy$beta)
entropy
pal <- brewer_pal("seq", "GnBu")
pal <- pal(9)
gg_beta <- ggplot(data = entropy, aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
geom_tile() +
theme_bw() +
scale_x_continuous(breaks = seq(0, 100, 20),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(1, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
# scale_fill_viridis(option = "plasma", direction = -1,
#                    name = "Behavioral\nspecialization",
#                    limits = c(0,1)) +
# scale_colour_viridis(option = "plasma",  direction = -1,
#                      name = "Behavioral\nspecialization",
#                      limits = c(0,1)) +
ylab(expression(beta)) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 1)
gg_beta
gg_beta <- ggplot(data = entropy, aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
geom_tile() +
theme_bw() +
scale_x_continuous(breaks = seq(0, 100, 20),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(0, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
# scale_fill_viridis(option = "plasma", direction = -1,
#                    name = "Behavioral\nspecialization",
#                    limits = c(0,1)) +
# scale_colour_viridis(option = "plasma",  direction = -1,
#                      name = "Behavioral\nspecialization",
#                      limits = c(0,1)) +
ylab(expression(beta)) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 1)
gg_beta
rm(list = ls())
####################
# Source necessary scripts/libraries
####################
source("scripts/util/__Util__MASTER.R")
library(parallel)
library(snowfall)
####################
# Set global variables
####################
# Initial paramters: Free to change
# Base parameters
Ns             <- seq(5, 100, 5) #vector of number of individuals to simulate
m              <- 2 #number of tasks
gens           <- 50000 #number of generations to run simulation
reps           <- 100 #number of replications per simulation (for ensemble)
# Threshold Parameters
ThreshM        <- rep(50, m) #population threshold means
ThreshSD       <- ThreshM * 0 #population threshold standard deviations
InitialStim    <- rep(0, m) #intital vector of stimuli
deltas         <- rep(0.8, m) #vector of stimuli increase rates
alpha          <- m #efficiency of task performance
quitP          <- 0.2 #probability of quitting task once active
# Social Network Parameters
p              <- 1 #baseline probablity of initiating an interaction per time step
epsilons       <- seq(-0.1, -0.025, 0.025) #relative weighting of social interactions for adjusting thresholds
beta           <- 1.1 #probability of interacting with individual in same state relative to others
####################
# Prep for Parallelization
####################
# Create parameter combinations for parallelization
run_in_parallel <- expand.grid(n = Ns, epsilon = epsilons)
run_in_parallel <- run_in_parallel %>%
arrange(n)
epsilons
# Check if there is already some runs done
files <- list.files(full_path)
# Create directory for depositing data
storage_path <- "/scratch/gpfs/ctokita/"
file_name <- paste0("GroupSizeEpsilonSweep_Sigma", ThreshSD[1], "-Beta", beta)
full_path <- paste0(storage_path, file_name, '/')
paste0(full_path,
"n",
str_pad(string = n, width =  3, pad =  "0"),
"-epsilon",
epsilon,
".Rdata")
n <- 10
paste0(full_path,
"n",
str_pad(string = n, width =  3, pad =  "0"),
"-epsilon",
epsilon,
".Rdata")
epsilon <- epsilons[1]
paste0(full_path,
"n",
str_pad(string = n, width =  3, pad =  "0"),
"-epsilon",
epsilon,
".Rdata")
storage_path <- "output/Rdata/"
file_name <- paste0("GroupSizeEpsilonSweep_Sigma", ThreshSD[1], "-Beta", beta)
full_path <- paste0(storage_path, file_name, '/')
# Check if there is already some runs done
files <- list.files(full_path)
completed_runs <- data.frame(n = as.numeric(gsub(x = files, "n([0-9]+)-.*", "\\1", perl = T)))
completed_runs$epsilon <- as.numeric(gsub(x = files, ".*-epsilon([\\.0-9]+).Rdata$", "\\1", perl = T))
run_in_parallel <- anti_join(run_in_parallel, completed_runs, by = c("n", "epsilon"))
View(run_in_parallel)
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
library(viridis)
library(rje)
p <- 1 #prob of interact
run <- "Sigma0-Epsilon0.1-Beta1.1"
####################
# Load and process data
####################
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh1Time/", run, "/"), full.names = TRUE)
# Get group sizes
group_sizes <- unique(gsub(".*/([0-9]+)-[0-9]+\\.Rdata", "\\1", files, perl = TRUE))
group_sizes <- group_sizes[group_sizes %in% c("020", "025",
"030", "035",
"050")]
# Get subset of files that are for this group size
group_files <- files[grep(paste0(".*/", size, "-[0-9]+\\.Rdata"), files)]
size <- "035"
# Get subset of files that are for this group size
group_files <- files[grep(paste0(".*/", size, "-[0-9]+\\.Rdata"), files)]
file <- group_files[1]
load(file)
print(paste("Loaded:", file))
# Loop through replicates and format
replicates <- lapply(data, function(replicate) {
replicate <- replicate %>%
select(t, Threshold)
return(replicate)
})
replicates <- do.call('rbind', replicates)
replicates <- replicates %>%
group_by(t) %>%
mutate(threshold = as.integer(as.character(cut(Threshold,
breaks = c(-Inf, seq(0, 100, 0.25)),
labels = seq(0, 100, 0.25))))) %>%
group_by(threshold) %>%
mutate(time = as.integer(as.character(cut(t,
breaks = c(seq(0, 50000, 100), Inf),
labels = seq(0, 50000, 100),
right = FALSE)))) %>%
group_by(time, threshold) %>%
summarise(count = length(threshold))
group_data <- replicates
all_values <- expand.grid(time = unique(group_data$time), threshold = unique(group_data$threshold))
group_data <- group_data %>%
group_by(time, threshold) %>%
summarise(count = sum(count)) %>%
merge(all_values, by = c("time", "threshold"), all = TRUE)
group_data$count[is.na(group_data$count)] <- 0
group_data$freq <- group_data$count/max(group_data$count)
# Plot
myPalette <- colorRampPalette(brewer.pal(9, "PuBu"))
myPalette <- viridis_pal(option = "A", direction = -1)
max_color <- 0.03
gg_threshtime <- ggplot(data = group_data,
aes(x = time, y = threshold, fill = freq, colour = freq)) +
geom_tile() +
theme_bw() +
scale_fill_gradientn(colours = c("white", "#EDD6CE", "#E2B3B6",
"#D298A6", "#BD7C9B", "#A1618C",
"#844C7D", "#5F3867", "#3C2650"),
limits = c(0, max_color),
oob = squish) +
scale_colour_gradientn(colours = c("white", "#EDD6CE", "#E2B3B6",
"#D298A6", "#BD7C9B", "#A1618C",
"#844C7D", "#5F3867", "#3C2650"),
limits = c(0, max_color),
oob = squish) +
# scale_fill_gradientn(colours = c("white", myPalette(100)),
#                      limits = c(0, max_color),
#                      oob = squish) +
# scale_colour_gradientn(colours =c("white", myPalette(100)),
#                        limits = c(0, max_color),
#                        oob = squish) +
scale_x_continuous(name = "Time step",
breaks = seq(0, 50000, 10000),
label = comma,
expand = c(0, 0)) +
scale_y_continuous(name = "Threshold",
breaks = seq(0, 100, 25),
limits = c(0, 100),
labels c("0", "", "50", "", "100"),
expand = c(0, 0)) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.position = "none",
axis.ticks = element_line(size = 0.2, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
panel.grid = element_blank(),
plot.margin = unit(c(0.2, 0.35, 0.1, 0.1), "cm"))
gg_threshtime <- ggplot(data = group_data,
aes(x = time, y = threshold, fill = freq, colour = freq)) +
geom_tile() +
theme_bw() +
scale_fill_gradientn(colours = c("white", "#EDD6CE", "#E2B3B6",
"#D298A6", "#BD7C9B", "#A1618C",
"#844C7D", "#5F3867", "#3C2650"),
limits = c(0, max_color),
oob = squish) +
scale_colour_gradientn(colours = c("white", "#EDD6CE", "#E2B3B6",
"#D298A6", "#BD7C9B", "#A1618C",
"#844C7D", "#5F3867", "#3C2650"),
limits = c(0, max_color),
oob = squish) +
# scale_fill_gradientn(colours = c("white", myPalette(100)),
#                      limits = c(0, max_color),
#                      oob = squish) +
# scale_colour_gradientn(colours =c("white", myPalette(100)),
#                        limits = c(0, max_color),
#                        oob = squish) +
scale_x_continuous(name = "Time step",
breaks = seq(0, 50000, 10000),
label = comma,
expand = c(0, 0)) +
scale_y_continuous(name = "Threshold",
breaks = seq(0, 100, 25),
limits = c(0, 100),
labels = c("0", "", "50", "", "100"),
expand = c(0, 0)) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.position = "none",
axis.ticks = element_line(size = 0.2, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
panel.grid = element_blank(),
plot.margin = unit(c(0.2, 0.35, 0.1, 0.1), "cm"))
ggsave(gg_threshtime, file = paste0("output/ThresholdTime/ThreshTime_", size, ".png"), width = 90, height = 20, units = "mm", dpi = 600)
ggsave(gg_threshtime, file = paste0("output/ThresholdTime/ThreshTime_", size, ".png"), width = 90, height = 25, units = "mm", dpi = 600)
ggsave(gg_threshtime, file = paste0("output/ThresholdTime/ThreshTime_", size, ".pdf"), width = 90, height = 25, units = "mm", dpi = 600)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/Analyze_ThreshTime.R', echo=TRUE)
