this_graph <- this_graph[ratio, ratio]
# return
return(this_graph)
})
size_graphs[1]
size_graph[1]
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
j = 1
# Format: set diagonal, rescale, and make adj matrix
this_graph <- graphs[[j]]
diag(this_graph) <- NA
dimensions <- dim(this_graph)
ind_interactions <- rowSums(this_graph, na.rm = TRUE)
total_interactions <- sum(this_graph, na.rm = TRUE)
ind_interactions
total_interactions
expected_graph <- lapply(ind_interactions, function(i) {
row <- i * ind_interactions
row <- row / total_interactions
})
expected_graph <- do.call("rbind", expected_graph)
expected_graph
diag(expected_graph) <- NA
expected_graph
this_graph
interactions_graphs[1]
interactions_graph[1]
interaction_graphs[1]
i = 1
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
j = 1
# Format: set diagonal, rescale, and make adj matrix
this_graph <- graphs[[j]]
this_graph
diag(this_graph) <- NA
dimensions <- dim(this_graph)
ind_interactions <- rowSums(this_graph, na.rm = TRUE)
ind_interactions
i = 20
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
j = 1
# Format: set diagonal, rescale, and make adj matrix
this_graph <- graphs[[j]]
diag(this_graph) <- NA
dimensions <- dim(this_graph)
ind_interactions <- rowSums(this_graph, na.rm = TRUE)
total_interactions <- sum(this_graph, na.rm = TRUE)
ind_interactions
ind_interactions
i = 1
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
j = 1
# Format: set diagonal, rescale, and make adj matrix
this_graph <- graphs[[j]]
diag(this_graph) <- NA
dimensions <- dim(this_graph)
ind_interactions <- rowSums(this_graph, na.rm = TRUE)
total_interactions <- sum(this_graph, na.rm = TRUE)
this_graph
this_graph * 10000
this_graph * 50000
# Format: set diagonal, rescale, and make adj matrix
this_graph <- graphs[[j]] * 50000
diag(this_graph) <- NA
dimensions <- dim(this_graph)
ind_interactions <- rowSums(this_graph, na.rm = TRUE)
total_interactions <- sum(this_graph, na.rm = TRUE)
ind_interactions
total_interactions
expected_graph <- lapply(ind_interactions, function(i) {
row <- i * ind_interactions
row <- row / total_interactions
})
expected_graph
?sample
test <- c("a", 'b', "c")
smple(test)
sample(test)
sample(test, prob = c(1, 1, 1))
sample(test, prob = c(1, 1, 1), x = 10000, replace = T)
sample(test, prob = c(1, 1, 1), size = 10000, replace = T)
look <- sample(test, prob = c(1, 1, 1), size = 10000, replace = T)
plot(look)
test <- c(-1, 0, 1)
look <- sample(test, prob = c(1, 1, 1), size = 10000, replace = T)
plot(look)
hist(look)
look <- sample(test, size = 10000, replace = T)
hist(look)
look <- sample(test, prob = c(2, 1, 1), size = 10000, replace = T)
hist(look)
look <- sample(test, prob = c(1.1, 1, 1), size = 10000, replace = T)
hist(look)
look <- sample(test, prob = c(1.1, 1, 1), size = 50000, replace = T)
hist(look)
look <- sample(seq(0, 10, 1), prob = c(1.1, rep(1, 9)), size = 50000, replace = T)
c(1.1, rep(1, 9))
length(c(1.1, rep(1, 9)))
seq(0, 10, 1)
length(seq(0, 10, 1))
look <- sample(seq(0, 10, 1), prob = c(1.1, rep(1, 10)), size = 50000, replace = T)
hist(look)
qplot(look) +geom_histogram()
look <- sample(seq(0, 30, 1), prob = c(1.1, rep(1, 30)), size = 100000, replace = T)
qplot(look) +geom_histogram()
seq(0, 30, 1)
prob = c(1.1, rep(1, 30))
prob
table(look)
plot(table(look))
hist(look)
look
table(look)
blah <- hist(look)
blah
look
unique(look)
look <- sample(seq(1, 30, 1), prob = c(1.1, rep(1, 30-1)), size = 100000, replace = T)
hist(look)
look <- sample(seq(1, 30, 1), prob = c(1.1, rep(1, 30-1)), size = 1000000, replace = T)
hist(look)
table(look)
hist(look)
qplot(look) +geom_histogram()
look <- sample(seq(1, 30, 1), prob = c(rep(1.1, 5), rep(1, 30-5)), size = 1000000, replace = T)
qplot(look) +geom_histogram()
look <- sample(seq(1, 30, 1), prob = c(rep(1.1, 10), rep(1, 30-10)), size = 1000000, replace = T)
qplot(look) +geom_histogram()
look <- sample(seq(1, 80, 1), prob = c(rep(1.1, 20), rep(1, 80-20)), size = 1000000, replace = T)
qplot(look) +geom_histogram()
table(look)
plot(table(look))
look <- sample(seq(1, 80, 1), prob = c(rep(1.2, 20), rep(1, 80-20)), size = 1000000, replace = T)
plot(table(look))
look <- sample(seq(1, 80, 1), prob = c(rep(1.02, 20), rep(1, 80-20)), size = 1000000, replace = T)
plot(table(look))
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
p <- 1 #prob of interact
run <- "Sigma0-Epsilon0.1-Beta1.1"
####################
# Load and process data
####################
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Graphs/", run, "/"), full.names = TRUE)
soc_networks <- list()
for (i in 1:length(files)) {
load(files[i])
soc_networks[[i]] <- listed_data
}
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
p <- 1 #prob of interact
run <- "Sigma0-Epsilon0.1-Beta1.1"
####################
# Load and process data
####################
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Graphs/", run, "/"), full.names = TRUE)
soc_networks <- list()
for (i in 1:length(files)) {
load(files[i])
soc_networks[[i]] <- listed_data
}
# Load threshold matrices
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", run, "/"), full.names = TRUE)
thresh_data <- list()
for (i in 1:length(files)) {
load(files[i])
thresh_data[[i]] <- listed_data
}
# Load activity profiles
files <- list.files(paste0("output/Rdata/_ProcessedData/TaskDist/", run, "/"), full.names = TRUE)
task_data <- list()
for (i in 1:length(files)) {
load(files[i])
task_data[[i]] <- listed_data
}
i = 1
load(files[i])
run
# Load activity profiles
load(paste0("output/Rdata/_ProcessedData/TaskDist/", run, "/"), full.names = TRUE)
# Load activity profiles
load(paste0("output/Rdata/_ProcessedData/TaskDist/", run, "/"))
# Load activity profiles
load(paste0("output/Rdata/_ProcessedData/TaskDist/", run, ".Rdata"))
View(compiled_data)
hist(table(rowSums(compiled_data[,1:2])))
hist(table(sum(compiled_data[,1:2])))
sum(compiled_data[,1:2])
rowSums(compiled_data[,1:2])
table(rowSums(compiled_data[,1:2]))
hist(rowSums(compiled_data[,1:2]))
plot(rowSums(compiled_data[,1:2]))
plot(compiled_data[,1], compiled_data[,2])
task_dist <- compiled_data
rm(compiled_data)
length(soc_networks)
soc_networks[1][2]
soc_networks[1][1]
soc_networks[[1]][1]
# Get group size graphs
graphs <- soc_networks[[i]]
length(graphs)
unique(task_dist$sim)
unique(task_dist$chunk)
task_dsit$replicate <- task_dist$sim * task_dist$chunk
task_dist$replicate <- task_dist$sim * task_dist$chunk
View(task_dist)
j = 1
this_graph <- graphs[[j]]
this_graph
####################
# Total interactions vs. activity
####################
# Create space for data collection
task_activ <- task_dist
task_activ$degree <- NA
row_sums(this_graph)
this_graph <- graphs[[j]]
row_sums(this_graph)
rowSums(this_graph)
degrees <- rowSums(this_graph)
task_activ$degree[task_activ$n == n & task_activ$replicate == j] <- degrees
task_activ$degree[task_activ$n == n & task_activ$replicate == j]
j
# add to dataframe
n <- 5 * i
task_activ$degree[task_activ$n == n & task_activ$replicate == j] <- degrees
View(task_activ)
degrees
# Get data from social networks
for(i in 1:length(soc_networks)) {
# Get group size graphs
graphs <- soc_networks[[i]]
# Get individual graphs
for(j in 1:length(graphs)) {
this_graph <- graphs[[j]]
degrees <- rowSums(this_graph)
# add to dataframe
n <- 5 * i
task_activ$degree[task_activ$n == n & task_activ$replicate == j] <- degrees
}
}
View(task_activ)
names(task_activ)
# Plot
gg_act_net <- ggplot(data = task_activ, aes(x = Task1, y = degree)) +
geom_point() +
theme_classic()
gg_act_net
# Plot
gg_act_net <- ggplot(data = task_activ, aes(x = Task1, y = degree, fill = n)) +
geom_point() +
theme_classic()
gg_act_net
# Plot
gg_act_net <- ggplot(data = task_activ, aes(x = Task1, y = degree, colour = n)) +
geom_point() +
theme_classic()
gg_act_net
# Plot
gg_act_net <- ggplot(data = task_activ, aes(x = Task1, y = degree, colour = n)) +
geom_point() +
theme_classic() +
facet_wrap(~n)
gg_act_net
# Plot
gg_act_net <- ggplot(data = task_activ, aes(x = Task1, y = degree, colour = n)) +
geom_point() +
theme_classic() +
facet_wrap(~n, scales = "free")
gg_act_net
# Plot
gg_act_net <- ggplot(data = task_activ, aes(x = Task1, y = degree, colour = n)) +
geom_point() +
theme_classic() +
facet_wrap(~n)
gg_act_net
i = 1
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
j = 1
# Format: set diagonal, rescale, and make adj matrix
this_graph <- graphs[[j]]
diag(this_graph) <- NA
dimensions <- dim(this_graph)
####################
# Network plot vs. above/below average activity
####################
# Set group size and replicate
size <- 80
size <- size/5
replicate <- 1
# Get graph
example_graph <- soc_networks[[size]][[replicate]]
example_thresh <- as.data.frame(thresh_data[[size]][[replicate]])
example_thresh$Id <- row.names(example_thresh)
example_thresh$ThreshRatio <- log(example_thresh$Thresh1 / example_thresh$Thresh2)
example_thresh$ThreshRatioBounded <- example_thresh$ThreshRatio
example_thresh$ThreshRatioBounded[example_thresh$ThreshRatioBounded < -thresh_limit] <- -thresh_limit
example_thresh$ThreshRatioBounded[example_thresh$ThreshRatioBounded > thresh_limit] <- thresh_limit
# Get graph
example_graph <- soc_networks[[size]][[replicate]]
example_thresh <- as.data.frame(thresh_data[[size]][[replicate]])
example_thresh$Id <- row.names(example_thresh)
example_graph
# Get graph
example_graph <- soc_networks[[size]][[replicate]]
example_thresh <- as.data.frame(thresh_data[[size]][[replicate]])
example_thresh$Id <- row.names(example_thresh)
names(task_dist)
# Get task distribution
example_task_dist <- task_dist[task_dist$n == size*5, task_dist$replicate == replicate, ]
task_dist$n == size*5
size*5
replicate
task_dist$replicate
# Get task distribution
example_task_dist <- task_dist[task_dist$n == size*5, task_dist$replicate == replicate, ]
# Get task distribution
example_task_dist <- task_dist[task_dist$n == size*5 & task_dist$replicate == replicate, ]
View(example_task_dist)
example_task_dist$total_activity <- rowSums(example_task_dist[ , 1:2])
View(example_task_dist)
mean_activity <- mean(example_task_dist$total_activity)
example_task_dist$activity_level <- ifelse(example_task_dist$total_activity > mean_activity, "Above", "Below")
View(example_task_dist)
# Prep graph
g <- graph_from_adjacency_matrix(example_graph, mode = "undirected", weighted = TRUE)
edgelist <- get.edgelist(g)
edgelist <- as.data.frame(edgelist)
names(edgelist) <- c("Source", "Target")
edgelist$Weight <- E(g)$weight
nodelist <- V(g)
node_list
nodelist
nodelist$Id <- V(g)
nodelist <- data.frame("Id" = V(g))
nodelist <- data.frame("Id" = row.names(example_graph))
View(example_graph)
View(nodelist)
nodelist$activity_level <- example_task_dist$activity_level
nodelist$total_activity <- example_task_dist$total_activity
# Plot with igraph
V(g)
nodelist$Id
# Plot with igraph
V(g)$color <- ifelse(example_task_dist$activity_level == "Above", "#d6604d", "#bababa")
V(g)$color
graph_attr(g, "layout") <- layout_with_lgl
plot(g)
layout.forceatlas2(g)
layout <- layout.forceatlas2(g, direted = FALSE)
layout <- layout.forceatlas2(g, directed = FALSE)
layout <- layout.forceatlas2(g, directed = FALSE)
layout <- layout.forceatlas2(g)
plot(g, layout = layout)
# Output
write.csv(edgelist, file = paste0("output/Networks/ExampleNetworks/Activity_GroupSize", 5*size, ".csv"), row.names = FALSE)
write.csv(nodelist, file = paste0("output/Networks/ExampleNetworks/Activity_GroupSize", 5*size, "nodelist.csv"), row.names = FALSE)
size <- 80
size <- size/5
replicate <- 1
# Get graph
example_graph <- soc_networks[[size]][[replicate]]
example_thresh <- as.data.frame(thresh_data[[size]][[replicate]])
example_thresh$Id <- row.names(example_thresh)
# Get task distribution
example_task_dist <- task_dist[task_dist$n == size*5 & task_dist$replicate == replicate, ]
example_task_dist$total_activity <- rowSums(example_task_dist[ , 1:2])
mean_activity <- mean(example_task_dist$total_activity)
example_task_dist$activity_level <- ifelse(example_task_dist$total_activity > mean_activity, "Above", "Below")
# Remove extra edges
percentiles <- quantile(example_graph, na.rm = TRUE)
fiftypercent <- percentiles[3]
seventyfivepercent <- percentiles[4]
example_graph[example_graph < fiftypercent] <- 0
diag(example_graph) <- 0
# Prep graph
g <- graph_from_adjacency_matrix(example_graph, mode = "undirected", weighted = TRUE)
edgelist <- get.edgelist(g)
edgelist <- as.data.frame(edgelist)
names(edgelist) <- c("Source", "Target")
edgelist$Weight <- E(g)$weight
nodelist <- data.frame("Id" = row.names(example_graph))
nodelist$total_activity <- example_task_dist$total_activity
nodelist$activity_level <- example_task_dist$activity_level
# Output
write.csv(edgelist, file = paste0("output/Networks/ExampleNetworks/Activity_GroupSize", 5*size, ".csv"), row.names = FALSE)
write.csv(nodelist, file = paste0("output/Networks/ExampleNetworks/Activity_GroupSize", 5*size, "nodelist.csv"), row.names = FALSE)
mean_activity <- median(example_task_dist$total_activity)
example_task_dist$activity_level <- ifelse(example_task_dist$total_activity > mean_activity, "Above", "Below")
size <- 80
size <- size/5
replicate <- 1
# Get graph
example_graph <- soc_networks[[size]][[replicate]]
example_thresh <- as.data.frame(thresh_data[[size]][[replicate]])
example_thresh$Id <- row.names(example_thresh)
# Get task distribution
example_task_dist <- task_dist[task_dist$n == size*5 & task_dist$replicate == replicate, ]
example_task_dist$total_activity <- rowSums(example_task_dist[ , 1:2])
mean_activity <- median(example_task_dist$total_activity)
example_task_dist$activity_level <- ifelse(example_task_dist$total_activity > mean_activity, "Above", "Below")
# Remove extra edges
percentiles <- quantile(example_graph, na.rm = TRUE)
fiftypercent <- percentiles[3]
seventyfivepercent <- percentiles[4]
example_graph[example_graph < fiftypercent] <- 0
diag(example_graph) <- 0
# Prep graph
g <- graph_from_adjacency_matrix(example_graph, mode = "undirected", weighted = TRUE)
edgelist <- get.edgelist(g)
edgelist <- as.data.frame(edgelist)
names(edgelist) <- c("Source", "Target")
edgelist$Weight <- E(g)$weight
nodelist <- data.frame("Id" = row.names(example_graph))
nodelist$total_activity <- example_task_dist$total_activity
nodelist$activity_level <- example_task_dist$activity_level
# Output
write.csv(edgelist, file = paste0("output/Networks/ExampleNetworks/Activity_GroupSize", 5*size, ".csv"), row.names = FALSE)
write.csv(nodelist, file = paste0("output/Networks/ExampleNetworks/Activity_GroupSize", 5*size, "nodelist.csv"), row.names = FALSE)
# Plot with igraph
V(g)$color <- ifelse(example_task_dist$activity_level == "Above", "#d6604d", "#bababa")
graph_attr(g, "layout") <- layout_with_lgl
layout <- layout.forceatlas2(g)
plot(g, layout = layout)
size <- 30
size <- size/5
replicate <- 1
# Get graph
example_graph <- soc_networks[[size]][[replicate]]
example_thresh <- as.data.frame(thresh_data[[size]][[replicate]])
example_thresh$Id <- row.names(example_thresh)
# Get task distribution
example_task_dist <- task_dist[task_dist$n == size*5 & task_dist$replicate == replicate, ]
example_task_dist$total_activity <- rowSums(example_task_dist[ , 1:2])
mean_activity <- median(example_task_dist$total_activity)
example_task_dist$activity_level <- ifelse(example_task_dist$total_activity > mean_activity, "Above", "Below")
# Remove extra edges
percentiles <- quantile(example_graph, na.rm = TRUE)
fiftypercent <- percentiles[3]
seventyfivepercent <- percentiles[4]
example_graph[example_graph < fiftypercent] <- 0
diag(example_graph) <- 0
# Prep graph
g <- graph_from_adjacency_matrix(example_graph, mode = "undirected", weighted = TRUE)
edgelist <- get.edgelist(g)
edgelist <- as.data.frame(edgelist)
names(edgelist) <- c("Source", "Target")
edgelist$Weight <- E(g)$weight
nodelist <- data.frame("Id" = row.names(example_graph))
nodelist$total_activity <- example_task_dist$total_activity
nodelist$activity_level <- example_task_dist$activity_level
# Output
write.csv(edgelist, file = paste0("output/Networks/ExampleNetworks/Activity_GroupSize", 5*size, ".csv"), row.names = FALSE)
write.csv(nodelist, file = paste0("output/Networks/ExampleNetworks/Activity_GroupSize", 5*size, "nodelist.csv"), row.names = FALSE)
# Plot with igraph
V(g)$color <- ifelse(example_task_dist$activity_level == "Above", "#d6604d", "#bababa")
graph_attr(g, "layout") <- layout_with_lgl
layout <- layout.forceatlas2(g)
plot(g, layout = layout)
size <- 35
size <- size/5
replicate <- 1
# Get graph
example_graph <- soc_networks[[size]][[replicate]]
example_thresh <- as.data.frame(thresh_data[[size]][[replicate]])
example_thresh$Id <- row.names(example_thresh)
# Get task distribution
example_task_dist <- task_dist[task_dist$n == size*5 & task_dist$replicate == replicate, ]
example_task_dist$total_activity <- rowSums(example_task_dist[ , 1:2])
mean_activity <- median(example_task_dist$total_activity)
example_task_dist$activity_level <- ifelse(example_task_dist$total_activity > mean_activity, "Above", "Below")
# Remove extra edges
percentiles <- quantile(example_graph, na.rm = TRUE)
fiftypercent <- percentiles[3]
seventyfivepercent <- percentiles[4]
example_graph[example_graph < fiftypercent] <- 0
diag(example_graph) <- 0
# Prep graph
g <- graph_from_adjacency_matrix(example_graph, mode = "undirected", weighted = TRUE)
edgelist <- get.edgelist(g)
edgelist <- as.data.frame(edgelist)
names(edgelist) <- c("Source", "Target")
edgelist$Weight <- E(g)$weight
nodelist <- data.frame("Id" = row.names(example_graph))
nodelist$total_activity <- example_task_dist$total_activity
nodelist$activity_level <- example_task_dist$activity_level
# Output
write.csv(edgelist, file = paste0("output/Networks/ExampleNetworks/Activity_GroupSize", 5*size, ".csv"), row.names = FALSE)
write.csv(nodelist, file = paste0("output/Networks/ExampleNetworks/Activity_GroupSize", 5*size, "nodelist.csv"), row.names = FALSE)
# Plot with igraph
V(g)$color <- ifelse(example_task_dist$activity_level == "Above", "#d6604d", "#bababa")
graph_attr(g, "layout") <- layout_with_lgl
layout <- layout.forceatlas2(g)
plot(g, layout = layout)
