gg_beta_all
View(analytical_data)
# Analytical results for group size above which full DOL should emerge (n*)
analytical_data <- data.frame(beta = seq(1.001, 1.255, 0.0001), n = rep(NA, length(seq(1.001, 1.255, 0.0001))))
for (i in 1:nrow(analytical_data)) {
analytical_data[i, 2] <- (2 * analytical_data[i, 1]) / (0.8 * (analytical_data[i, 1] - 1))
}
analytical_data <- analytical_data %>%
filter(n < 102.5)
# As one plot
gg_beta_all <- ggplot() +
geom_tile(data = entropy, aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
theme_bw() +
geom_hline(yintercept = 1, size = 0.3, linetype = "dashed") +
geom_line(data = analytical_data, aes(x = n, y = beta)) +
scale_x_continuous(breaks = seq(0, 100, 20),
expand = c(0,0),
limits = c(2.5, 102.5)) +
scale_y_continuous(breaks = seq(0.75, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste( "Interaction bias (", italic(beta), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 2)
gg_beta_all
# As one plot
gg_beta_all <- ggplot() +
geom_tile(data = entropy, aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
theme_bw() +
geom_hline(yintercept = 1, size = 0.3, linetype = "dashed") +
geom_line(data = analytical_data, aes(x = n, y = beta), size = 1) +
scale_x_continuous(breaks = seq(0, 100, 20),
expand = c(0,0),
limits = c(2.5, 102.5)) +
scale_y_continuous(breaks = seq(0.75, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste( "Interaction bias (", italic(beta), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 2)
gg_beta_all
# As one plot
gg_beta_all <- ggplot() +
geom_tile(data = entropy, aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
theme_bw() +
geom_hline(yintercept = 1, size = 0.3, linetype = "dashed") +
geom_line(data = analytical_data, aes(x = n, y = beta), size = 0.6) +
scale_x_continuous(breaks = seq(0, 100, 20),
expand = c(0,0),
limits = c(2.5, 102.5)) +
scale_y_continuous(breaks = seq(0.75, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste( "Interaction bias (", italic(beta), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 2)
gg_beta_all
####################
# Set global variables
####################
# Initial paramters: Free to change
# Base parameters
Ns             <- c(5, 10, seq(20, 30, 1), 40, 50, 100) #vector of number of individuals to simulate
####################
# Set global variables
####################
# Initial paramters: Free to change
# Base parameters
Ns             <- c(5, 10, seq(20, 30, 1), 40, 50, 100) #vector of number of individuals to simulate
m(list = ls())
####################
# Source necessary scripts/libraries
####################
source("scripts/util/__Util__MASTER.R")
library(parallel)
library(snowfall)
####################
# Set global variables
####################
# Initial paramters: Free to change
# Base parameters
Ns             <- c(5, 10, seq(20, 30, 1), 40, 50, 100) #vector of number of individuals to simulate
m              <- 2 #number of tasks
gens           <- 200000 #number of generations to run simulation
reps           <- 100 #number of replications per simulation (for ensemble)
chunk_size     <- 10 #number of
Ns
rm(list = ls())
####################
# Source necessary scripts/libraries
####################
source("scripts/util/__Util__MASTER.R")
library(parallel)
library(snowfall)
####################
# Set global variables
####################
# Initial paramters: Free to change
# Base parameters
Ns             <- c(5, 10, seq(20, 30, 1), 40, 50, 100) #vector of number of individuals to simulate
m              <- 2 #number of tasks
gens           <- 200000 #number of generations to run simulation
reps           <- 100 #number of replications per simulation (for ensemble)
chunk_size     <- 10 #numbe
Ns
load("output/ParameterSpace/GroupSizeBetaSweep_Sigma0-Epsilon0.1.Rdata")
pal <- brewer_pal("seq", "GnBu")
pal <- pal(9)
# library(viridis)
# pal <- viridis(9, option = "plasma")
# As separate plots
for (bias in c("Homophily", "Heterophily")) {
# Filter
if (bias == "Homophily") {
entropy_filt <- entropy %>%
filter(beta >= 1)
} else {
entropy_filt <- entropy %>%
filter(beta <= 1)
}
# Graph
gg_beta <- ggplot(data = entropy_filt, aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
geom_tile() +
theme_bw() +
scale_x_continuous(breaks = seq(0, 100, 20),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(0.75, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste( "Interaction bias (", italic(beta), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 1)
gg_beta
# Save
file_png <- paste0("output/ParameterSpace/Plots/BetaSweep_Positive", bias,  ".png")
file_svg <- paste0("output/ParameterSpace/Plots/svg/BetaSweep_Positive", bias,  ".svg")
ggsave(gg_beta, file = file_png, height = 45, width = 45, units = "mm", dpi = 400)
ggsave(gg_beta, file = file_svg, height = 45, width = 45, units = "mm")
}
# Analytical results for group size above which full DOL should emerge (n*)
analytical_data <- data.frame(beta = seq(1.001, 1.255, 0.0001), n = rep(NA, length(seq(1.001, 1.255, 0.0001))))
for (i in 1:nrow(analytical_data)) {
analytical_data[i, 2] <- (2 * analytical_data[i, 1]) / (0.8 * (analytical_data[i, 1] - 1))
}
analytical_data <- analytical_data %>%
filter(n < 102.5)
# As one plot
gg_beta_all <- ggplot() +
geom_tile(data = entropy, aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
theme_bw() +
geom_hline(yintercept = 1, size = 0.3, linetype = "dashed") +
geom_line(data = analytical_data, aes(x = n, y = beta), size = 0.6) +
scale_x_continuous(breaks = seq(0, 100, 20),
expand = c(0,0),
limits = c(2.5, 102.5)) +
scale_y_continuous(breaks = seq(0.75, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste( "Interaction bias (", italic(beta), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 2)
gg_beta_all
# Analytical results for group size above which full DOL should emerge (n*)
analytical_data <- data.frame(beta = seq(1.001, 1.255, 0.0001), n = rep(NA, length(seq(1.001, 1.255, 0.0001))))
for (i in 1:nrow(analytical_data)) {
analytical_data[i, 2] <- (2 * analytical_data[i, 1]) / (0.8 * (analytical_data[i, 1] - 1))
}
####################
# Plot: Beta sweep - negative social influence
####################
load("output/ParameterSpace/GroupSizeBetaSweep_Sigma0-Epsilon-0.1.Rdata")
pal <- brewer_pal("seq", "GnBu")
pal <- pal(9)
for (bias in c("Homophily", "Heterophily")) {
# Filter
if (bias == "Homophily") {
entropy_filt <- entropy %>%
filter(beta >= 1)
} else {
entropy_filt <- entropy %>%
filter(beta <= 1)
}
# Graph
gg_beta <- ggplot(data = entropy_filt, aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
geom_tile() +
theme_bw() +
scale_x_continuous(breaks = c(5, seq(20, 100, 20)),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(0.75, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste( "Interaction bias (", italic(beta), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 1)
gg_beta
# Save
file_png <- paste0("output/ParameterSpace/Plots/BetaSweep_Negative", bias,  ".png")
file_svg <- paste0("output/ParameterSpace/Plots/svg/BetaSweep_Negative", bias,  ".svg")
ggsave(gg_beta, file = file_png, height = 45, width = 45, units = "mm", dpi = 400)
ggsave(gg_beta, file = file_svg, height = 45, width = 45, units = "mm")
}
# Analytical results for group size above which full DOL should emerge (n*)
analytical_data <- data.frame(beta = seq(1.001, 1.255, 0.0001), n = rep(NA, length(seq(1.001, 1.255, 0.0001))))
for (i in 1:nrow(analytical_data)) {
analytical_data[i, 2] <- (2 * analytical_data[i, 1]) / (0.8 * (analytical_data[i, 1] - 1))
}
analytical_data <- analytical_data %>%
filter(n < 102.5)
# As one plot
gg_beta_all <- ggplot(data = entropy) +
geom_tile(aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
theme_bw(aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
geom_hline(yintercept = 1, size = 0.3, linetype = "dashed") +
geom_line(data = analytical_data, aes(x = n, y = beta), size = 0.6) +
scale_x_continuous(breaks = seq(0, 100, 20),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(0.75, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste( "Interaction bias (", italic(beta), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 2)
# Analytical results for group size above which full DOL should emerge (n*)
analytical_data <- data.frame(beta = seq(1.001, 1.255, 0.0001), n = rep(NA, length(seq(1.001, 1.255, 0.0001))))
for (i in 1:nrow(analytical_data)) {
analytical_data[i, 2] <- (2 * analytical_data[i, 1]) / (0.8 * (analytical_data[i, 1] - 1))
}
analytical_data <- analytical_data %>%
filter(n < 102.5)
# As one plot
gg_beta_all <- ggplot(data = entropy) +
geom_tile(aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
theme_bw(aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
geom_hline(yintercept = 1, size = 0.3, linetype = "dashed") +
geom_line(data = analytical_data, aes(x = n, y = beta), size = 0.6) +
scale_x_continuous(breaks = seq(0, 100, 20),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(0.75, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste( "Interaction bias (", italic(beta), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 2)
# As one plot
gg_beta_all <- ggplot() +
geom_tile(data = entropy, aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
theme_bw(aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
geom_hline(yintercept = 1, size = 0.3, linetype = "dashed") +
geom_line(data = analytical_data, aes(x = n, y = beta), size = 0.6) +
scale_x_continuous(breaks = seq(0, 100, 20),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(0.75, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste( "Interaction bias (", italic(beta), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 2)
gg_beta_all
# As one plot
gg_beta_all <- ggplot() +
geom_tile(data = entropy, aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
theme_bw(aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
geom_hline(yintercept = 1, size = 0.3, linetype = "dashed") +
geom_line(data = analytical_data, aes(x = n, y = beta), size = 0.6) +
scale_x_continuous(breaks = seq(0, 100, 20),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(0.75, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste( "Interaction bias (", italic(beta), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 2)
gg_beta_all
# As one plot
gg_beta_all <- ggplot() +
geom_tile(data = entropy, aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
theme_bw(aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
geom_hline(yintercept = 1, size = 0.3, linetype = "dashed") +
# geom_line(data = analytical_data, aes(x = n, y = beta), size = 0.6) +
scale_x_continuous(breaks = seq(0, 100, 20),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(0.75, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste( "Interaction bias (", italic(beta), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 2)
View(entropy)
# As one plot
gg_beta_all <- ggplot() +
geom_tile(data = entropy, aes(x = n, y = beta, fill = Dind_mean, colour = Dind_mean)) +
theme_bw() +
geom_hline(yintercept = 1, size = 0.3, linetype = "dashed") +
geom_line(data = analytical_data, aes(x = n, y = beta), size = 0.6) +
scale_x_continuous(breaks = seq(0, 100, 20),
expand = c(0,0)) +
scale_y_continuous(breaks = seq(0.75, 1.25, 0.05),
expand = c(0,0)) +
scale_fill_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
scale_colour_gradientn(colours = pal, name = "Behavioral\nspecialization",
limits = c(0, 1)) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste( "Interaction bias (", italic(beta), ")"))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 6),
legend.key.height = unit(5, "mm"),
legend.key.width = unit(2, "mm"),
legend.position = "none",
axis.ticks = element_line(size = 0.3, color = "black"),
panel.border = element_rect(fill = NA, size = 0.3, color = "black"),
aspect.ratio = 2)
gg_beta_all
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
####################
# Set variables
####################
beta <- 1.1 # interaction bias term
Ns <- c(10, 50, 100) # group sizes to test
gens <- 50000 #equivalnet of simulation run length
####################
# Set variables
####################
sample_results <- lapply(Ns, function(n) {
# Establish "individuals:
individuals <- data.frame(Individual = seq(1, n),
Type = c(rep(1, n/2), rep(2, n/2)),
Weights = c(rep(beta, n/2), rep(1, n/2)))
# Sample
samples <- list()
for (t in 1:gens) {
if (t %% 10000 == 0) {
print(t)
}
sampled_ind <- sample(individuals$Individual, 1, prob = individuals$Weights)
row <- individuals[sampled_ind, 1:2]
samples[[t]] <- row
}
samples <- do.call("rbind", samples)
hist(samples$Individual)
})
rm(list = ls())
####################
# Source necessary scripts/libraries
####################
source("scripts/util/__Util__MASTER.R")
library(parallel)
library(snowfall)
####################
# Set global variables
####################
# Initial paramters: Free to change
# Base parameters
Ns             <- c(5, 10, seq(20, 30, 1), 40, 50, 100) #vector of number of individuals to simulate
m              <- 2 #number of tasks
gens           <- 200000 #number of generations to run simulation
reps           <- 100 #number of replications per simulation (for ensemble)
chunk_size     <- 10 #number of simulations sent to single core
# Threshold Parameters
ThreshM        <- rep(50, m) #population threshold means
ThreshSD       <- ThreshM * 0 #population threshold standard deviations
InitialStim    <- rep(0, m) #intital vector of stimuli
deltas         <- rep(0.8, m) #vector of stimuli increase rates
alpha          <- m #efficiency of task performance
quitP          <- 0.2 #probability of quitting task once active
# Social Network Parameters
p              <- 1 #baseline probablity of initiating an interaction per time step
epsilon        <- 0.1 #relative weighting of social interactions for adjusting thresholds
beta           <- 1.1 #probability of interacting with individual in same state relative to others
Ns
length(Ns)
times
times <- c(1000, seq(5000, 70000, 5000))
times
times <- c(1000, seq(5000, 200000, 5000))
times
times <- c(1000, seq(5000, gens, 5000))
