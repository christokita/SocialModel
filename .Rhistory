geom_line(aes(y = Mean),
size = 0.4) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
# scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_x_log10() +
scale_color_manual(values = pal,
labels = c("1.2", "1.1"),
name = expression("Interaction bias"(Beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1) +
annotation_logticks(side = "b", size = 0.3)
gg_entropy
gg_entropy <- ggplot(data = entropy, aes(x = n, colour = Model)) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
# scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_x_log10() +
scale_color_manual(values = pal,
labels = c("1.2", "1.1"),
name = expression("Interaction bias"(Beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_entropy
gg_entropy <- ggplot(data = entropy, aes(x = n, colour = Model)) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
# scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_x_log10() +
scale_color_manual(values = pal,
labels = c("1.2", "1.1"),
name = expression("Interaction bias"(Beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1) +
annotation_logticks(side = "b", size = 0.3)
gg_entropy
gg_entropy <- ggplot(data = entropy, aes(x = n, colour = Model)) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
# scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_x_log10(breaks = seq(0, 100)) +
scale_color_manual(values = pal,
labels = c("1.2", "1.1"),
name = expression("Interaction bias"(Beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1) +
annotation_logticks(side = "b", size = 0.3)
gg_entropy
gg_entropy <- ggplot(data = entropy, aes(x = n, colour = Model)) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
# scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_x_log10(breaks = seq(0, 100, 0.1)) +
scale_color_manual(values = pal,
labels = c("1.2", "1.1"),
name = expression("Interaction bias"(Beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1) +
annotation_logticks(side = "b", size = 0.3)
gg_entropy
gg_entropy <- ggplot(data = entropy, aes(x = n, colour = Model)) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
# scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_x_log10(breaks = seq(0, 100)) +
scale_color_manual(values = pal,
labels = c("1.2", "1.1"),
name = expression("Interaction bias"(Beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1) +
annotation_logticks(side = "b", size = 0.3)
gg_entropy
################################################################################
#
# Analyzing average social networks of simulations
#
################################################################################
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
library(viridis)
p <- 1 #prob of interact
run <- "Sigma0-Epsilon0.1-Beta1.1"
####################
# Load and process data
####################
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Graphs/", run, "/"), full.names = TRUE)
soc_networks <- list()
for (i in 1:length(files)) {
load(files[i])
soc_networks[[i]] <- listed_data
}
# Load threshold matrices
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", run, "/"), full.names = TRUE)
thresh_data <- list()
for (i in 1:length(files)) {
load(files[i])
thresh_data[[i]] <- listed_data
}
i = 20
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
j = 1
this_graph <- graphs[[j]]
diag(this_graph) <- NA
dimensions <- dim(this_graph)
labs <- colnames(this_graph)
this_graph <- as.vector(this_graph)
not_chosen <- 1 - (( 1 / (dimensions[1] - 1)) * p)
################################################################################
#
# Analyzing single example network
#
################################################################################
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
p <- 1 #prob of interact
run <- "Sigma0-Epsilon0.1-Beta1.1"
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Graphs/", run, "/"), full.names = TRUE)
soc_networks <- list()
for (i in 1:length(files)) {
load(files[i])
soc_networks[[i]] <- listed_data
}
# Load threshold matrices
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", run, "/"), full.names = TRUE)
thresh_data <- list()
for (i in 1:length(files)) {
load(files[i])
thresh_data[[i]] <- listed_data
}
####################
# Output example graph
####################
# Set threshold max/min
thresh_limit <- 100
# Set group size and replicate
size <- 80
size <- size/5
replicate <- 1
size
################################################################################
#
# Analyzing single example network
#
################################################################################
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
p <- 1 #prob of interact
run <- "Sigma0-Epsilon0.1-Beta1.1"
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Graphs/", run, "/"), full.names = TRUE)
soc_networks <- list()
for (i in 1:length(files)) {
load(files[i])
soc_networks[[i]] <- listed_data
}
# Load threshold matrices
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", run, "/"), full.names = TRUE)
thresh_data <- list()
for (i in 1:length(files)) {
load(files[i])
thresh_data[[i]] <- listed_data
}
####################
# Output example graph
####################
# Set threshold max/min
thresh_limit <- 100
# Set group size and replicate
size <- 80
size <- size/5
replicate <- 1
# Get graph
example_graph <- soc_networks[[size]][[replicate]]
example_thresh <- as.data.frame(thresh_data[[size]][[replicate]])
example_thresh$Id <- row.names(example_thresh)
example_thresh$ThreshBias <- example_thresh$Thresh1 - example_thresh$Thresh2
example_thresh$ThreshBiasBounded <- example_thresh$ThreshBias
example_thresh$ThreshBiasBounded[example_thresh$ThreshBiasBounded < -thresh_limit] <- -thresh_limit
example_thresh$ThreshBiasBounded[example_thresh$ThreshBiasBounded > thresh_limit] <- thresh_limit
# If no node reaches upper or lower limits, add for coloring purposes in gephi
if (sum(example_thresh$ThreshBias == thresh_limit) == 0) {
max_row <- data.frame(Thresh1 = 50, Thresh2 = 50,
n = size * 5, sim = 0, chunk = 0,
Id = "Max", ThreshBias = thresh_limit, ThreshBiasBounded = thresh_limit)
example_thresh <- rbind(example_thresh, max_row)
}
if (sum(example_thresh$ThreshBias == -thresh_limit) == 0) {
min_row <- data.frame(Thresh1 = 50, Thresh2 = 50,
n = size * 5, sim = 0, chunk = 0,
Id = "Min", ThreshBias = -thresh_limit, ThreshBiasBounded = -thresh_limit)
example_thresh <- rbind(example_thresh, min_row)
}
# example_thresh$ThreshRatio <- log(example_thresh$Thresh1 / example_thresh$Thresh2)
# example_thresh$ThreshRatioBounded <- example_thresh$ThreshRatio
# example_thresh$ThreshRatioBounded[example_thresh$ThreshRatioBounded < -thresh_limit] <- -thresh_limit
# example_thresh$ThreshRatioBounded[example_thresh$ThreshRatioBounded > thresh_limit] <- thresh_limit
# # If no node reaches upper or lower limits, add for coloring purposes in gephi
# if (sum(example_thresh$ThreshRatioBounded == thresh_limit) == 0) {
#   max_row <- data.frame(Thresh1 = NA, Thresh2 = NA,
#                         n = NA, sim = NA, chunk = NA,
#                         Id = "Max", ThreshRatio = thresh_limit, ThreshRatioBounded = thresh_limit)
#   example_thresh <- rbind(example_thresh, max_row)
# }
# if (sum(example_thresh$ThreshRatioBounded == -thresh_limit) == 0) {
#   min_row <- data.frame(Thresh1 = NA, Thresh2 = NA,
#                         n = NA, sim = NA, chunk = NA,
#                         Id = "Min", ThreshRatio = -thresh_limit, ThreshRatioBounded = -thresh_limit)
#   example_thresh <- rbind(example_thresh, min_row)
# }
#                         Id = "Max", ThreshRatio = thresh_limit, ThreshRatioBounded = thresh_limit)
#   example_thresh <- rbind(example_thresh, max_row)
# }
# if (sum(example_thresh$ThreshRatioBounded == -thresh_limit) == 0) {
#   min_row <- data.frame(Thresh1 = NA, Thresh2 = NA,
#                         n = NA, sim = NA, chunk = NA,
#                         Id = "Min", ThreshRatio = -thresh_limit, ThreshRatioBounded = -thresh_limit)
#   example_thresh <- rbind(example_thresh, min_row)
# }
# # Calculate values expected
reweight_graph <- example_graph
not_chosen <- 1 - (( 1 / (nrow(reweight_graph) - 1)) * p)
expected_random <-  1 - not_chosen^2
expected_random
hist(exaple_graph)
hist(example_graph)
dig(example_graph) <- NA
diag(example_graph) <- NA
hist(example_graph)
# Or take in those in top X percentile
percentiles <- quantile(example_graph, na.rm = TRUE)
fiftypercent <- percentiles[3]
hline(fiftypercent)
abline(v = fiftypercent)
abline(v = expected_random)
#   example_thresh <- rbind(example_thresh, max_row)
# }
# if (sum(example_thresh$ThreshRatioBounded == -thresh_limit) == 0) {
#   min_row <- data.frame(Thresh1 = NA, Thresh2 = NA,
#                         n = NA, sim = NA, chunk = NA,
#                         Id = "Min", ThreshRatio = -thresh_limit, ThreshRatioBounded = -thresh_limit)
#   example_thresh <- rbind(example_thresh, min_row)
# }
# # Calculate values expected
# Zero out interactions equal to or less than random
not_chosen <- 1 - (( 1 / (nrow(example_graph) - 1)) * p)
expected_random <-  1 - not_chosen^2
example_graph[example_graph <= expected_random] <- 0
hist(example_graph)
diag(example_graph = o)
diag(example_graph = NA)
# Turn into graph object to get edgelist
g <- graph_from_adjacency_matrix(example_graph, mode = "undirected", weighted = TRUE)
edgelist <- get.edgelist(g)
edgelist <- as.data.frame(edgelist)
names(edgelist) <- c("Source", "Target")
edgelist$Weight <- E(g)$weight
# Write
write.csv(edgelist, file = paste0("output/Networks/ExampleNetworks/GroupSize", 5*size, "_AboveRandom_edgelist.csv"), row.names = FALSE)
example_graph
diag(example_graph) <- 0
g <- graph_from_adjacency_matrix(example_graph, mode = "undirected", weighted = TRUE)
edgelist <- get.edgelist(g)
edgelist <- as.data.frame(edgelist)
names(edgelist) <- c("Source", "Target")
edgelist$Weight <- E(g)$weight
# Write
write.csv(edgelist, file = paste0("output/Networks/ExampleNetworks/GroupSize", 5*size, "_AboveRandom_edgelist.csv"), row.names = FALSE)
write.csv(example_thresh, file = paste0("output/Networks/ExampleNetworks/GroupSize", 5*size, "nodelist.csv"), row.names = FALSE)
################################################################################
#
# Analyzing single example network
#
################################################################################
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
p <- 1 #prob of interact
run <- "Sigma0-Epsilon0.1-Beta1.1"
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Graphs/", run, "/"), full.names = TRUE)
soc_networks <- list()
for (i in 1:length(files)) {
load(files[i])
soc_networks[[i]] <- listed_data
}
# Load threshold matrices
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", run, "/"), full.names = TRUE)
thresh_data <- list()
for (i in 1:length(files)) {
load(files[i])
thresh_data[[i]] <- listed_data
}
####################
# Output example graph
####################
# Set threshold max/min
thresh_limit <- 100
# Set group size and replicate
size <- 80
size <- size/5
replicate <- 1
# Get graph
example_graph <- soc_networks[[size]][[replicate]]
example_thresh <- as.data.frame(thresh_data[[size]][[replicate]])
example_thresh$Id <- row.names(example_thresh)
example_thresh$ThreshBias <- example_thresh$Thresh1 - example_thresh$Thresh2
example_thresh$ThreshBiasBounded <- example_thresh$ThreshBias
example_thresh$ThreshBiasBounded[example_thresh$ThreshBiasBounded < -thresh_limit] <- -thresh_limit
example_thresh$ThreshBiasBounded[example_thresh$ThreshBiasBounded > thresh_limit] <- thresh_limit
# If no node reaches upper or lower limits, add for coloring purposes in gephi
if (sum(example_thresh$ThreshBias == thresh_limit) == 0) {
max_row <- data.frame(Thresh1 = 50, Thresh2 = 50,
n = size * 5, sim = 0, chunk = 0,
Id = "Max", ThreshBias = thresh_limit, ThreshBiasBounded = thresh_limit)
example_thresh <- rbind(example_thresh, max_row)
}
if (sum(example_thresh$ThreshBias == -thresh_limit) == 0) {
min_row <- data.frame(Thresh1 = 50, Thresh2 = 50,
n = size * 5, sim = 0, chunk = 0,
Id = "Min", ThreshBias = -thresh_limit, ThreshBiasBounded = -thresh_limit)
example_thresh <- rbind(example_thresh, min_row)
}
# Turn into graph object to get edgelist
g <- graph_from_adjacency_matrix(example_graph, mode = "undirected", weighted = TRUE)
edgelist <- get.edgelist(g)
edgelist <- as.data.frame(edgelist)
names(edgelist) <- c("Source", "Target")
edgelist$Weight <- E(g)$weight
# Write
write.csv(edgelist, file = paste0("output/Networks/ExampleNetworks/GroupSize", 5*size, "_All_edgelist.csv"), row.names = FALSE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/Analyze_ExampleNetwork.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/Analyze_ExampleNetwork.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/Analyze_ExampleNetwork.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/Analyze_ExampleNetwork.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/Analyze_ExampleNetwork.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/Analyze_ExampleNetwork.R', echo=TRUE)
source("scripts/util/__Util__MASTER.R")
?cluster_fast_greedy
################################################################################
#
# Analyzing social network features comapred to activity and other factors
#
################################################################################
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
p <- 1 #prob of interact
run <- "Sigma0-Epsilon0.1-Beta1.1"
####################
# Load and process data
####################
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Graphs/", run, "/"), full.names = TRUE)
soc_networks <- list()
for (i in 1:length(files)) {
load(files[i])
soc_networks[[i]] <- listed_data
}
# Load threshold matrices
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", run, "/"), full.names = TRUE)
thresh_data <- list()
for (i in 1:length(files)) {
load(files[i])
thresh_data[[i]] <- listed_data
}
# Load activity profiles
load(paste0("output/Rdata/_ProcessedData/TaskDist/", run, ".Rdata"))
task_dist <- compiled_data
task_dist$replicate <- task_dist$sim * task_dist$chunk
rm(compiled_data)
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
p <- 1 #prob of interact
runs <- c("Sigma0.05-Epsilon0-Beta1.1",
"Sigma0-Epsilon0.1-Beta1.1")
run_names <- c("Fixed", "Social")
runs
run = 2
files <- list.files(paste0("output/Rdata/_ProcessedData/Graphs/", runs[run], "/"), full.names = TRUE)
soc_networks <- list()
for (file in 1:length(files)) {
load(files[file])
soc_networks[[file]] <- listed_data
}
# Load threshold matrices
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", runs[run], "/"), full.names = TRUE)
thresh_data <- list()
for (file in 1:length(files)) {
load(files[file])
thresh_data[[file]] <- listed_data
}
i = 2
j = 1
graphs <- soc_networks[[i]]
replicates <- length(graphs)
this_graph <- graphs[[j]]
rowSums(this_graph)
i = 19
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
this_graph <- graphs[[j]]
rowSums(this_graph)
