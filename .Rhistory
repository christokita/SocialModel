ggsave(gg_inter,
filename = paste0("output/Networks/RawPlots/", run, "_n", plot*5 ,".svg"),
width = 25,
height = 25,
units = "mm")
}
plot_data$to
graphs <- soc_networks[[i]]
replicates <- length(graphs)
# For each each compute interaction matrix
# Get graph and make adjacency matrix
size_graph <- lapply(1:length(graphs), function(j) {
# Format: set diagonal, rescale, and make adj matrix
this_graph <- graphs[[j]]
diag(this_graph) <- NA
dimensions <- dim(this_graph)
labs <- colnames(this_graph)
this_graph <- as.vector(this_graph)
not_chosen <- 1 - (( 1 / (dimensions[1] - 1)) * p)
expected_random <-  1 - not_chosen^2
this_graph <- (this_graph - expected_random) / expected_random #relative to expected by random (i.e., 1 - chance of not being chosen^2)
this_graph <- matrix(data = this_graph, nrow = dimensions[1], ncol = dimensions[2])
colnames(this_graph) <- labs
rownames(this_graph) <- labs
# Calculate thresh ratio
# ind <- replicates * i + j
thresh <- as.data.frame(thresh_data[[i]][j])
thresh$ThreshRatio <- log(thresh$Thresh1 / thresh$Thresh2)
# ratio <- order(thresh$ThreshRatio)
ratio <- order(thresh$Thresh1)
# Create order by threshold ratio
this_graph <- this_graph[ratio, ratio]
colnames(this_graph) <- paste0("v-", 1:dimensions[1])
rownames(this_graph) <- paste0("v-", 1:dimensions[1])
# return
return(this_graph)
})
# Avearge across all to make 'typical' adjacency matrix
avg_g <- Reduce("+", size_graph) / length(size_graph)
# Create graph object
g <- graph_from_adjacency_matrix(avg_g, mode = c("directed"), weighted = TRUE, diag = TRUE)
# Get node and edge list
node_list <- get.data.frame(g, what = "vertices")
edge_list <- get.data.frame(g, what = "edges")
# Create dataframe for plotting
plot_data <- edge_list %>% mutate(
to = factor(to, levels = node_list$name),
from = factor(from, levels = node_list$name))
####################
# Graph relative interactrion rates
####################
interaction_graphs <- lapply(1:length(soc_networks), function(i) {
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
# For each each compute interaction matrix
# Get graph and make adjacency matrix
size_graph <- lapply(1:length(graphs), function(j) {
# Format: set diagonal, rescale, and make adj matrix
this_graph <- graphs[[j]]
diag(this_graph) <- NA
dimensions <- dim(this_graph)
labs <- colnames(this_graph)
this_graph <- as.vector(this_graph)
not_chosen <- 1 - (( 1 / (dimensions[1] - 1)) * p)
expected_random <-  1 - not_chosen^2
this_graph <- (this_graph - expected_random) / expected_random #relative to expected by random (i.e., 1 - chance of not being chosen^2)
this_graph <- matrix(data = this_graph, nrow = dimensions[1], ncol = dimensions[2])
colnames(this_graph) <- labs
rownames(this_graph) <- labs
# Calculate thresh ratio
# ind <- replicates * i + j
thresh <- as.data.frame(thresh_data[[i]][j])
thresh$ThreshRatio <- log(thresh$Thresh1 / thresh$Thresh2)
# ratio <- order(thresh$ThreshRatio)
ratio <- order(thresh$Thresh1)
# Create order by threshold ratio
this_graph <- this_graph[ratio, ratio]
colnames(this_graph) <- paste0("v-", 1:dimensions[1])
rownames(this_graph) <- paste0("v-", 1:dimensions[1])
# return
return(this_graph)
})
# Avearge across all to make 'typical' adjacency matrix
avg_g <- Reduce("+", size_graph) / length(size_graph)
# Create graph object
g <- graph_from_adjacency_matrix(avg_g, mode = c("directed"), weighted = TRUE, diag = TRUE)
# Get node and edge list
node_list <- get.data.frame(g, what = "vertices")
edge_list <- get.data.frame(g, what = "edges")
# Create dataframe for plotting
plot_data <- edge_list %>% mutate(
to = factor(to, levels = node_list$name),
from = factor(from, levels = node_list$name))
# Get info for plot
groupsize <- ncol(avg_g)
# if (groupsize < 20) {
#   breaks <- c(1, seq(5, length(plot_data$to), 5))
# } else if(groupsize < 35) {
#   breaks <- c(1, seq(10, length(plot_data$to), 15))
# } else {
#   breaks <- c(1, seq(20, length(plot_data$to), 20))
# }
breaks <- c(1, length(unique(plot_data$to)))
# Plot
gg_avg_adj <- ggplot(plot_data, aes(x = from, y = to, fill = weight, color = weight)) +
geom_tile() +
theme_bw() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE, expand = c(0, 0),
position = "top",
breaks = levels(plot_data$to)[breaks]) +
scale_y_discrete(drop = FALSE, expand = c(0, 0),
limits = rev(levels(plot_data$to)),
breaks = levels(plot_data$to)[breaks]) +
scale_fill_gradientn(name = "Relative Interaction\nFrequency",
colours = c('#525252','#5b5b5b','#646464','#6e6e6e','#787878','#818181','#8b8b8b','#959595','#a0a0a0','#a9a9a9','#b4b4b4','#bfbfbf','#c8c8c8','#d4d4d4','#dedede','#e9e9e9','#f4f4f4','#ffffff','#edf5f9','#dee9f2','#d3ddec','#c7d1e5','#bfc4de','#b7b7d7','#b0aad0','#a99ec8','#a391c1','#9e83b9','#9a76b1','#9569a9','#915aa1','#8c4c98','#893c8f','#852986','#810f7c'),
# colours = rev(c("#F6BDAA", "#EC8591", "#E15287", "#AC3987", "#6B249C", "#4D1B7A", "#381B4A")),
na.value = "white",
limit = c(-0.05, 0.05),
# limit = c(0.95, 1.05),
oob = squish) +
scale_color_gradientn(name = "Relative Interaction\nFrequency",
colours = c('#525252','#5b5b5b','#646464','#6e6e6e','#787878','#818181','#8b8b8b','#959595','#a0a0a0','#a9a9a9','#b4b4b4','#bfbfbf','#c8c8c8','#d4d4d4','#dedede','#e9e9e9','#f4f4f4','#ffffff','#edf5f9','#dee9f2','#d3ddec','#c7d1e5','#bfc4de','#b7b7d7','#b0aad0','#a99ec8','#a391c1','#9e83b9','#9a76b1','#9569a9','#915aa1','#8c4c98','#893c8f','#852986','#810f7c'),
# colours = rev(c("#F6BDAA", "#EC8591", "#E15287", "#AC3987", "#6B249C", "#4D1B7A", "#381B4A")),
na.value = "white",
limit = c(-0.05, 0.05),
# limit = c(0.95, 1.05),
oob = squish) +
xlab("Individual") +
ylab("Individual") +
theme(#axis.text = element_blank(),
axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
axis.ticks = element_line(size = 0.3),
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none",
legend.key.height = unit(0.38, "in"),
panel.background = element_rect(size = 0.3, fill = NA),
plot.title = element_blank()) +
ggtitle(paste0("Group Size = ", groupsize))
# return graph
return(gg_avg_adj)
# return(avg_g)
})
# Save
plots <- seq(4, 7, 1)
for (plot in plots) {
gg_inter <- interaction_graphs[[plot]]
ggsave(gg_inter,
filename = paste0("output/Networks/RawPlots/", run, "_n", plot*5 ,".svg"),
width = 25,
height = 25,
units = "mm")
}
# Plot
gg_avg_adj <- ggplot(plot_data, aes(x = from, y = to, fill = weight, color = weight)) +
geom_tile() +
theme_bw() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE, expand = c(0, 0),
position = "top",
breaks = levels(plot_data$to)[breaks]) +
scale_y_discrete(drop = FALSE, expand = c(0, 0),
limits = rev(levels(plot_data$to)),
breaks = levels(plot_data$to)[breaks]) +
scale_fill_gradientn(name = "Relative Interaction\nFrequency",
colours = c('#525252','#5b5b5b','#646464','#6e6e6e','#787878','#818181','#8b8b8b','#959595','#a0a0a0','#a9a9a9','#b4b4b4','#bfbfbf','#c8c8c8','#d4d4d4','#dedede','#e9e9e9','#f4f4f4','#ffffff','#edf5f9','#dee9f2','#d3ddec','#c7d1e5','#bfc4de','#b7b7d7','#b0aad0','#a99ec8','#a391c1','#9e83b9','#9a76b1','#9569a9','#915aa1','#8c4c98','#893c8f','#852986','#810f7c'),
# colours = rev(c("#F6BDAA", "#EC8591", "#E15287", "#AC3987", "#6B249C", "#4D1B7A", "#381B4A")),
na.value = "white",
limit = c(-0.05, 0.05),
# limit = c(0.95, 1.05),
oob = squish) +
scale_color_gradientn(name = "Relative Interaction\nFrequency",
colours = c('#525252','#5b5b5b','#646464','#6e6e6e','#787878','#818181','#8b8b8b','#959595','#a0a0a0','#a9a9a9','#b4b4b4','#bfbfbf','#c8c8c8','#d4d4d4','#dedede','#e9e9e9','#f4f4f4','#ffffff','#edf5f9','#dee9f2','#d3ddec','#c7d1e5','#bfc4de','#b7b7d7','#b0aad0','#a99ec8','#a391c1','#9e83b9','#9a76b1','#9569a9','#915aa1','#8c4c98','#893c8f','#852986','#810f7c'),
# colours = rev(c("#F6BDAA", "#EC8591", "#E15287", "#AC3987", "#6B249C", "#4D1B7A", "#381B4A")),
na.value = "white",
limit = c(-0.05, 0.05),
# limit = c(0.95, 1.05),
oob = squish) +
xlab("Individual") +
ylab("Individual") +
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
# axis.text = element_text(colour = "black", size = 6),
# axis.title = element_text(size = 7),
# axis.ticks = element_line(size = 0.3),
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none",
legend.key.height = unit(0.38, "in"),
panel.background = element_rect(size = 0.3, fill = NA),
plot.title = element_blank()) +
ggtitle(paste0("Group Size = ", groupsize))
####################
# Graph relative interactrion rates
####################
interaction_graphs <- lapply(1:length(soc_networks), function(i) {
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
# For each each compute interaction matrix
# Get graph and make adjacency matrix
size_graph <- lapply(1:length(graphs), function(j) {
# Format: set diagonal, rescale, and make adj matrix
this_graph <- graphs[[j]]
diag(this_graph) <- NA
dimensions <- dim(this_graph)
labs <- colnames(this_graph)
this_graph <- as.vector(this_graph)
not_chosen <- 1 - (( 1 / (dimensions[1] - 1)) * p)
expected_random <-  1 - not_chosen^2
this_graph <- (this_graph - expected_random) / expected_random #relative to expected by random (i.e., 1 - chance of not being chosen^2)
this_graph <- matrix(data = this_graph, nrow = dimensions[1], ncol = dimensions[2])
colnames(this_graph) <- labs
rownames(this_graph) <- labs
# Calculate thresh ratio
# ind <- replicates * i + j
thresh <- as.data.frame(thresh_data[[i]][j])
thresh$ThreshRatio <- log(thresh$Thresh1 / thresh$Thresh2)
# ratio <- order(thresh$ThreshRatio)
ratio <- order(thresh$Thresh1)
# Create order by threshold ratio
this_graph <- this_graph[ratio, ratio]
colnames(this_graph) <- paste0("v-", 1:dimensions[1])
rownames(this_graph) <- paste0("v-", 1:dimensions[1])
# return
return(this_graph)
})
# Avearge across all to make 'typical' adjacency matrix
avg_g <- Reduce("+", size_graph) / length(size_graph)
# Create graph object
g <- graph_from_adjacency_matrix(avg_g, mode = c("directed"), weighted = TRUE, diag = TRUE)
# Get node and edge list
node_list <- get.data.frame(g, what = "vertices")
edge_list <- get.data.frame(g, what = "edges")
# Create dataframe for plotting
plot_data <- edge_list %>% mutate(
to = factor(to, levels = node_list$name),
from = factor(from, levels = node_list$name))
# Get info for plot
groupsize <- ncol(avg_g)
# if (groupsize < 20) {
#   breaks <- c(1, seq(5, length(plot_data$to), 5))
# } else if(groupsize < 35) {
#   breaks <- c(1, seq(10, length(plot_data$to), 15))
# } else {
#   breaks <- c(1, seq(20, length(plot_data$to), 20))
# }
breaks <- c(1, length(unique(plot_data$to)))
# Plot
gg_avg_adj <- ggplot(plot_data, aes(x = from, y = to, fill = weight, color = weight)) +
geom_tile() +
theme_bw() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE, expand = c(0, 0),
position = "top",
breaks = levels(plot_data$to)[breaks]) +
scale_y_discrete(drop = FALSE, expand = c(0, 0),
limits = rev(levels(plot_data$to)),
breaks = levels(plot_data$to)[breaks]) +
scale_fill_gradientn(name = "Relative Interaction\nFrequency",
colours = c('#525252','#5b5b5b','#646464','#6e6e6e','#787878','#818181','#8b8b8b','#959595','#a0a0a0','#a9a9a9','#b4b4b4','#bfbfbf','#c8c8c8','#d4d4d4','#dedede','#e9e9e9','#f4f4f4','#ffffff','#edf5f9','#dee9f2','#d3ddec','#c7d1e5','#bfc4de','#b7b7d7','#b0aad0','#a99ec8','#a391c1','#9e83b9','#9a76b1','#9569a9','#915aa1','#8c4c98','#893c8f','#852986','#810f7c'),
# colours = rev(c("#F6BDAA", "#EC8591", "#E15287", "#AC3987", "#6B249C", "#4D1B7A", "#381B4A")),
na.value = "white",
limit = c(-0.05, 0.05),
# limit = c(0.95, 1.05),
oob = squish) +
scale_color_gradientn(name = "Relative Interaction\nFrequency",
colours = c('#525252','#5b5b5b','#646464','#6e6e6e','#787878','#818181','#8b8b8b','#959595','#a0a0a0','#a9a9a9','#b4b4b4','#bfbfbf','#c8c8c8','#d4d4d4','#dedede','#e9e9e9','#f4f4f4','#ffffff','#edf5f9','#dee9f2','#d3ddec','#c7d1e5','#bfc4de','#b7b7d7','#b0aad0','#a99ec8','#a391c1','#9e83b9','#9a76b1','#9569a9','#915aa1','#8c4c98','#893c8f','#852986','#810f7c'),
# colours = rev(c("#F6BDAA", "#EC8591", "#E15287", "#AC3987", "#6B249C", "#4D1B7A", "#381B4A")),
na.value = "white",
limit = c(-0.05, 0.05),
# limit = c(0.95, 1.05),
oob = squish) +
xlab("Individual") +
ylab("Individual") +
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
# axis.text = element_text(colour = "black", size = 6),
# axis.title = element_text(size = 7),
# axis.ticks = element_line(size = 0.3),
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none",
legend.key.height = unit(0.38, "in"),
panel.background = element_rect(size = 0.3, fill = NA),
plot.title = element_blank()) +
ggtitle(paste0("Group Size = ", groupsize))
# return graph
return(gg_avg_adj)
# return(avg_g)
})
# Save
plots <- seq(4, 7, 1)
for (plot in plots) {
gg_inter <- interaction_graphs[[plot]]
ggsave(gg_inter,
filename = paste0("output/Networks/RawPlots/", run, "_n", plot*5 ,".svg"),
width = 25,
height = 25,
units = "mm")
}
for (plot in plots) {
gg_inter <- interaction_graphs[[plot]]
ggsave(gg_inter,
filename = paste0("output/Networks/RawPlots/", run, "_n", plot*5 ,".svg"),
width = 15,
height = 15,
units = "mm")
}
####################
# Graph relative interactrion rates
####################
interaction_graphs <- lapply(1:length(soc_networks), function(i) {
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
# For each each compute interaction matrix
# Get graph and make adjacency matrix
size_graph <- lapply(1:length(graphs), function(j) {
# Format: set diagonal, rescale, and make adj matrix
this_graph <- graphs[[j]]
diag(this_graph) <- NA
dimensions <- dim(this_graph)
labs <- colnames(this_graph)
this_graph <- as.vector(this_graph)
not_chosen <- 1 - (( 1 / (dimensions[1] - 1)) * p)
expected_random <-  1 - not_chosen^2
this_graph <- (this_graph - expected_random) / expected_random #relative to expected by random (i.e., 1 - chance of not being chosen^2)
this_graph <- matrix(data = this_graph, nrow = dimensions[1], ncol = dimensions[2])
colnames(this_graph) <- labs
rownames(this_graph) <- labs
# Calculate thresh ratio
# ind <- replicates * i + j
thresh <- as.data.frame(thresh_data[[i]][j])
thresh$ThreshRatio <- log(thresh$Thresh1 / thresh$Thresh2)
# ratio <- order(thresh$ThreshRatio)
ratio <- order(thresh$Thresh1)
# Create order by threshold ratio
this_graph <- this_graph[ratio, ratio]
colnames(this_graph) <- paste0("v-", 1:dimensions[1])
rownames(this_graph) <- paste0("v-", 1:dimensions[1])
# return
return(this_graph)
})
# Avearge across all to make 'typical' adjacency matrix
avg_g <- Reduce("+", size_graph) / length(size_graph)
# Create graph object
g <- graph_from_adjacency_matrix(avg_g, mode = c("directed"), weighted = TRUE, diag = TRUE)
# Get node and edge list
node_list <- get.data.frame(g, what = "vertices")
edge_list <- get.data.frame(g, what = "edges")
# Create dataframe for plotting
plot_data <- edge_list %>% mutate(
to = factor(to, levels = node_list$name),
from = factor(from, levels = node_list$name))
# Get info for plot
groupsize <- ncol(avg_g)
# if (groupsize < 20) {
#   breaks <- c(1, seq(5, length(plot_data$to), 5))
# } else if(groupsize < 35) {
#   breaks <- c(1, seq(10, length(plot_data$to), 15))
# } else {
#   breaks <- c(1, seq(20, length(plot_data$to), 20))
# }
breaks <- c(1, length(unique(plot_data$to)))
# Plot
gg_avg_adj <- ggplot(plot_data, aes(x = from, y = to, fill = weight, color = weight)) +
geom_tile() +
theme_bw() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE, expand = c(0, 0),
position = "top",
breaks = levels(plot_data$to)[breaks]) +
scale_y_discrete(drop = FALSE, expand = c(0, 0),
limits = rev(levels(plot_data$to)),
breaks = levels(plot_data$to)[breaks]) +
scale_fill_gradientn(name = "Relative Interaction\nFrequency",
colours = c('#525252','#5b5b5b','#646464','#6e6e6e','#787878','#818181','#8b8b8b','#959595','#a0a0a0','#a9a9a9','#b4b4b4','#bfbfbf','#c8c8c8','#d4d4d4','#dedede','#e9e9e9','#f4f4f4','#ffffff','#edf5f9','#dee9f2','#d3ddec','#c7d1e5','#bfc4de','#b7b7d7','#b0aad0','#a99ec8','#a391c1','#9e83b9','#9a76b1','#9569a9','#915aa1','#8c4c98','#893c8f','#852986','#810f7c'),
# colours = rev(c("#F6BDAA", "#EC8591", "#E15287", "#AC3987", "#6B249C", "#4D1B7A", "#381B4A")),
na.value = "white",
limit = c(-0.05, 0.05),
# limit = c(0.95, 1.05),
oob = squish) +
scale_color_gradientn(name = "Relative Interaction\nFrequency",
colours = c('#525252','#5b5b5b','#646464','#6e6e6e','#787878','#818181','#8b8b8b','#959595','#a0a0a0','#a9a9a9','#b4b4b4','#bfbfbf','#c8c8c8','#d4d4d4','#dedede','#e9e9e9','#f4f4f4','#ffffff','#edf5f9','#dee9f2','#d3ddec','#c7d1e5','#bfc4de','#b7b7d7','#b0aad0','#a99ec8','#a391c1','#9e83b9','#9a76b1','#9569a9','#915aa1','#8c4c98','#893c8f','#852986','#810f7c'),
# colours = rev(c("#F6BDAA", "#EC8591", "#E15287", "#AC3987", "#6B249C", "#4D1B7A", "#381B4A")),
na.value = "white",
limit = c(-0.05, 0.05),
# limit = c(0.95, 1.05),
oob = squish) +
xlab("Individual") +
ylab("Individual") +
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
# axis.text = element_text(colour = "black", size = 6),
# axis.title = element_text(size = 7),
# axis.ticks = element_line(size = 0.3),
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none",
legend.key.height = unit(0.38, "in"),
# panel.background = element_rect(size = 0.3, fill = NA),
panel.border = element_rect(size = 0.3, fill = NA),
plot.title = element_blank()) +
ggtitle(paste0("Group Size = ", groupsize))
# return graph
return(gg_avg_adj)
# return(avg_g)
})
# Save
plots <- seq(4, 7, 1)
for (plot in plots) {
gg_inter <- interaction_graphs[[plot]]
ggsave(gg_inter,
filename = paste0("output/Networks/RawPlots/", run, "_n", plot*5 ,".svg"),
width = 15,
height = 15,
units = "mm")
}
for (plot in plots) {
gg_inter <- interaction_graphs[[plot]]
ggsave(gg_inter,
filename = paste0("output/Networks/RawPlots/", run, "_n", plot*5 ,".svg"),
width = 17,
height = 17,
units = "mm")
}
for (plot in plots) {
gg_inter <- interaction_graphs[[plot]]
ggsave(gg_inter,
filename = paste0("output/Networks/RawPlots/", run, "_n", plot*5 ,".svg"),
width = 20,
height = 20,
units = "mm")
}
gg_solo
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
############### Sweep across beta values ###############
####################
# Load data
####################
load("output/Rdata/_ProcessedData/Entropy/Sigma0-Epsilon0.1-Beta1.01.Rdata")
compiled_data$Model <- "Social_Beta1.01"
entropy_data <- compiled_data
rm(compiled_data)
load("output/Rdata/_ProcessedData/Entropy/Sigma0-Epsilon0.1-Beta1.05.Rdata")
compiled_data$Model <- "Social_Beta1.05"
entropy_data <- rbind(entropy_data, compiled_data)
rm(compiled_data)
load("output/Rdata/_ProcessedData/Entropy/Sigma0-Epsilon0.1-Beta1.1.Rdata")
compiled_data$Model <- "Social_Beta1.1"
entropy_data <- rbind(entropy_data, compiled_data)
rm(compiled_data)
load("output/Rdata/_ProcessedData/Entropy/Sigma0-Epsilon0.1-Beta1.2.Rdata")
compiled_data$Model <- "Social_Beta1.2"
entropy_data <- rbind(entropy_data, compiled_data)
rm(compiled_data)
####################
# Summarise data
####################
# Calculate mean and SE
entropy <- entropy_data %>%
group_by(Model, n) %>%
summarise(Mean = mean(Dind),
SE = sd(Dind) / sqrt(length(Dind)))
####################
# Only beta = 1.1
####################
select_entropy <- entropy %>%
filter(Model == "Social_Beta1.1")
gg_solo <- ggplot(data = select_entropy, aes(x = n, colour = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 1) +
theme_classic() +
ylab("Division of Labor") +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(values = "#636363",
name = expression("Interaction bias"(Beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3),
axis.line = element_line(size = 0.3),
aspect.ratio = 1)
gg_solo
ggsave(gg_solo, filename = "output/SpecializationPlots/Beta1.1.svg", width = 45, height = 45, units = "mm")
