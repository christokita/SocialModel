sim_data$N_star_range[(b*(first_pos-1)):(b*first_pos)] <- TRUE
}
View(sim_data)
# Summarise
sim_data <- parallel_simulations %>%
as.data.frame(.) %>%
group_by(beta, n, sim) %>%
mutate(DOL_change = Dind - lag(Dind, default = first(Dind), order_by = t)) %>%
filter(t == 6000) %>%
ungroup() %>%
group_by(beta, n) %>%
# select(beta, n, sim, DOL_change) %>%
summarise(DOL_change = mean(DOL_change))
# Calcualte N-star
betas <- unique(sim_data$beta)
sim_data$N_star_range <- FALSE
for (b in 1:length(betas)) {
first_pos <- min(which(sim_data$DOL_change[sim_data$beta == betas[b]] > 0))
sim_data$N_star_range[b * (first_pos-1:first_pos)] <- TRUE
}
View(sim_data)
# Calcualte N-star
betas <- unique(sim_data$beta)
sim_data$N_star_range <- FALSE
for (b in 1:length(betas)) {
first_pos <- min(which(sim_data$DOL_change[sim_data$beta == betas[b]] > 0))
sim_data$N_star_range[b * (first_pos-1)] <- TRUE
sim_data$N_star_range[b * first_pos] <- TRUE
}
View(sim_data)
b
b = 2
which(sim_data$DOL_change[sim_data$beta == betas[b]] > 0)
sim_data$N_star_range <- FALSE
for (b in 1:length(betas)) {
first_pos <- min(which(sim_data$DOL_change[sim_data$beta == betas[b]] > 0))
sim_data$N_star_range[(b * first_pos) - 1] <- TRUE
sim_data$N_star_range[b * first_pos] <- TRUE
}
View(sim_data)
sim_data$DOL_change[sim_data$beta == betas[b]]
sim_data$N_star_range <- FALSE
for (b in 1:length(betas)) {
first_pos <- min(which(sim_data$DOL_change[sim_data$beta == betas[b]] > 0))
sim_data$N_star_range[(b * 11) + first_pos - 1] <- TRUE
sim_data$N_star_range[(b * 11) + first_pos] <- TRUE
}
sim_data$N_star_range <- FALSE
b = 1
first_pos <- min(which(sim_data$DOL_change[sim_data$beta == betas[b]] > 0))
sim_data$N_star_range[(b * 11) + first_pos - 1] <- TRUE
sim_data$N_star_range[(b * 11) + first_pos] <- TRUE
b = 2
first_pos <- min(which(sim_data$DOL_change[sim_data$beta == betas[b]] > 0))
sim_data$N_star_range[(b * 11) + first_pos - 1] <- TRUE
sim_data$N_star_range[(b * 11) + first_pos] <- TRUE
# Calcualte N-star
betas <- unique(sim_data$beta)
sim_data$N_star_range <- FALSE
for (b in 1:length(betas)) {
first_pos <- min(which(sim_data$DOL_change[sim_data$beta == betas[b]] > 0))
sim_data$N_star_range[(b * 11) + first_pos - 1] <- TRUE
sim_data$N_star_range[(b * 11) + first_pos] <- TRUE
}
View(sim_data)
b = 10
first_pos <- min(which(sim_data$DOL_change[sim_data$beta == betas[b]] > 0))
sim_data$N_star_range[(b * 11) + first_pos - 1] <- TRUE
first_pos
b * 11) + first_pos - 1
(b * 11) + first_pos - 1)
(b * 11) + first_pos - 1
(b * 11) + first_po
(b * 11) + first_pos
View(sim_data)
betas[10]
length(betas)
# Calcualte N-star
betas <- unique(sim_data$beta)
sim_data$N_star_range <- FALSE
for (b in 1:length(betas)) {
first_pos <- min(which(sim_data$DOL_change[sim_data$beta == betas[b]] > 0))
set_of_rows_start <- (b-1) * 11 #account for which set of rows the indezxing is occuring in
sim_data$N_star_range[set_of_rows_start + first_pos - 1] <- TRUE
sim_data$N_star_range[set_of_rows_start + first_pos] <- TRUE
}
View(sim_data)
Nstar_data <- sim_data %>%
filter(N_star_range == TRUE)
View(Nstar_data)
names(sim_data)
Nstar_data <- sim_data %>%
select(beta) %>%
unique(.) %>%
mutate(N_star = NA)
View(Nstar_data)
b = betas[1]
upper_n <- max(sim_data$n[sim_data$beta == b])
lower_n <- min(sim_data$n[sim_data$beta == b])
sim_data <- sim_data %>%
filter(N_star_range == TRUE)
Nstar_data <- sim_data %>%
select(beta) %>%
unique(.) %>%
mutate(N_star = NA)
for(b in betas) {
lower_n <- min(sim_data$n[sim_data$beta == b])
upper_n <- max(sim_data$n[sim_data$beta == b])
}
lower_n <- min(sim_data$n[sim_data$beta == b])
upper_n <- max(sim_data$n[sim_data$beta == b])
b = betas[1]
lower_n <- min(sim_data$n[sim_data$beta == b])
upper_n <- max(sim_data$n[sim_data$beta == b])
lower_DOL <- min(sim_data$DOL_change[sim_data$beta == b])
upper_DOL <- max(sim_data$DOL_change[sim_data$beta == b])
slope <- (upper_DOL - lower_DOL) / (upper_n - lower_n)
slope
slope
for(b in betas) {
lower_n <- min(sim_data$n[sim_data$beta == b])
upper_n <- max(sim_data$n[sim_data$beta == b])
lower_DOL <- min(sim_data$DOL_change[sim_data$beta == b])
upper_DOL <- max(sim_data$DOL_change[sim_data$beta == b])
slope <- (upper_DOL - lower_DOL) / (upper_n - lower_n)
n_star <- lower_DOL / slope #find x intercept
n_star <- n_star + lower_n #make actual n*
Nstar_data$N_star[Nstar_data$beta == b] <- n_star
}
View(Nstar_data)
b = betas[1]
lower_n <- min(sim_data$n[sim_data$beta == b])
upper_n <- max(sim_data$n[sim_data$beta == b])
lower_DOL <- min(sim_data$DOL_change[sim_data$beta == b])
upper_DOL <- max(sim_data$DOL_change[sim_data$beta == b])
slope <- (upper_DOL - lower_DOL) / (upper_n - lower_n)
n_star <- lower_DOL / slope #find x intercept
for(b in betas) {
lower_n <- min(sim_data$n[sim_data$beta == b])
upper_n <- max(sim_data$n[sim_data$beta == b])
lower_DOL <- min(sim_data$DOL_change[sim_data$beta == b])
upper_DOL <- max(sim_data$DOL_change[sim_data$beta == b])
slope <- (upper_DOL - lower_DOL) / (upper_n - lower_n)
n_star <- -lower_DOL / slope #find x intercept
n_star <- n_star + lower_n #make actual n*
Nstar_data$N_star[Nstar_data$beta == b] <- n_star
}
View(Nstar_data)
analytical_data <- data.frame(beta = seq(1.001, 1.255, 0.0001), n = rep(NA, length(seq(1.001, 1.255, 0.0001))))
for (i in 1:nrow(analytical_data)) {
analytical_data[i, 2] <- (2 * analytical_data[i, 1]) / (0.8 * (analytical_data[i, 1] - 1))
}
analytical_data <- analytical_data %>%
filter(n < 102.5)
View(analytical_data)
####################
# Plot
####################
gg_nstar <- ggplot(aes(x = beta)) +
geom_line(data = analytical_data,
aes(y = n),
size = 0.4) +
geom_point(data = Nstar_data,
aes(y = Nstar),
size = 0.8) +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("n"^"*"))) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
theme_ctokita()
####################
# Plot
####################
gg_nstar <- ggplot() +
geom_line(data = analytical_data,
aes(x = beta, y = n),
size = 0.4) +
geom_point(data = Nstar_data,
aes(x = beta, y = Nstar),
size = 0.8) +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("n"^"*"))) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
theme_ctokita()
gg_nstar
names(Nstar_data)
####################
# Plot
####################
gg_nstar <- ggplot() +
geom_line(data = analytical_data,
aes(x = beta, y = n),
size = 0.4) +
geom_point(data = Nstar_data,
aes(x = beta, y = N_star),
size = 0.8) +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("n"^"*"))) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
theme_ctokita()
gg_nstar
####################
# Plot
####################
gg_nstar <- ggplot() +
geom_line(data = analytical_data,
aes(x = beta, y = n),
size = 0.4) +
geom_point(data = Nstar_data,
aes(x = beta, y = N_star),
size = 1) +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("n"^"*"))) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
theme_ctokita()
gg_nstar
####################
# Plot
####################
gg_nstar <- ggplot() +
geom_line(data = analytical_data,
aes(x = beta, y = n),
size = 0.4,
colour = "#fb9a99") +
geom_point(data = Nstar_data,
aes(x = beta, y = N_star),
size = 1,
colour = "#e31a1c") +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("n"^"*"))) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
theme_ctokita()
gg_nstar
####################
# Plot
####################
gg_nstar <- ggplot() +
geom_line(data = analytical_data,
aes(x = beta, y = n),
size = 0.4,
colour = "#fb9a99") +
geom_point(data = Nstar_data,
aes(x = beta, y = N_star),
size = 1,
colour = "#e31a1c") +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("n"^"*"))) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
theme_ctokita() +
theme(aspect.ratio = 1)
gg_nstar
ggsave("output/AnalyticalResults/NstarCalculation.png", width = 45, heigh = 45, units = "mm", dpi = 400)
####################
# Plot
####################
gg_nstar <- ggplot() +
geom_point(data = Nstar_data,
aes(x = beta, y = N_star),
size = 1,
colour = "#e31a1c") +
geom_line(data = analytical_data,
aes(x = beta, y = n),
size = 0.4,
colour = "#fb9a99") +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("n"^"*"))) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
theme_ctokita() +
theme(aspect.ratio = 1)
gg_nstar
ggsave("output/AnalyticalResults/NstarCalculation.png", width = 45, heigh = 45, units = "mm", dpi = 400)
####################
# Plot
####################
gg_nstar <- ggplot() +
geom_point(data = Nstar_data,
aes(x = beta, y = N_star),
size = 0.4,
colour = "#e31a1c") +
geom_line(data = analytical_data,
aes(x = beta, y = n),
size = 0.4,
colour = "#fb9a99") +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("n"^"*"))) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
theme_ctokita() +
theme(aspect.ratio = 1)
gg_nstar
ggsave("output/AnalyticalResults/NstarCalculation.png", width = 45, heigh = 45, units = "mm", dpi = 400)
####################
# Plot
####################
gg_nstar <- ggplot() +
geom_line(data = analytical_data,
aes(x = beta, y = n),
size = 0.4,
colour = "#fb9a99") +
geom_point(data = Nstar_data,
aes(x = beta, y = N_star),
size = 0.4,
colour = "#e31a1c") +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("n"^"*"))) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
theme_ctokita() +
theme(aspect.ratio = 1)
gg_nstar
ggsave("output/AnalyticalResults/NstarCalculation.png", width = 45, heigh = 45, units = "mm", dpi = 400)
####################
# Plot
####################
gg_nstar <- ggplot() +
geom_line(data = analytical_data,
aes(x = beta, y = n),
size = 0.2,
colour = "#fb9a99") +
geom_point(data = Nstar_data,
aes(x = beta, y = N_star),
size = 0.4,
colour = "#e31a1c") +
xlab(expression(paste("Interaction bias (", italic(beta), ")"))) +
ylab(expression(paste("n"^"*"))) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
theme_ctokita() +
theme(aspect.ratio = 1)
gg_nstar
ggsave("output/AnalyticalResults/NstarCalculation.png", width = 45, heigh = 45, units = "mm", dpi = 400)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/2b_Process_ClusterSimData.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/2b_Process_ClusterSimData.R', echo=TRUE)
# Load and process data
####################
load('output/Rdata/_ProcessedData/Entropy/Sigma0-Beta1.1_EpsSweep-HighThreshLimit.Rdata')
high_thresh <- compiled_data %>%
mutate(Model = "high_thresh") %>%
group_by(Model, epsilon, beta) %>%
summarise(Mean = mean(Dind),
SD = sd(Dind)) %>%
as.data.frame()
load("output/ParameterSpace/EpsilonBetaSweep-n80.Rdata")
normal_thresh <- entropy %>%
mutate(Model = "normal_thresh") %>%
filter(beta == 1.1) %>%
select(Model, epsilon, beta, Dind_mean, Dind_SD)
names(normal_thresh) <- c("Model", "epsilon", "beta", "Mean", "SD")
entropy_data <- rbind(high_thresh, normal_thresh)
####################
# Plot entropy plots
####################
gg_comp <- ggplot(entropy_data, aes(x = epsilon, y = Mean, group = Model, color = Model)) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_color_manual(name = "Thresh. limits",
values = c("#a6cee3", "#1f78b4"),
labels = c("[0, 1,000]", "[0, 100]")) +
# ggtitle(expression(paste(italic(epsilon), "= 0.4, ", italic(beta), "= 1.1"))) +
scale_x_continuous(breaks = seq(1, 1.25, 0.05)) +
theme(title = element_text(size = 6),
axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = c(0.8, 0.2),
legend.title = element_text(size = 6,
face = "bold",
hjust = 5),
legend.text = element_text(size = 6),
legend.key.height = unit(2, "mm"),
legend.key.width = unit(3, "mm"),
legend.background = element_blank(),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_comp
####################
# Plot entropy plots
####################
gg_comp <- ggplot(entropy_data, aes(x = epsilon, y = Mean, group = Model, color = Model)) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_color_manual(name = "Thresh. limits",
values = c("#a6cee3", "#1f78b4"),
labels = c("[0, 1,000]", "[0, 100]")) +
# ggtitle(expression(paste(italic(epsilon), "= 0.4, ", italic(beta), "= 1.1"))) +
scale_x_continuous(breaks = seq(0, 0.6, 0.1)) +
theme(title = element_text(size = 6),
axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = c(0.8, 0.2),
legend.title = element_text(size = 6,
face = "bold",
hjust = 5),
legend.text = element_text(size = 6),
legend.key.height = unit(2, "mm"),
legend.key.width = unit(3, "mm"),
legend.background = element_blank(),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_comp
####################
# Plot entropy plots
####################
gg_comp <- ggplot(entropy_data, aes(x = epsilon, y = Mean, group = Model, color = Model)) +
geom_errorbar(aes(ymin = ifelse((Mean - SD) > 0, Mean - SD, 0), ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_color_manual(name = "Thresh. limits",
values = c("#a6cee3", "#1f78b4"),
labels = c("[0, 1,000]", "[0, 100]")) +
# ggtitle(expression(paste(italic(epsilon), "= 0.4, ", italic(beta), "= 1.1"))) +
scale_x_continuous(breaks = seq(0, 0.6, 0.1)) +
theme(title = element_text(size = 6),
axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = c(0.8, 0.2),
legend.title = element_text(size = 6,
face = "bold",
hjust = 5),
legend.text = element_text(size = 6),
legend.key.height = unit(2, "mm"),
legend.key.width = unit(3, "mm"),
legend.background = element_blank(),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_comp
####################
# Plot entropy plots
####################
gg_comp <- ggplot(entropy_data, aes(x = epsilon, y = Mean, group = Model, color = Model)) +
geom_errorbar(aes(ymin = ifelse((Mean - SD) > 0, Mean - SD, 0), ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_color_manual(name = "Thresh. limits",
values = c("#a6cee3", "#1f78b4"),
labels = c("[0, 1,000]", "[0, 100]")) +
# ggtitle(expression(paste(italic(epsilon), "= 0.4, ", italic(beta), "= 1.1"))) +
scale_x_continuous(breaks = seq(0, 0.6, 0.1)) +
theme(title = element_text(size = 6),
axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = c(0.3, 0.2),
legend.title = element_text(size = 6,
face = "bold",
hjust = 5),
legend.text = element_text(size = 6),
legend.key.height = unit(2, "mm"),
legend.key.width = unit(3, "mm"),
legend.background = element_blank(),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_comp
ggsave(gg_comp, file = "output/SpecializationPlots/ThresholdLimitComparison.png", height = 45, width = 45, units = "mm")
ggsave(gg_comp, file = "output/SpecializationPlots/ThresholdLimitComparison.svg", height = 45, width = 45, units = "mm")
View(entropy_data)
eps_values <- unique(normal_thresh$epsilon)
entropy_data <- rbind(high_thresh, normal_thresh)
entropy_data <- entropy_data %>%
filter(epsilon %in% eps_values)
####################
# Plot entropy plots
####################
gg_comp <- ggplot(entropy_data, aes(x = epsilon, y = Mean, group = Model, color = Model)) +
geom_errorbar(aes(ymin = ifelse((Mean - SD) > 0, Mean - SD, 0), ymax = Mean + SD),
width = 0,
size = 0.3) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_color_manual(name = "Thresh. limits",
values = c("#a6cee3", "#1f78b4"),
labels = c("[0, 1,000]", "[0, 100]")) +
# ggtitle(expression(paste(italic(epsilon), "= 0.4, ", italic(beta), "= 1.1"))) +
scale_x_continuous(breaks = seq(0, 0.6, 0.1)) +
theme(title = element_text(size = 6),
axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = c(0.3, 0.2),
legend.title = element_text(size = 6,
face = "bold",
hjust = 5),
legend.text = element_text(size = 6),
legend.key.height = unit(2, "mm"),
legend.key.width = unit(3, "mm"),
legend.background = element_blank(),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_comp
