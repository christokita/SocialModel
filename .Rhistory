axis.title = element_blank(),
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none",
panel.border = element_rect(size = 1.5),
title = element_blank()) +
ggtitle(paste0("Group Size = ", groupsize))
# return graph
return(gg_avg_adj)
# return(avg_g)
})
multiplot(plotlist = interaction_graphs, layout = matrix(c(seq(1:length(interaction_graphs))), nrow=2, byrow=TRUE))
i = 1
# Get graphs
graphs <- fix_groups_graphs[[i]]
replicates <- length(graphs)
# For each each compute interaction matrix
# Get graph and make adjacency matrix
size_graph <- lapply(1:length(graphs), function(j) {
# Format: set diagonal, rescale, and make adj matrix
this_graph <- graphs[[j]]
diag(this_graph) <- NA
dimensions <- dim(this_graph)
labs <- colnames(this_graph)
this_graph <- as.vector(this_graph)
this_graph <- scale(this_graph)
this_graph <- matrix(data = this_graph, nrow = dimensions[1], ncol = dimensions[2])
colnames(this_graph) <- labs
rownames(this_graph) <- labs
# Calculate thresh ratio
ind <- replicates * i + j
thresh <- as.data.frame(soc_groups_threshMat[[i]][j])
thresh$ThreshRatio <- log(thresh$Thresh1 / thresh$Thresh2)
ratio <- order(thresh$ThreshRatio)
# Create order by threshold ratio
this_graph <- this_graph[ratio, ratio]
# return
return(this_graph)
})
# Avearge across all to make 'typical' adjacency matrix
avg_g <- Reduce("+", size_graph) / length(size_graph)
View(avg_g)
# Create graph object
g <- graph_from_adjacency_matrix(avg_g, mode = c("directed"), weighted = TRUE, diag = TRUE)
# Get node and edge list
node_list <- get.data.frame(g, what = "vertices")
edge_list <- get.data.frame(g, what = "edges")
# Create dataframe for plotting
plot_data <- edge_list %>% mutate(
to = factor(to, levels = node_list$name),
from = factor(from, levels = node_list$name))
View(plot_data)
# Plot
groupsize <- ncol(avg_g)
View(plot_data)
View(plot_data)
gg_avg_adj <- ggplot(plot_data, aes(x = to, y = from, fill = weight)) +
geom_raster() +
theme_bw() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE, expand = c(0, 0)) +
scale_y_discrete(drop = FALSE, expand = c(0, 0)) +
scale_y_reverse()) +
# scale_fill_gradientn(colours = rev(brewer.pal(9,"RdYlBu")), na.value = "white", limit = c(-1.5, 1.5), oob = squish) +
scale_fill_gradientn(name = "Relative Interaction\nFrequency",
colours = brewer.pal(5,"BuPu"),
na.value = "black",
limit = c(-0.5, 0.5),
oob = squish) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none",
panel.border = element_rect(size = 1.5),
title = element_blank()) +
ggtitle(paste0("Group Size = ", groupsize))
gg_avg_adj <- ggplot(plot_data, aes(x = to, y = from, fill = weight)) +
geom_raster() +
theme_bw() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE, expand = c(0, 0)) +
scale_y_discrete(drop = FALSE, expand = c(0, 0)) +
scale_y_reverse() +
# scale_fill_gradientn(colours = rev(brewer.pal(9,"RdYlBu")), na.value = "white", limit = c(-1.5, 1.5), oob = squish) +
scale_fill_gradientn(name = "Relative Interaction\nFrequency",
colours = brewer.pal(5,"BuPu"),
na.value = "black",
limit = c(-0.5, 0.5),
oob = squish) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none",
panel.border = element_rect(size = 1.5),
title = element_blank()) +
ggtitle(paste0("Group Size = ", groupsize))
gg_avg_adj <- ggplot(plot_data, aes(x = to, y = from, fill = weight)) +
geom_raster() +
theme_bw() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE, expand = c(0, 0)) +
scale_y_reverse(drop = FALSE, expand = c(0, 0)) +
# scale_fill_gradientn(colours = rev(brewer.pal(9,"RdYlBu")), na.value = "white", limit = c(-1.5, 1.5), oob = squish) +
scale_fill_gradientn(name = "Relative Interaction\nFrequency",
colours = brewer.pal(5,"BuPu"),
na.value = "black",
limit = c(-0.5, 0.5),
oob = squish) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none",
panel.border = element_rect(size = 1.5),
title = element_blank()) +
ggtitle(paste0("Group Size = ", groupsize))
gg_avg_adj <- ggplot(plot_data, aes(x = to, y = from, fill = weight)) +
geom_raster() +
theme_bw() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE, expand = c(0, 0)) +
scale_y_reverse(expand = c(0, 0)) +
# scale_fill_gradientn(colours = rev(brewer.pal(9,"RdYlBu")), na.value = "white", limit = c(-1.5, 1.5), oob = squish) +
scale_fill_gradientn(name = "Relative Interaction\nFrequency",
colours = brewer.pal(5,"BuPu"),
na.value = "black",
limit = c(-0.5, 0.5),
oob = squish) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none",
panel.border = element_rect(size = 1.5),
title = element_blank()) +
ggtitle(paste0("Group Size = ", groupsize))
gg_avg_adj
gg_avg_adj <- ggplot(plot_data, aes(x = to, y = from, fill = weight)) +
geom_raster() +
theme_bw() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE, expand = c(0, 0)) +
scale_y_discrete(drop = FALSE, expand = c(0, 0), trans = "reverse") +
# scale_fill_gradientn(colours = rev(brewer.pal(9,"RdYlBu")), na.value = "white", limit = c(-1.5, 1.5), oob = squish) +
scale_fill_gradientn(name = "Relative Interaction\nFrequency",
colours = brewer.pal(5,"BuPu"),
na.value = "black",
limit = c(-0.5, 0.5),
oob = squish) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none",
panel.border = element_rect(size = 1.5),
title = element_blank()) +
ggtitle(paste0("Group Size = ", groupsize))
gg_avg_adj
gg_avg_adj <- ggplot(plot_data, aes(x = to, y = from, fill = weight)) +
geom_raster() +
theme_bw() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE, expand = c(0, 0)) +
scale_y_discrete(drop = FALSE, expand = c(0, 0)) +
# scale_fill_gradientn(colours = rev(brewer.pal(9,"RdYlBu")), na.value = "white", limit = c(-1.5, 1.5), oob = squish) +
scale_fill_gradientn(name = "Relative Interaction\nFrequency",
colours = brewer.pal(5,"BuPu"),
na.value = "black",
limit = c(-0.5, 0.5),
oob = squish) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none",
panel.border = element_rect(size = 1.5),
title = element_blank()) +
ggtitle(paste0("Group Size = ", groupsize))
gg_avg_adj
gg_avg_adj <- ggplot(plot_data, aes(x = to, y = from, fill = weight)) +
geom_raster() +
theme_bw() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE, expand = c(0, 0)) +
scale_y_discrete(drop = FALSE, expand = c(0, 0), limits = rev(levels(as.factor(from)))) +
# scale_fill_gradientn(colours = rev(brewer.pal(9,"RdYlBu")), na.value = "white", limit = c(-1.5, 1.5), oob = squish) +
scale_fill_gradientn(name = "Relative Interaction\nFrequency",
colours = brewer.pal(5,"BuPu"),
na.value = "black",
limit = c(-0.5, 0.5),
oob = squish) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none",
panel.border = element_rect(size = 1.5),
title = element_blank()) +
ggtitle(paste0("Group Size = ", groupsize))
gg_avg_adj <- ggplot(plot_data, aes(x = to, y = from, fill = weight)) +
geom_raster() +
theme_bw() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE, expand = c(0, 0)) +
scale_y_discrete(drop = FALSE, expand = c(0, 0), limits = rev(levels(as.factor(plot_data$from)))) +
# scale_fill_gradientn(colours = rev(brewer.pal(9,"RdYlBu")), na.value = "white", limit = c(-1.5, 1.5), oob = squish) +
scale_fill_gradientn(name = "Relative Interaction\nFrequency",
colours = brewer.pal(5,"BuPu"),
na.value = "black",
limit = c(-0.5, 0.5),
oob = squish) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none",
panel.border = element_rect(size = 1.5),
title = element_blank()) +
ggtitle(paste0("Group Size = ", groupsize))
gg_avg_adj
interaction_graphs <- lapply(1:length(fix_groups_graphs), function(i) {
# Get graphs
graphs <- fix_groups_graphs[[i]]
replicates <- length(graphs)
# For each each compute interaction matrix
# Get graph and make adjacency matrix
size_graph <- lapply(1:length(graphs), function(j) {
# Format: set diagonal, rescale, and make adj matrix
this_graph <- graphs[[j]]
diag(this_graph) <- NA
dimensions <- dim(this_graph)
labs <- colnames(this_graph)
this_graph <- as.vector(this_graph)
this_graph <- scale(this_graph)
this_graph <- matrix(data = this_graph, nrow = dimensions[1], ncol = dimensions[2])
colnames(this_graph) <- labs
rownames(this_graph) <- labs
# Calculate thresh ratio
ind <- replicates * i + j
thresh <- as.data.frame(soc_groups_threshMat[[i]][j])
thresh$ThreshRatio <- log(thresh$Thresh1 / thresh$Thresh2)
ratio <- order(thresh$ThreshRatio)
# Create order by threshold ratio
this_graph <- this_graph[ratio, ratio]
# return
return(this_graph)
})
# Avearge across all to make 'typical' adjacency matrix
avg_g <- Reduce("+", size_graph) / length(size_graph)
# Create graph object
g <- graph_from_adjacency_matrix(avg_g, mode = c("directed"), weighted = TRUE, diag = TRUE)
# Get node and edge list
node_list <- get.data.frame(g, what = "vertices")
edge_list <- get.data.frame(g, what = "edges")
# Create dataframe for plotting
plot_data <- edge_list %>% mutate(
to = factor(to, levels = node_list$name),
from = factor(from, levels = node_list$name))
# Plot
groupsize <- ncol(avg_g)
gg_avg_adj <- ggplot(plot_data, aes(x = to, y = from, fill = weight)) +
geom_raster() +
theme_bw() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE, expand = c(0, 0)) +
scale_y_discrete(drop = FALSE, expand = c(0, 0), limits = rev(levels(as.factor(plot_data$from)))) +
# scale_fill_gradientn(colours = rev(brewer.pal(9,"RdYlBu")), na.value = "white", limit = c(-1.5, 1.5), oob = squish) +
scale_fill_gradientn(name = "Relative Interaction\nFrequency",
colours = brewer.pal(5,"BuPu"),
na.value = "black",
limit = c(-0.5, 0.5),
oob = squish) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none",
panel.border = element_rect(size = 1.5),
title = element_blank()) +
ggtitle(paste0("Group Size = ", groupsize))
# return graph
return(gg_avg_adj)
# return(avg_g)
})
multiplot(plotlist = interaction_graphs, layout = matrix(c(seq(1:length(interaction_graphs))), nrow=2, byrow=TRUE))
rm(list = ls())
source("scripts/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
# Load social
load("output/Rdata/Sigma0.0-Epsilon0.01-Bias1.1.Rdata")
g <- groups_graphs[[5]][[1]]
threshMat <- groups_thresh[[5]][[1]]
diag(g) <- NA
# Only show edges above 50th percentile
percentiles <- quantile(g, na.rm = TRUE)
fiftypercent <- percentiles[3]
seventyfivepercent <- percentiles[4]
g[g < fiftypercent] <- 0
diag(g) <- 0
# Edgelist
graph <- graph.adjacency(g, weighted = T)
edgelist <- get.edgelist(graph)
edgelist <- as.data.frame(edgelist)
names(edgelist) <- c("Source", "Target")
edgelist$Weight <- E(graph)$weight
# Nodelist
nodelist <- data.frame(Id = rownames(threshMat))
nodelist$Thresh1 <- threshMat[ , 1]
nodelist$Thresh2 <- threshMat[ , 2]
nodelist$ThreshRatio <- log(threshMat[ , 1] / threshMat[ , 2])
nodelist$ThreshRatioBounded <- nodelist$ThreshRatio
nodelist$ThreshRatioBounded[nodelist$ThreshRatioBounded < -0.5] <- -0.5
nodelist$ThreshRatioBounded[nodelist$ThreshRatioBounded > 0.5] <- 0.5
g <- groups_graphs[[7]][[1]]
threshMat <- groups_thresh[[7]][[1]]
diag(g) <- NA
# Only show edges above 50th percentile
percentiles <- quantile(g, na.rm = TRUE)
fiftypercent <- percentiles[3]
seventyfivepercent <- percentiles[4]
g[g < fiftypercent] <- 0
diag(g) <- 0
# Edgelist
graph <- graph.adjacency(g, weighted = T)
edgelist <- get.edgelist(graph)
edgelist <- as.data.frame(edgelist)
names(edgelist) <- c("Source", "Target")
edgelist$Weight <- E(graph)$weight
# Nodelist
nodelist <- data.frame(Id = rownames(threshMat))
nodelist$Thresh1 <- threshMat[ , 1]
nodelist$Thresh2 <- threshMat[ , 2]
nodelist$ThreshRatio <- log(threshMat[ , 1] / threshMat[ , 2])
nodelist$ThreshRatioBounded <- nodelist$ThreshRatio
nodelist$ThreshRatioBounded[nodelist$ThreshRatioBounded < -0.5] <- -0.5
nodelist$ThreshRatioBounded[nodelist$ThreshRatioBounded > 0.5] <- 0.5
write.csv(edgelist, file = "output/Networks/GroupSize70FIXEDedgelist.csv", row.names = FALSE)
write.csv(nodelist, file = "output/Networks/GroupSize70FIXEDnodelist.csv", row.names = FALSE)
write.csv(nodelist, file = "output/Networks/GroupSize70nodelist.csv", row.names = FALSE)
table(edgelist$Weight==0)
View(edgelist)
g <- groups_graphs[[7]][[1]]
threshMat <- groups_thresh[[7]][[1]]
diag(g) <- NA
# Only show edges above 50th percentile
percentiles <- quantile(g, na.rm = TRUE)
fiftypercent <- percentiles[3]
seventyfivepercent <- percentiles[4]
g
g[g < fiftypercent] <- 0
g
diag(g) <- 0
# Edgelist
graph <- graph.adjacency(g, weighted = T)
edgelist <- get.edgelist(graph)
edgelist <- as.data.frame(edgelist)
names(edgelist) <- c("Source", "Target")
edgelist$Weight <- E(graph)$weight
g <- groups_graphs[[7]][[1]]
# Edgelist
graph <- graph.adjacency(g, weighted = T)
edgelist <- get.edgelist(graph)
edgelist <- as.data.frame(edgelist)
rm(list = ls())
source("scripts/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
# Load social
load("output/Rdata/Sigma0.01-Epsilon0.01-Bias1.1.Rdata")
g <- groups_graphs[[7]][[1]]
threshMat <- groups_thresh[[7]][[1]]
diag(g) <- NA
# Only show edges above 50th percentile
percentiles <- quantile(g, na.rm = TRUE)
fiftypercent <- percentiles[3]
seventyfivepercent <- percentiles[4]
g[g < fiftypercent] <- 0
diag(g) <- 0
# Edgelist
graph <- graph.adjacency(g, weighted = T)
edgelist <- get.edgelist(graph)
edgelist <- as.data.frame(edgelist)
names(edgelist) <- c("Source", "Target")
edgelist$Weight <- E(graph)$weight
g <- groups_graphs[[6]][[1]]
threshMat <- groups_thresh[[6]][[1]]
rm(list = ls())
source("scripts/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
# Load social
load("output/Rdata/Sigma0.01-Epsilon0.01-Bias1.1.Rdata")
g <- groups_graphs[[5]][[1]]
threshMat <- groups_thresh[[5]][[1]]
diag(g) <- NA
percentiles <- quantile(g, na.rm = TRUE)
fiftypercent <- percentiles[3]
seventyfivepercent <- percentiles[4]
g[g < fiftypercent] <- 0
diag(g) <- 0
# Edgelist
graph <- graph.adjacency(g, weighted = T)
edgelist <- get.edgelist(graph)
edgelist <- as.data.frame(edgelist)
names(edgelist) <- c("Source", "Target")
edgelist$Weight <- E(graph)$weight
# Nodelist
nodelist <- data.frame(Id = rownames(threshMat))
nodelist$Thresh1 <- threshMat[ , 1]
nodelist$Thresh2 <- threshMat[ , 2]
nodelist$ThreshRatio <- log(threshMat[ , 1] / threshMat[ , 2])
nodelist$ThreshRatioBounded <- nodelist$ThreshRatio
nodelist$ThreshRatioBounded[nodelist$ThreshRatioBounded < -0.5] <- -0.5
nodelist$ThreshRatioBounded[nodelist$ThreshRatioBounded > 0.5] <- 0.5
write.csv(edgelist, file = "output/Networks/GroupSize50FIXEDedgelist.csv", row.names = FALSE)
write.csv(nodelist, file = "output/Networks/GroupSize50FIXEDnodelist.csv", row.names = FALSE)
rm(list = ls())
source("scripts/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
# Load social
load("output/Rdata/Sigma0.0-Epsilon0.01-Bias1.1.Rdata")
g <- groups_graphs[[5]][[1]]
threshMat <- groups_thresh[[5]][[1]]
g <- groups_graphs[[6]][[1]]
threshMat <- groups_thresh[[6]][[1]]
diag(g) <- NA
# Only show edges above 50th percentile
percentiles <- quantile(g, na.rm = TRUE)
fiftypercent <- percentiles[3]
seventyfivepercent <- percentiles[4]
g[g < fiftypercent] <- 0
diag(g) <- 0
# Edgelist
graph <- graph.adjacency(g, weighted = T)
edgelist <- get.edgelist(graph)
edgelist <- as.data.frame(edgelist)
names(edgelist) <- c("Source", "Target")
edgelist$Weight <- E(graph)$weight
# Nodelist
nodelist <- data.frame(Id = rownames(threshMat))
nodelist$Thresh1 <- threshMat[ , 1]
nodelist$Thresh2 <- threshMat[ , 2]
nodelist$ThreshRatio <- log(threshMat[ , 1] / threshMat[ , 2])
nodelist$ThreshRatioBounded <- nodelist$ThreshRatio
nodelist$ThreshRatioBounded[nodelist$ThreshRatioBounded < -0.5] <- -0.5
nodelist$ThreshRatioBounded[nodelist$ThreshRatioBounded > 0.5] <- 0.5
write.csv(edgelist, file = "output/Networks/GroupSize50edgelist.csv", row.names = FALSE)
write.csv(nodelist, file = "output/Networks/GroupSize50nodelist.csv", row.names = FALSE)
rm(list = ls())
source("scripts/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
# Load social
load("output/Rdata/Sigma0.01-FIXED-Bias1.1.Rdata")
g <- groups_graphs[[6]][[1]]
threshMat <- groups_thresh[[6]][[1]]
g <- groups_graphs[[6]][[1]]
threshMat <- groups_thresh[[6]][[1]]
diag(g) <- NA
# Only show edges above 50th percentile
percentiles <- quantile(g, na.rm = TRUE)
fiftypercent <- percentiles[3]
seventyfivepercent <- percentiles[4]
g[g < fiftypercent] <- 0
diag(g) <- 0
# Edgelist
graph <- graph.adjacency(g, weighted = T)
edgelist <- get.edgelist(graph)
edgelist <- as.data.frame(edgelist)
names(edgelist) <- c("Source", "Target")
edgelist$Weight <- E(graph)$weight
# Nodelist
nodelist <- data.frame(Id = rownames(threshMat))
nodelist$Thresh1 <- threshMat[ , 1]
nodelist$Thresh2 <- threshMat[ , 2]
nodelist$ThreshRatio <- log(threshMat[ , 1] / threshMat[ , 2])
nodelist$ThreshRatioBounded <- nodelist$ThreshRatio
nodelist$ThreshRatioBounded[nodelist$ThreshRatioBounded < -0.5] <- -0.5
nodelist$ThreshRatioBounded[nodelist$ThreshRatioBounded > 0.5] <- 0.5
write.csv(edgelist, file = "output/Networks/GroupSize50FIXEDedgelist.csv", row.names = FALSE)
write.csv(nodelist, file = "output/Networks/GroupSize50FIXEDnodelist.csv", row.names = FALSE)
