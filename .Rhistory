theme(aspect.ratio = 1,
axis.text = element_text(color = "black"))  +
facet_wrap(~n, scales = "free")
gg_weighted_ratios
weighted_summary <- weighted_ratios %>%
group_by(n, Model) %>%
summarise(CorrelationThresholds = cor(ThreshRatio, WeightNeighbor))
gg_weighted_corr <- ggplot(data = weighted_summary, aes(x = n, y = CorrelationThresholds, group = Model, color = Model)) +
geom_line(aes(linetype = Model)) +
geom_point(size = 2) +
theme_classic(base_size = 10) +
scale_color_manual(values = c("black", "mediumseagreen")) +
scale_linetype_manual(values = c("dashed", "solid")) +
theme(aspect.ratio = 1,
axis.text = element_text(color = "black"))
gg_weighted_corr
###### Network disparity ######
gg_disparity <- ggplot(data = weighted_ratios, aes(x = ThreshRatio, y = Disparity)) +
geom_point(size = 0.2) +
theme_classic(base_size = 10) +
theme(aspect.ratio = 1,
axis.text = element_text(color = "black"))  +
facet_wrap(~n, scales = "free")
gg_disparity
gg_weighted_ratios <- ggplot(data = weighted_ratios, aes(x = ThreshRatio, y = WeightNeighbor)) +
geom_point() +
theme_classic(base_size = 10) +
theme(aspect.ratio = 1,
axis.text = element_text(color = "black"))  +
facet_wrap(~n, scales = "free")
gg_weighted_ratios
weighted_summary <- weighted_ratios %>%
group_by(n, Model) %>%
summarise(CorrelationThresholds = cor(ThreshRatio, WeightNeighbor))
gg_weighted_corr <- ggplot(data = weighted_summary, aes(x = n, y = CorrelationThresholds, group = Model, color = Model)) +
geom_line(aes(linetype = Model)) +
geom_point(size = 2) +
theme_classic(base_size = 10) +
scale_color_manual(values = c("black", "mediumseagreen")) +
scale_linetype_manual(values = c("dashed", "solid")) +
theme(aspect.ratio = 1,
axis.text = element_text(color = "black"))
gg_weighted_corr
####################
# Load data
####################
# Load social
load("output/Rdata/Sigma0.0-Epsilon0.01-Bias1.1.Rdata")
soc_graphs <- unlist(groups_graphs, recursive = FALSE)
soc_threshMat <- unlist(groups_thresh, recursive = FALSE)
soc_actMat <- unlist(groups_taskDist, recursive = FALSE)
social_graphs <- lapply(1:length(soc_graphs), function(i) {
# Calculated degree
degree <- rowSums(soc_graphs[[i]])
degree <- as.data.frame(degree)
degree$Id <- row.names(degree)
# Calculate thresholds
thresh <- soc_threshMat[[i]] %>%
as.data.frame(.) %>%
mutate(ThreshRatio = log(Thresh1 / Thresh2),
Id = row.names(.))
thresh$ThreshRatio[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacement
thresh$ThreshRatio[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacement
thresh$ThreshRatioColor <- thresh$ThreshRatio
thresh$ThreshRatioColor[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacementColor
thresh$ThreshRatioColor[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacementColor
# Calculate actibity
activity <- soc_actMat[[i]] %>%
as.data.frame(.) %>%
mutate(ActRatio = log(Task1 / Task2),
ActTotal = Task1 + Task2,
Id = row.names(.))
# Merge and return
mergedNodes <- merge(degree, thresh)
mergedNodes <- merge(mergedNodes, activity)
return(mergedNodes)
})
social_graphs <- do.call("rbind", social_graphs)
# Load fixed
load("output/Rdata/Sigma0.01-FIXED-Bias1.1.Rdata")
fix_graphs <- unlist(groups_graphs, recursive = FALSE)
fix_threshMat <- unlist(groups_thresh, recursive = FALSE)
fix_actMat <- unlist(groups_taskDist, recursive = FALSE)
fixed_graphs <- lapply(1:length(fix_graphs), function(i) {
# Calculated degree
degree <- rowSums(fix_graphs[[i]])
degree <- as.data.frame(degree)
degree$Id <- row.names(degree)
# Calculate thresholds
thresh <- fix_threshMat[[i]] %>%
as.data.frame(.) %>%
mutate(ThreshRatio = log(Thresh1 / Thresh2),
Id = row.names(.))
thresh$ThreshRatio[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacement
thresh$ThreshRatio[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacement
thresh$ThreshRatioColor <- thresh$ThreshRatio
thresh$ThreshRatioColor[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacementColor
thresh$ThreshRatioColor[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacementColor
# Calculate actibity
activity <- fix_actMat[[i]] %>%
as.data.frame(.) %>%
mutate(ActRatio = log(Task1 / Task2),
ActTotal = Task1 + Task2,
Id = row.names(.))
# Merge and return
mergedNodes <- merge(degree, thresh)
mergedNodes <- merge(mergedNodes, activity)
return(mergedNodes)
})
fixed_graphs <- do.call("rbind", fixed_graphs)
###### Network "dispersion" (? - standard deviation over mean degree) ######
soc_dispersion <- lapply(soc_graphs, function(graph) {
# Group size
n <- nrow(graph)
# Degrees
degrees <- rowSums(graph)
deg_mean <- mean(degrees)
deg_sd <- sd(degrees)
# compile and return
to_return <- data.frame(n = n, DegreeMean = deg_mean, DegreeSD = deg_sd)
})
dispersion <- do.call("rbind", soc_dispersion)
dispersion <- dispersion %>%
mutate(Dispersion = DegreeSD / DegreeMean)
dispersionSummary <- dispersion %>%
mutate(Model = "Social") %>%
group_by(n, Model) %>%
summarise(Dispersion = mean(Dispersion))
fixed_dispersion <- lapply(fix_graphs, function(graph) {
# Group size
n <- nrow(graph)
# Degrees
degrees <- rowSums(graph)
deg_mean <- mean(degrees)
deg_sd <- sd(degrees)
# compile and return
to_return <- data.frame(n = n, DegreeMean = deg_mean, DegreeSD = deg_sd)
})
fixed_dispersion <- do.call("rbind", fixed_dispersion)
fixed_dispersion <- fixed_dispersion %>%
mutate(Dispersion = DegreeSD / DegreeMean)
fixed_dispersionSummary <- fixed_dispersion %>%
mutate(Model = "Fixed") %>%
group_by(n, Model) %>%
summarise(Dispersion = mean(Dispersion))
dispersionSummary <- rbind(dispersionSummary, fixed_dispersionSummary)
rm(fixed_dispersion, fixed_dispersionSummary)
gg_dispersion <- ggplot(data = dispersionSummary, aes(x = n, y = Dispersion, group = Model, color = Model)) +
geom_line(aes(linetype = Model)) +
geom_point(size = 2) +
theme_classic(base_size = 10) +
scale_color_manual(values = c("black", "mediumseagreen")) +
scale_linetype_manual(values = c("dashed", "solid")) +
theme(aspect.ratio = 1,
axis.text = element_text(color = "black"))
gg_dispersion
gg_dispersion <- ggplot(data = dispersionSummary, aes(x = n, y = DegreeSD, group = Model, color = Model)) +
geom_line(aes(linetype = Model)) +
geom_point(size = 2) +
theme_classic(base_size = 10) +
scale_color_manual(values = c("black", "mediumseagreen")) +
scale_linetype_manual(values = c("dashed", "solid")) +
theme(aspect.ratio = 1,
axis.text = element_text(color = "black"))
gg_dispersion
View(dispersionSummary)
###### Network "dispersion" (? - standard deviation over mean degree) ######
soc_dispersion <- lapply(soc_graphs, function(graph) {
# Group size
n <- nrow(graph)
# Degrees
degrees <- rowSums(graph)
deg_mean <- mean(degrees)
deg_sd <- sd(degrees)
# compile and return
to_return <- data.frame(n = n, DegreeMean = deg_mean, DegreeSD = deg_sd)
})
dispersion <- do.call("rbind", soc_dispersion)
dispersion <- dispersion %>%
mutate(Dispersion = DegreeSD / DegreeMean)
dispersionSummary <- dispersion %>%
mutate(Model = "Social") %>%
group_by(n, Model) %>%
summarise(Dispersion = mean(Dispersion),
DegreeMean = mean(DegreeMean),
DegreeSD = mean(DegreeSD))
fixed_dispersion <- lapply(fix_graphs, function(graph) {
# Group size
n <- nrow(graph)
# Degrees
degrees <- rowSums(graph)
deg_mean <- mean(degrees)
deg_sd <- sd(degrees)
# compile and return
to_return <- data.frame(n = n, DegreeMean = deg_mean, DegreeSD = deg_sd)
})
fixed_dispersion <- do.call("rbind", fixed_dispersion)
fixed_dispersion <- fixed_dispersion %>%
mutate(Dispersion = DegreeSD / DegreeMean)
fixed_dispersionSummary <- fixed_dispersion %>%
mutate(Model = "Fixed") %>%
group_by(n, Model) %>%
summarise(Dispersion = mean(Dispersion),
DegreeMean = mean(DegreeMean),
DegreeSD = mean(DegreeSD))
dispersionSummary <- rbind(dispersionSummary, fixed_dispersionSummary)
rm(fixed_dispersion, fixed_dispersionSummary)
gg_dispersion <- ggplot(data = dispersionSummary, aes(x = n, y = DegreeSD, group = Model, color = Model)) +
geom_line(aes(linetype = Model)) +
geom_point(size = 2) +
theme_classic(base_size = 10) +
scale_color_manual(values = c("black", "mediumseagreen")) +
scale_linetype_manual(values = c("dashed", "solid")) +
theme(aspect.ratio = 1,
axis.text = element_text(color = "black"))
gg_dispersion
gg_dispersion <- ggplot(data = dispersionSummary, aes(x = n, y = DegreeMean, group = Model, color = Model)) +
geom_line(aes(linetype = Model)) +
geom_point(size = 2) +
theme_classic(base_size = 10) +
scale_color_manual(values = c("black", "mediumseagreen")) +
scale_linetype_manual(values = c("dashed", "solid")) +
theme(aspect.ratio = 1,
axis.text = element_text(color = "black"))
gg_dispersion
gg_dispersion <- ggplot(data = dispersionSummary, aes(x = n, y = DegreeSD, group = Model, color = Model)) +
geom_line(aes(linetype = Model)) +
geom_point(size = 2) +
theme_classic(base_size = 10) +
scale_color_manual(values = c("black", "mediumseagreen")) +
scale_linetype_manual(values = c("dashed", "solid")) +
theme(aspect.ratio = 1,
axis.text = element_text(color = "black"))
gg_dispersion
gg_dispersion <- ggplot(data = dispersionSummary, aes(x = n, y = Dispersion, group = Model, color = Model)) +
geom_line(aes(linetype = Model)) +
geom_point(size = 2) +
theme_classic(base_size = 10) +
scale_color_manual(values = c("black", "mediumseagreen")) +
scale_linetype_manual(values = c("dashed", "solid")) +
theme(aspect.ratio = 1,
axis.text = element_text(color = "black"))
gg_dispersion
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/1_SocThreshModel.R')
rm(list = ls())
source("scripts/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
filename <- "Sigma001-Eps001-Bias1.1"
####################
# Compare entropies
####################
# Load social
load("output/Rdata/Sigma0.05-Epsilon0.01-Bias1.1.Rdata")
entropy <- unlist(groups_entropy, recursive = FALSE)
entropy <- do.call("rbind", entropy)  %>%
mutate(set = paste(n, replicate, sep = "-"))%>%
select(-Dsym, -Dtask) %>%
filter(n != 1) %>%
group_by(n) %>%
summarise(Mean = mean(Dind),
SE = sd(Dind) / sqrt(length(Dind))) %>%
mutate(Model = "Social")
# Load non-social
load("output/Rdata/Sigma0.05-FIXED-Bias1.1.Rdata")
entropy1 <- unlist(groups_entropy, recursive = FALSE)
entropy1 <- do.call("rbind", entropy1)  %>%
mutate(set = paste(n, replicate, sep = "-"))%>%
select(-Dsym, -Dtask) %>%
filter(n != 1) %>%
group_by(n) %>%
summarise(Mean = mean(Dind),
SE = sd(Dind) / sqrt(length(Dind))) %>%
mutate(Model = "Fixed")
# Join
entropy <- rbind(entropy, entropy1)
####################
# Plot
####################
gg_entropy <- ggplot(data = entropy, aes(x = n, group = Model)) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE, color = Model),
width = 0.7) +
geom_line(aes(y = Mean, color = Model, linetype = Model)) +
geom_point(aes(y = Mean, color = Model),
size = 2) +
theme_classic(base_size = 10) +
ylab("DOL Entropy") +
scale_y_continuous(limits = c(0, 1),
breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = unique(entropy$n)) +
scale_color_manual(values = c("black", "mediumseagreen")) +
scale_linetype_manual(values = c("dashed", "solid")) +
theme(aspect.ratio = 1,
axis.text = element_text(color = "black"))
gg_entropy
filename <- "Sigma005-Eps001-Bias1.1"
gg_entropy
ggsave(gg_entropy, file = paste0("output/SpecializationPlots/", filename, ".png"), height = 3, width = 3.5, units = "in", dpi = 800)
################################################################################
#
# Analyze Networks of Social Interactions
#
################################################################################
rm(list = ls())
source("scripts/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
library(igraph)
filename <- "Sigma0.05-Eps0.01--Bias1.1"
# Cutoff for threshold ratio to allow easier plotting
ThreshCutoffValue <- 10
ThreshCutoffReplacement <- Inf
ThreshCutoffReplacementColor <- 10
####################
# Load data
####################
# Load social
load("output/Rdata/Sigma0.05-Epsilon0.01-Bias1.1.Rdata")
soc_graphs <- unlist(groups_graphs, recursive = FALSE)
soc_threshMat <- unlist(groups_thresh, recursive = FALSE)
soc_actMat <- unlist(groups_taskDist, recursive = FALSE)
social_graphs <- lapply(1:length(soc_graphs), function(i) {
# Calculated degree
degree <- rowSums(soc_graphs[[i]])
degree <- as.data.frame(degree)
degree$Id <- row.names(degree)
# Calculate thresholds
thresh <- soc_threshMat[[i]] %>%
as.data.frame(.) %>%
mutate(ThreshRatio = log(Thresh1 / Thresh2),
Id = row.names(.))
thresh$ThreshRatio[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacement
thresh$ThreshRatio[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacement
thresh$ThreshRatioColor <- thresh$ThreshRatio
thresh$ThreshRatioColor[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacementColor
thresh$ThreshRatioColor[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacementColor
# Calculate actibity
activity <- soc_actMat[[i]] %>%
as.data.frame(.) %>%
mutate(ActRatio = log(Task1 / Task2),
ActTotal = Task1 + Task2,
Id = row.names(.))
# Merge and return
mergedNodes <- merge(degree, thresh)
mergedNodes <- merge(mergedNodes, activity)
return(mergedNodes)
})
social_graphs <- do.call("rbind", social_graphs)
# Load fixed
load("output/Rdata/Sigma0.05-FIXED-Bias1.1.Rdata")
fix_graphs <- unlist(groups_graphs, recursive = FALSE)
fix_threshMat <- unlist(groups_thresh, recursive = FALSE)
fix_actMat <- unlist(groups_taskDist, recursive = FALSE)
fixed_graphs <- lapply(1:length(fix_graphs), function(i) {
# Calculated degree
degree <- rowSums(fix_graphs[[i]])
degree <- as.data.frame(degree)
degree$Id <- row.names(degree)
# Calculate thresholds
thresh <- fix_threshMat[[i]] %>%
as.data.frame(.) %>%
mutate(ThreshRatio = log(Thresh1 / Thresh2),
Id = row.names(.))
thresh$ThreshRatio[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacement
thresh$ThreshRatio[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacement
thresh$ThreshRatioColor <- thresh$ThreshRatio
thresh$ThreshRatioColor[thresh$ThreshRatio > ThreshCutoffValue] <- ThreshCutoffReplacementColor
thresh$ThreshRatioColor[thresh$ThreshRatio < -ThreshCutoffValue] <- -ThreshCutoffReplacementColor
# Calculate actibity
activity <- fix_actMat[[i]] %>%
as.data.frame(.) %>%
mutate(ActRatio = log(Task1 / Task2),
ActTotal = Task1 + Task2,
Id = row.names(.))
# Merge and return
mergedNodes <- merge(degree, thresh)
mergedNodes <- merge(mergedNodes, activity)
return(mergedNodes)
})
fixed_graphs <- do.call("rbind", fixed_graphs)
###### Network "dispersion" (? - standard deviation over mean degree) ######
soc_dispersion <- lapply(soc_graphs, function(graph) {
# Group size
n <- nrow(graph)
# Degrees
degrees <- rowSums(graph)
deg_mean <- mean(degrees)
deg_sd <- sd(degrees)
# compile and return
to_return <- data.frame(n = n, DegreeMean = deg_mean, DegreeSD = deg_sd)
})
dispersion <- do.call("rbind", soc_dispersion)
dispersion <- dispersion %>%
mutate(Dispersion = DegreeSD / DegreeMean)
dispersionSummary <- dispersion %>%
mutate(Model = "Social") %>%
group_by(n, Model) %>%
summarise(Dispersion = mean(Dispersion),
DegreeMean = mean(DegreeMean),
DegreeSD = mean(DegreeSD))
fixed_dispersion <- lapply(fix_graphs, function(graph) {
# Group size
n <- nrow(graph)
# Degrees
degrees <- rowSums(graph)
deg_mean <- mean(degrees)
deg_sd <- sd(degrees)
# compile and return
to_return <- data.frame(n = n, DegreeMean = deg_mean, DegreeSD = deg_sd)
})
fixed_dispersion <- do.call("rbind", fixed_dispersion)
fixed_dispersion <- fixed_dispersion %>%
mutate(Dispersion = DegreeSD / DegreeMean)
fixed_dispersionSummary <- fixed_dispersion %>%
mutate(Model = "Fixed") %>%
group_by(n, Model) %>%
summarise(Dispersion = mean(Dispersion),
DegreeMean = mean(DegreeMean),
DegreeSD = mean(DegreeSD))
dispersionSummary <- rbind(dispersionSummary, fixed_dispersionSummary)
rm(fixed_dispersion, fixed_dispersionSummary)
gg_dispersion <- ggplot(data = dispersionSummary, aes(x = n, y = Dispersion, group = Model, color = Model)) +
geom_line(aes(linetype = Model)) +
geom_point(size = 2) +
theme_classic(base_size = 10) +
scale_color_manual(values = c("black", "mediumseagreen")) +
scale_linetype_manual(values = c("dashed", "solid")) +
theme(aspect.ratio = 1,
axis.text = element_text(color = "black"))
gg_dispersion
###### Network homophily ######
weighted_ratios <- lapply(1:length(soc_graphs), function(i) {
# Social
# Get graph and thresh matrix for simulation
graph <- soc_graphs[[i]]
thresh <- as.data.frame(soc_threshMat[[i]])
# Calculate thresh ratio
threshRatio <- log(thresh$Thresh1 / thresh$Thresh2)
# Calculate weighted neighbor sum for each individual
weighted_sum <- graph %*% threshRatio
# Calculate weighted neighbor sum for each individual
strength <- rowSums(graph)
disparity <- rowSums((graph / strength)^2)
# Construct dataframe to return
to_return <- data.frame(Id = row.names(weighted_sum),
n = length(weighted_sum),
ThreshRatio = threshRatio,
WeightNeighbor = weighted_sum,
Disparity = disparity,
Model = "Social")
row.names(to_return) <- NULL
# Fixed
# Get graph and thresh matrix for simulation
graph <- fix_graphs[[i]]
thresh <- as.data.frame(fix_threshMat[[i]])
# Calculate thresh ratio
threshRatio <- log(thresh$Thresh1 / thresh$Thresh2)
# Calculate weighted neighbor sum for each individual
weighted_sum <- graph %*% threshRatio
# Calculate weighted neighbor sum for each individual
strength <- rowSums(graph)
disparity <- rowSums((graph / strength)^2)
# Construct dataframe to return
to_return2 <- data.frame(Id = row.names(weighted_sum),
n = length(weighted_sum),
ThreshRatio = threshRatio,
WeightNeighbor = weighted_sum,
Disparity = disparity,
Model = "Fixed")
row.names(to_return) <- NULL
# Return
to_return$Model <- as.character(to_return$Model)
to_return <- rbind(to_return, to_return2)
return(to_return)
})
weighted_ratios <- do.call("rbind", weighted_ratios)
gg_weighted_ratios <- ggplot(data = weighted_ratios, aes(x = ThreshRatio, y = WeightNeighbor)) +
geom_point() +
theme_classic(base_size = 10) +
theme(aspect.ratio = 1,
axis.text = element_text(color = "black"))  +
facet_wrap(~n, scales = "free")
gg_weighted_ratios
weighted_summary <- weighted_ratios %>%
group_by(n, Model) %>%
summarise(CorrelationThresholds = cor(ThreshRatio, WeightNeighbor))
gg_weighted_corr <- ggplot(data = weighted_summary, aes(x = n, y = CorrelationThresholds, group = Model, color = Model)) +
geom_line(aes(linetype = Model)) +
geom_point(size = 2) +
theme_classic(base_size = 10) +
scale_color_manual(values = c("black", "mediumseagreen")) +
scale_linetype_manual(values = c("dashed", "solid")) +
theme(aspect.ratio = 1,
axis.text = element_text(color = "black"))
gg_weighted_corr
###### Network disparity ######
gg_disparity <- ggplot(data = weighted_ratios, aes(x = ThreshRatio, y = Disparity)) +
geom_point(size = 0.2) +
theme_classic(base_size = 10) +
theme(aspect.ratio = 1,
axis.text = element_text(color = "black"))  +
facet_wrap(~n, scales = "free")
gg_disparity
gg_weighted_corr <- ggplot(data = weighted_summary, aes(x = n, y = CorrelationThresholds, group = Model, color = Model)) +
geom_line(aes(linetype = Model)) +
geom_point(size = 2) +
theme_classic(base_size = 10) +
scale_color_manual(values = c("black", "mediumseagreen")) +
scale_linetype_manual(values = c("dashed", "solid")) +
theme(aspect.ratio = 1,
axis.text = element_text(color = "black"))
gg_weighted_corr
