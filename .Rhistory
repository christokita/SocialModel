}
# Load threshold matrices
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", runs[run], "/"), full.names = TRUE)
thresh_data <- list()
for (file in 1:length(files)) {
load(files[file])
thresh_data[[file]] <- listed_data
}
i = 7
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
j = 1
# Get graph and calculate threshold differences
this_graph <- graphs[[j]]
diag(this_graph) <- NA
thresh <- as.data.frame(thresh_data[[i]][j])
thresh$ThreshBias <- thresh$Thresh1 - thresh$Thresh2
# Multiply to get bias weighted by interaction frequenchy
social_interaction <- matrix(data = rep(NA, length(this_graph)), ncol = ncol(this_graph))
social_interaction
this_graph
this_graph[1,]
thresh$ThreshBias
for (i in 1:nrow(this_graph)) {
social_interaction[i, ] <- this_graph[i,] *  thresh$ThreshBias
# social_interaction[i, ] <- (this_graph[i,] / sum(this_graph[i,], na.rm = T)) *  thresh$ThreshBias
}
i = 1
this_graph[i,] *  thresh$ThreshBias
sum(this_graph[i,] *  thresh$ThreshBias)
sum(this_graph[i,] *  thresh$ThreshBias, na.rm = T)
sum(this_graph[i,] *  thresh$ThreshBias, na.rm = T) / sum(this_graph[i, ], na.rm = T)
# Multiply to get bias weighted by interaction frequenchy
effective_interactions <- matrix(data = rep(NA, nrow(this_graph)))
effective_interactions
effective_interactions <- matrix(data = rep(NA, nrow(this_graph)))
for (i in 1:nrow(this_graph)) {
effective_interactions[i] <- sum(this_graph[i,] *  thresh$ThreshBias, na.rm = TRUE)
# social_interaction[i, ] <- (this_graph[i,] / sum(this_graph[i,], na.rm = T)) *  thresh$ThreshBias
}
###################
# Correlation of Average interaction partner
###################
network_correlations <- lapply(1:length(runs), function(run) {
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Graphs/", runs[run], "/"), full.names = TRUE)
soc_networks <- list()
for (file in 1:length(files)) {
load(files[file])
soc_networks[[file]] <- listed_data
}
# Load threshold matrices
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", runs[run], "/"), full.names = TRUE)
thresh_data <- list()
for (file in 1:length(files)) {
load(files[file])
thresh_data[[file]] <- listed_data
}
# Loop through individual graphs
interaction_info <- lapply(1:length(soc_networks), function(i) {
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
# For each each compute interaction matrix
# Get graph and make adjacency matrix
size_graph <- lapply(1:length(graphs), function(j) {
# Get graph and calculate threshold differences
this_graph <- graphs[[j]]
diag(this_graph) <- NA
thresh <- as.data.frame(thresh_data[[i]][j])
thresh$ThreshBias <- thresh$Thresh1 - thresh$Thresh2
# Multiply to get bias weighted by interaction frequenchy
effective_interactions <- matrix(data = rep(NA, nrow(this_graph)))
for (i in 1:nrow(this_graph)) {
effective_interactions[i] <- sum(this_graph[i,] *  thresh$ThreshBias, na.rm = TRUE) / sum(this_graph[i, ], na.rm = TRUE)
# social_interaction[i, ] <- (this_graph[i,] / sum(this_graph[i,], na.rm = T)) *  thresh$ThreshBias
}
to_retun <- data.frame(n = nrow(this_graph), Correlation = cor(effective_interactions, thresh$ThreshBias))
# return
return(to_retun)
})
#Calculate baseline probability of interaction
size_graph <- do.call("rbind", size_graph)
})
# Bind and return
interaction_info <- do.call("rbind", interaction_info)
interaction_info$Model <- run_names[run]
return(interaction_info)
})
# Bind
correlation_data <- do.call('rbind', network_correlations)
correlation_data <- correlation_data %>%
group_by(Model, n) %>%
summarise(Corr_mean = mean(Correlation),
Corr_SE = sd(Correlation)/length(Correlation))
# Plot
gg_correlation <- ggplot(data = correlation_data, aes(x = n, y = Corr_mean,
colour = Model, group = Model, fill = Model)) +
geom_hline(yintercept = 0, color = "black", size = 0.3, linetype = "dotted") +
geom_line(size = 0.4) +
geom_errorbar(aes(ymin = Corr_mean - Corr_SE, ymax = Corr_mean + Corr_SE),
width = 0) +
geom_point(size = 0.8, shape = 21) +
scale_color_manual(name = "Threshold",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold",
values = c("#ffffff", "#4d4d4d")) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab("Interaction partner correlation") +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.position = c(0.8, 0.7),
legend.key.height = unit(0.5, "line"),
legend.background = element_blank())
gg_correlation
thresh$ThreshBias
mean(thresh$ThreshBias)
abs(thresh$ThreshBias - mean(thresh$ThreshBias))
gg_correlation
ggsave(gg_correlation, filename = "Output/Networks/NetworkMetrics/CorrelationInNetwork.png",
height = 45, width = 45, units = "mm", dpi = 400)
ggsave(gg_correlation, filename = "Output/Networks/NetworkMetrics/CorrelationInNetwork.svg",
height = 45.5, width = 45.5, units = "mm")
i
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
files <- list.files(paste0("output/Rdata/_ProcessedData/Graphs/", runs[run], "/"), full.names = TRUE)
soc_networks <- list()
for (file in 1:length(files)) {
load(files[file])
soc_networks[[file]] <- listed_data
}
# Load threshold matrices
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", runs[run], "/"), full.names = TRUE)
thresh_data <- list()
for (file in 1:length(files)) {
load(files[file])
thresh_data[[file]] <- listed_data
}
i = 7
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
j = 1
# Get graph and calculate threshold differences
this_graph <- graphs[[j]]
diag(this_graph) <- NA
thresh <- as.data.frame(thresh_data[[i]][j])
thresh$ThreshBias <- thresh$Thresh1 - thresh$Thresh2
# Calculate mean bias in network
mean_bias <- mean(thresh$ThreshBias)
thresh$BiasDeviation <- thresh$ThreshBias - mean_bias
View(thresh)
###################
# Local deviation from mean theshold bias
###################
local_bias <- lapply(1:length(runs), function(run) {
# Load social networks
files <- list.files(paste0("output/Rdata/_ProcessedData/Graphs/", runs[run], "/"), full.names = TRUE)
soc_networks <- list()
for (file in 1:length(files)) {
load(files[file])
soc_networks[[file]] <- listed_data
}
# Load threshold matrices
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", runs[run], "/"), full.names = TRUE)
thresh_data <- list()
for (file in 1:length(files)) {
load(files[file])
thresh_data[[file]] <- listed_data
}
# Loop through individual graphs
interaction_info <- lapply(1:length(soc_networks), function(i) {
# Get graphs
graphs <- soc_networks[[i]]
replicates <- length(graphs)
# For each each compute interaction matrix
# Get graph and make adjacency matrix
size_graph <- lapply(1:length(graphs), function(j) {
# Get graph and calculate threshold differences
this_graph <- graphs[[j]]
diag(this_graph) <- NA
thresh <- as.data.frame(thresh_data[[i]][j])
thresh$ThreshBias <- thresh$Thresh1 - thresh$Thresh2
# Calculate mean bias in network and individual deviation from this
mean_bias <- mean(thresh$ThreshBias)
thresh$BiasDeviation <- thresh$ThreshBias - mean_bias
# Multiply to get bias weighted by interaction frequenchy
effective_interactions <- matrix(data = rep(NA, nrow(this_graph)))
for (i in 1:nrow(this_graph)) {
effective_interactions[i] <- sum(this_graph[i,] *  thresh$BiasDeviation, na.rm = TRUE) / sum(this_graph[i, ], na.rm = TRUE)
# social_interaction[i, ] <- (this_graph[i,] / sum(this_graph[i,], na.rm = T)) *  thresh$ThreshBias
}
to_retun <- data.frame(n = nrow(this_graph), Correlation = cor(effective_interactions, thresh$BiasDeviation))
# return
return(to_retun)
})
#Calculate baseline probability of interaction
size_graph <- do.call("rbind", size_graph)
})
# Bind and return
interaction_info <- do.call("rbind", interaction_info)
interaction_info$Model <- run_names[run]
return(interaction_info)
})
# Bind
local_bias_data <- do.call('rbind', local_bias)
local_bias_data <- local_bias_data %>%
group_by(Model, n) %>%
summarise(Corr_mean = mean(Correlation),
Corr_SE = sd(Correlation)/length(Correlation))
# Plot
gg_localbias <- ggplot(data = local_bias_data, aes(x = n, y = Corr_mean,
colour = Model, group = Model, fill = Model)) +
geom_hline(yintercept = 0, color = "black", size = 0.3, linetype = "dotted") +
geom_line(size = 0.4) +
geom_errorbar(aes(ymin = Corr_mean - Corr_SE, ymax = Corr_mean + Corr_SE),
width = 0) +
geom_point(size = 0.8, shape = 21) +
scale_color_manual(name = "Threshold",
values = c("#878787", "#4d4d4d")) +
scale_fill_manual(name = "Threshold",
values = c("#ffffff", "#4d4d4d")) +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab("Interaction partner correlation") +
theme_ctokita() +
theme(aspect.ratio = 1,
legend.position = c(0.8, 0.7),
legend.key.height = unit(0.5, "line"),
legend.background = element_blank())
gg_localbias
################################################################################
#
# Analyzing thresholds (at end point)
#
################################################################################
rm(list = ls())
source("scripts/util/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
library(viridis)
library(ggridges)
p <- 1 #prob of interact
run <- "Sigma0.05-Epsilon0-Beta1.1"
####################
# Load and process data
####################
# Load Thresholds
files <- list.files(paste0("output/Rdata/_ProcessedData/Thresh/", run, "/"), full.names = TRUE)
# Loop through group sizes
group_thresh <- lapply(files, function(file) {
# Load
load(file)
# Bind
thresh_data <- as.data.frame(do.call("rbind", listed_data))
# # Summarise
# thresh_sum <- thresh_data %>%
#   mutate(run = paste0(sim, "-", chunk)) %>%
#   group_by(n, run) %>%
#   summarise(Thresh1SD = sd(Thresh1),
#             Thresh2SD = sd(Thresh2),
#             ThreshSD = (sd(Thresh1)  + sd(Thresh2)) / 2) %>%
#   select(n, ThreshSD)
return(thresh_data)
})
# Bind
all_thresh <- do.call('rbind', group_thresh)
####################
# Plot threshold distributions
####################
# Plot
pal <- brewer_pal("seq", "RdPu")
pal <- pal(9)
gg_threshvar <- ggplot(data = all_thresh,
aes(x = Thresh1, y = n, fill = n, group = n)) +
theme_invisible() +
geom_density_ridges(size = 0.2, stat = "binline", bins = 100) +
xlab("Threshold value") +
scale_x_continuous(breaks = seq(0, 100, 25),
limits = c(-01, 101),
expand = c(0.03, 0)) +
scale_y_continuous(breaks = c(5, seq(25, 100, 25)),
expand = c(0.03, 0)) +
scale_fill_viridis() +
scale_color_viridis() +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, color = "black"),
axis.title.y = element_text(size = 7, color = "black", face = 'italic'),
legend.position = "none",
axis.ticks = element_line(size = 0.2, color = "black"))
gg_threshvar
ggsave(gg_threshvar, file = paste0("output/Thresholds/GroupSizeThreshold", run, ".png"), width = 90, height = 60, units = "mm", dpi = 600)
ggsave(gg_threshvar, file = paste0("output/Thresholds/GroupSizeThreshold", run, ".svg"), width = 90, height = 60, units = "mm", dpi = 600)
ggsave(gg_threshvar, file = paste0("output/Thresholds/GroupSizeThreshold", run, "_square.png"), width = 70, height = 70, units = "mm", dpi = 600)
source('~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/2b_Process_ClusterSimData.R', echo=TRUE)
####################
# Load and process data
####################
# Load entropy
load("output/Rdata/_ProcessedData/Entropy/Sigma0-Epsilon0.1-Beta1.1_P0.5.Rdata")
View(compiled_data)
entropy_data <- compiled_Data
entropy_data <- compiled_data
entropy_data$Model <- "Ep0.1-P0.5"
load("output/Rdata/_ProcessedData/Entropy/Sigma0-Epsilon0.1-Beta1.1.Rdata")
compiled_data$Model <- "Ep0.1-P1"
entropy_data <- rbind(entropy_data, compiled_data)
# Summarise
entropy_data <- entropy_data %>%
group_by(Model, n) %>%
summarise(Mean = mean(Dind),
SE = sd(Dind) / sqrt(length(Dind)))
####################
# Plot
####################
gg_int <- ggplot(data = entropy_data, aes(x = n, colour = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(values = pal,
labels = c("1.2", "1.1"),
name = expression("Interaction bias"(Beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_entropy
gg_int
unique(entropy_data$Model)
####################
# Plot
####################
pal <- c("#a6cee3", "#1f78b4", "#33a02c")
gg_int <- ggplot(data = entropy_data, aes(x = n, colour = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(values = pal,
labels = c("1.2", "1.1"),
name = expression("Interaction bias"(Beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "none",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_int
gg_int <- ggplot(data = entropy_data, aes(x = n, colour = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(values = pal,
labels = c("1.2", "1.1"),
name = expression("Interaction bias"(Beta))) +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "right",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_int
gg_int <- ggplot(data = entropy_data, aes(x = n, colour = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(values = pal,
labels = c("1.2", "1.1"),
name = "Model") +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "right",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_int
gg_int <- ggplot(data = entropy_data, aes(x = n, colour = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(values = pal,
labels = c(expression(paste(epsilon, " = 0.1, ", p, " = 0.5")),
expression(paste(epsilon, " = 0.1, ", p, " = 1"))),
name = "Model") +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "right",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
aspect.ratio = 1)
gg_int
gg_int <- ggplot(data = entropy_data, aes(x = n, colour = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(values = pal,
labels = c(expression(paste(epsilon, " = 0.1, ", p, " = 0.5")),
expression(paste(epsilon, " = 0.1, ", p, " = 1"))),
name = "Model") +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "right",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
legend.justification = "left",
aspect.ratio = 1)
gg_int
gg_int <- ggplot(data = entropy_data, aes(x = n, colour = Model)) +
geom_line(aes(y = Mean),
size = 0.4) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0) +
geom_point(aes(y = Mean),
size = 0.8) +
theme_classic() +
xlab(expression(paste("Group Size (", italic(n), ")"))) +
ylab(expression(paste("Division of labor (", italic(D[indiv]), ")"))) +
scale_x_continuous(breaks = seq(0, 100, 20)) +
scale_color_manual(values = pal,
labels = c(expression(paste(epsilon, " = 0.1, ", p, " = 0.5")),
expression(paste(epsilon, " = 0.1, ", p, " = 1"))),
name = "Model") +
theme(axis.text = element_text(colour = "black", size = 6),
axis.title = element_text(size = 7, face = "italic"),
legend.position = "right",
legend.title = element_text(size = 7,
face = "bold"),
legend.text = element_text(size = 6),
legend.key.height = unit(4, "mm"),
legend.key.width = unit(5, "mm"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.line = element_line(size = 0.3, color = "black"),
legend.text.align = 0,
aspect.ratio = 1)
gg_int
ggsave("output/InteractionProbability/EntropyComparison.png", width = 70, heigh = 45, units = "mm", dpi = 400)
ggsave("output/InteractionProbability/EntropyComparison.png", width = 80, heigh = 45, units = "mm", dpi = 400)
