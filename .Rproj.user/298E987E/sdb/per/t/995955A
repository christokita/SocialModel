{
    "collab_server" : "",
    "contents" : "##################################################\n#\n# Threshold Probability of Performance \n#\n##################################################\n\n\n####################\n# Seed task thresholds\n####################\nseedThresholds <- function(n, m, ThresholdMeans = NULL, ThresholdSDs = NULL) {\n  # Loop through tasks and sample thresholds from normal dist\n  threshMat <- lapply(1:length(ThresholdMeans), function(i) {\n    threshList <- rtnorm(n = n, \n                         mean = ThresholdMeans[i], \n                         sd = ThresholdSDs[i], \n                         lower = 0)\n    return(threshList)\n  })\n  threshMat <- do.call(\"cbind\", threshMat)\n  # Fix names\n  colnames(threshMat) <- paste0(\"Thresh\", 1:length(ThresholdMeans))\n  rownames(threshMat) <- paste0(\"v-\", 1:n)\n  # Return\n  return(threshMat)\n}\n\n####################\n# Deterministic Threshold\n####################\ncalcThresholdDetermMat <- function(TimeStep, ThresholdMatrix, StimulusMatrix) {\n  # select proper stimulus for this time step\n  stimulusThisStep <- StimulusMatrix[TimeStep, ]\n  # calculate threshold probabilities for one individual\n  thresholdP <- lapply(1:nrow(ThresholdMatrix), function(i) {\n    # select row for individual in threshold matrix\n    indThresh <- ThresholdMatrix[i, ]\n    # create task vector to be output and bound\n    taskThresh <- rep(0, length(indThresh))\n    # loop through each task within individual\n    for (j in 1:length(taskThresh)) {\n      stim <- stimulusThisStep[j]\n      thresh <- indThresh[j]\n      if (stim > thresh) {\n        taskThresh[j] <- 1\n      }\n    }\n    return(taskThresh)\n  })\n  # bind and return\n  thresholdP <- do.call(\"rbind\", thresholdP)\n  colnames(thresholdP) <- paste0(\"ThreshProb\", 1:ncol(thresholdP))\n  rownames(thresholdP) <- paste0(\"v-\", 1:nrow(thresholdP))\n  return(thresholdP)\n}\n\n####################\n# Deterministic Threshold with social information\n####################\ncalcThresholdDetermSocial <- function(TimeStep, ThresholdMatrix, StimulusMatrix, epsilon, SocialInfoMatrix) {\n  # select proper stimulus for this time step\n  stimulusThisStep <- StimulusMatrix[TimeStep, ]\n  # calculate threshold probabilities for one individual\n  thresholdP <- lapply(1:nrow(ThresholdMatrix), function(i) {\n    # select row for individual in threshold matrix\n    indThresh <- ThresholdMatrix[i, ]\n    indSocial <- SocialInfoMatrix[i, ]\n    # create task vector to be output and bound\n    taskThresh <- rep(0, length(indThresh))\n    # loop through each task within individual\n    for (j in 1:length(taskThresh)) {\n      stim <- stimulusThisStep[j]\n      thresh <- indThresh[j] - (epsilon * indSocial[j])\n      if (stim > thresh) {\n        taskThresh[j] <- 1\n      }\n    }\n    return(taskThresh)\n  })\n  # bind and return\n  thresholdP <- do.call(\"rbind\", thresholdP)\n  colnames(thresholdP) <- paste0(\"ThreshProb\", 1:ncol(thresholdP))\n  rownames(thresholdP) <- paste0(\"v-\", 1:nrow(thresholdP))\n  return(thresholdP)\n}\n\n####################\n# Deterministic Threshold with social information\n####################\nadjustThresholdsSocial <- function(SocialNetwork, ThresholdMatrix, X_sub_g, epsilon) {\n  # Calculate \"sum\" of task states/probs of neighbors\n  NeighborSums <- t(SocialNetwork) %*% X_sub_g\n  totalSums <- rowSums(NeighborSums)\n  # Loop through individuals\n  for (i in 1:nrow(X_sub_g)) {\n    for (j in 1:ncol(X_sub_g)) {\n      activeInd <- NeighborSums[i, j]\n      adjust <- epsilon * ((totalSums[i] - activeInd)  - activeInd)\n      ThresholdMatrix[i, j] <- ThresholdMatrix[i, j] + adjust\n      if (ThresholdMatrix[i, j] < 0) {\n        ThresholdMatrix[i, j] <- 0\n      } \n    }\n  }\n  return(ThresholdMatrix)\n}\n\n\n\n\n\n",
    "created" : 1512682826189.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2431182199",
    "id" : "995955A",
    "lastKnownWriteTime" : 1512682903,
    "last_content_update" : 1512682903718,
    "path" : "~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/__Util_ThresholdFunctions.R",
    "project_path" : "scripts/__Util_ThresholdFunctions.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}