{
    "collab_server" : "",
    "contents" : "##################################################\n#\n# Social Network Functions\n#\n##################################################\n\n####################\n# Form connections probabilistically\n####################\ntemporalNetwork <- function(X_sub_g, p, bias) {\n  dimension <- nrow(X_sub_g)\n  g_adj <- matrix(data = rep(NA, dimension*dimension), ncol = dimension)\n  # Loop through row individuals\n  for (i in 1:dimension) {\n    # get task performance of individual\n    task <- which(X_sub_g[i, ] == 1)\n    # loop through column individuals\n    # If inactive, all connections equal prob\n    if (length(task) == 0) {\n      for (j in 1:dimension) {\n        con <- sample(x = c(0, 1), size = 1, prob = c(1 - p, p))\n        g_adj[i, j] <- con\n        g_adj[j, i] <- con\n      }\n    }\n    # If active, biased towards individuals in same state\n    else {\n      for (j in i:dimension) {\n        same <- which(X_sub_g[ , task] == 1)\n        # if same, biased\n        if (j %in% same) {\n          con <- sample(x = c(0, 1), size = 1, prob = c(1 - bias * p, bias * p))\n          g_adj[i, j] <- con\n          g_adj[j, i] <- con\n        } else {\n          con <- sample(x = c(0, 1), size = 1, prob = c(1 - p, p))\n          g_adj[i, j] <- con\n          g_adj[j, i] <- con\n        }\n      }\n    }\n  }\n  # bind and name columns\n  diag(g_adj) <- 0 #remove self-connections\n  colnames(g_adj) <- paste0(\"v-\", 1:dimension)\n  rownames(g_adj) <- paste0(\"v-\", 1:dimension)\n  return(g_adj)\n}\n\n####################\n# Form connections probabilistically - Test new formulation\n####################\ntemporalNetwork_test <- function(X_sub_g, bias) {\n  dimension <- nrow(X_sub_g)\n  g_adj <- matrix(data = rep(0, dimension*dimension), ncol = dimension)\n  # Loop through row individuals\n  for (i in 1:dimension) {\n    # get task performance of individual\n    task <- which(X_sub_g[i, ] == 1)\n    # set up list of potential connections\n    potential <- seq(1:dimension)\n    baseline_prob <- rep(1, length(potential))\n    # loop through column individuals\n    # If inactive, all connections equal prob\n    if (length(task) == 0) {\n      potential <- potential[-i] #remove self\n      baseline_prob <- baseline_prob[-i] #remove self\n      connection <- sample(x = potential, size = 1, prob = baseline_prob)\n      g_adj[i, connection] <- 1\n      g_adj[connection, i] <- 1\n    }\n    # If active, biased towards individuals in same state\n    else {\n      # find which individuals are perfoming same task and relatively weight probabilities\n      same <- which(X_sub_g[ , task] == 1)\n      baseline_prob[same] <- baseline_prob[same] * bias\n      potential <- potential[-i] #remove self\n      baseline_prob <- baseline_prob[-i] #remove self\n      connection <- sample(x = potential, size = 1, prob = baseline_prob)\n      g_adj[i, connection] <- 1\n      g_adj[connection, i] <- 1\n    }\n  }\n  # bind and name columns\n  diag(g_adj) <- 0 #remove self-connections\n  colnames(g_adj) <- paste0(\"v-\", 1:dimension)\n  rownames(g_adj) <- paste0(\"v-\", 1:dimension)\n  return(g_adj)\n}\n",
    "created" : 1512334108758.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1842517025",
    "id" : "1E9F0A8",
    "lastKnownWriteTime" : 1512337388,
    "last_content_update" : 1512337388571,
    "path" : "~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/__Util_SocialNetworkFunctions.R",
    "project_path" : "scripts/__Util_SocialNetworkFunctions.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}