{
    "collab_server" : "",
    "contents" : "################################################################################\n#\n# Plot ensemble model outputs in single plot \n#\n################################################################################\nrm(list = ls())\nsource(\"scripts/__Util__MASTER.R\")\nsource(\"scripts/3A_PrepPlotExperimentData.R\")\n\n# Set variable  \nfilename <- \"Fixed_Delta06Sigma01Eta7\"\n\n# Palette without single individuals\n#palette <- c(\"#F00924\", \"#F7A329\", \"#FDD545\", \"#027C2C\", \"#1D10F9\", \"#4C0E78\", \"#bdbdbd\", \"#525252\")\n\n# Palette without single individuals\npalette <- c(\"#83343E\", \"#F00924\", \"#F7A329\", \"#FDD545\", \"#027C2C\", \"#1D10F9\", \"#4C0E78\", \"#bdbdbd\", \"#525252\")\n\n# Model vs Data Palette\ncompPalette <- c(\"indianred2\", \"black\")\n\n####################\n# Final task distributions\n####################\n# Bind together\ntaskDist <- unlist(groups_taskDist, recursive = FALSE)\ntaskDistTot <- do.call(\"rbind\", taskDist)\n\n# Manipulate\ntaskDistTot <- taskDistTot %>% \n  mutate(set = paste0(n, \"-\", replicate)) %>% \n  mutate(set = factor(set, \n                      levels = mixedsort(unique(set))),\n         n = as.factor(n))\n\ntaskSum <- taskDistTot %>% \n  group_by(n) %>% \n  summarise(taskMean1 = mean(Task1),\n            taskMean2 = mean(Task2))\n\n# Plot\nplot_TaskMat <- as.data.frame(taskDistTot)\ngg_dist <- ggplot(data = plot_TaskMat, aes(y = Task1, x = set)) +\n  geom_point(aes(colour = n), size = 0.3) +\n  theme_classic() +\n  labs(x = \"Group size\",\n       y = \"Task 1 frequency\") +\n  scale_color_manual(values = palette) +\n  scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +\n  theme(axis.text.x = element_text(size = 0),\n        axis.ticks.x = element_blank(),\n        axis.text = element_text(size = 8),\n        axis.title.y = element_text(size = 10, margin = margin(0, 0, 0, 0)),\n        axis.title.x = element_text(size = 10, margin = margin(12, 0, 0, 0)),\n        legend.position = \"none\") \n\n\n\n####################\n# Task variance by group size\n####################\n# Prep\ntaskVarMean <- taskDistTot %>% \n  mutate(n = as.character(n)) %>% \n  mutate(n = as.numeric(n)) %>% \n  group_by(n, replicate) %>% \n  summarise(SD1 = sd(Task1),\n            SD2 = sd(Task2),\n            Mean = mean(Task1)) %>% \n  mutate(Source = \"Model\",\n         SD = (SD1 + SD2) / 2)\ntaskVarMean$SD[is.na(taskVarMean$SD)] <- 0 #fix for single individuals\n\ntaskVarMean <- rbind(taskVarMean, yukoDataSummary)\n\n\n# Calculate means and SE\ntaskVarMeans <- taskVarMean %>% \n  group_by(n, Source) %>% \n  summarise(MeanMean = mean(Mean),\n            MeanSE = sd(Mean) / sqrt(length(Mean)),\n            SDMean = mean(SD),\n            SDSE = sd(SD) / sqrt(length(SD)))\n\n# Get mean at group size one and normalize\nexpSizeOne <- taskVarMeans$MeanMean[taskVarMeans$n == 1 & taskVarMeans$Source == \"Experiment\"]\nmodSizeOne <- taskVarMeans$MeanMean[taskVarMeans$n == 1 & taskVarMeans$Source == \"Model\"]\n\nexpSizeSixteen <- taskVarMeans$SDMean[taskVarMeans$n == 16 & taskVarMeans$Source == \"Experiment\"]\nmodSizeSixteen <- taskVarMeans$SDMean[taskVarMeans$n == 16 & taskVarMeans$Source == \"Model\"]\n\n# Normalize Mean Values\ntaskVarMeans$NormMean <- NA\ntaskVarMeans$NormMeanSE <- NA\ntaskVarMeans$NormMean[taskVarMeans$Source == \"Experiment\"] <- taskVarMeans$MeanMean[taskVarMeans$Source == \"Experiment\"] / expSizeOne\ntaskVarMeans$NormMean[taskVarMeans$Source == \"Model\"] <- taskVarMeans$MeanMean[taskVarMeans$Source == \"Model\"] / modSizeOne\ntaskVarMeans$NormMeanSE[taskVarMeans$Source == \"Experiment\"] <- taskVarMeans$MeanSE[taskVarMeans$Source == \"Experiment\"] / expSizeOne\ntaskVarMeans$NormMeanSE[taskVarMeans$Source == \"Model\"] <- taskVarMeans$MeanSE[taskVarMeans$Source == \"Model\"] / modSizeOne\n\ntaskVarMean$NormMean <- NA\ntaskVarMean$NormMean[taskVarMean$Source == \"Experiment\"] <- taskVarMean$Mean[taskVarMean$Source == \"Experiment\"] / expSizeOne\ntaskVarMean$NormMean[taskVarMean$Source == \"Model\"] <- taskVarMean$Mean[taskVarMean$Source == \"Model\"] / modSizeOne\n\n# Normalize behavioral variation values\ntaskVarMeans$NormVarMean <- NA\ntaskVarMeans$NormVarMeanSE <- NA\ntaskVarMeans$NormVarMean[taskVarMeans$Source == \"Experiment\"] <- taskVarMeans$SDMean[taskVarMeans$Source == \"Experiment\"] / expSizeSixteen\ntaskVarMeans$NormVarMean[taskVarMeans$Source == \"Model\"] <- taskVarMeans$SDMean[taskVarMeans$Source == \"Model\"] / modSizeSixteen\ntaskVarMeans$NormVarMeanSE[taskVarMeans$Source == \"Experiment\"] <- taskVarMeans$SDSE[taskVarMeans$Source == \"Experiment\"] / expSizeSixteen\ntaskVarMeans$NormVarMeanSE[taskVarMeans$Source == \"Model\"] <- taskVarMeans$SDSE[taskVarMeans$Source == \"Model\"] / modSizeSixteen\n\ntaskVarMean$NormVarMean <- NA\ntaskVarMean$NormVarMean[taskVarMean$Source == \"Experiment\"] <- taskVarMean$SD[taskVarMean$Source == \"Experiment\"] / expSizeSixteen\ntaskVarMean$NormVarMean[taskVarMean$Source == \"Model\"] <- taskVarMean$SD[taskVarMean$Source == \"Model\"] / modSizeSixteen\n\n\n# Plot variance and mean by group size\n# gg_var <- ggplot() +\n#   geom_point(data = taskVarMean, \n#              aes(x = n, y = SD, colour = Source),\n#              size = 0.5,\n#              alpha = 0.4,\n#              position = position_dodge(width = 1)) +\n#   theme_classic() +\n#   xlab(\"Group size\") +\n#   ylab(\"Behavioral Variation (SD)\") +\n#   scale_x_continuous(breaks = unique(taskVarMean$n)) +\n#   scale_y_continuous(breaks = seq(0, 1, 0.025)) +\n#   # Mean and SE portion of plot\n#   geom_errorbar(data = taskVarMeans, \n#                 aes(x = n, ymin = SDMean - SDSE, ymax = SDMean + SDSE, colour = Source, width = 1.5),\n#                 position = position_dodge(width = 1)) +\n#   geom_point(data = taskVarMeans, \n#              aes(x = n, y = SDMean, colour = Source),\n#              size = 2,\n#              position = position_dodge(width = 1)) +\n#   geom_line(data = taskVarMeans,\n#             aes(x = n, y = SDMean, colour = Source),\n#             position = position_dodge(width = 1)) +\n#   scale_fill_manual(values = compPalette) +\n#   scale_colour_manual(values = compPalette) +\n#   theme(legend.position = \"none\",\n#         axis.text = element_text(size = 8),\n#         axis.title = element_text(size = 10))\n\ngg_varNorm <- ggplot() +\n  geom_hline(data = taskVarMean, \n             aes(yintercept = 1),\n             colour = \"grey30\") +\n  geom_point(data = taskVarMean, \n             aes(x = n, y = NormVarMean, colour = Source),\n             size = 0.9,\n             alpha = 0.4,\n             position = position_dodge(width = 1),\n             stroke = 0) +\n  theme_classic() +\n  xlab(\"Group size\") +\n  ylab(\"Relative behavioral variation\") +\n  scale_x_continuous(breaks = unique(taskVarMean$n)) +\n  scale_y_continuous(breaks = seq(0, 3, 0.5)) +\n  # Mean and SE portion of plot\n  geom_errorbar(data = taskVarMeans, \n                aes(x = n, ymin = NormVarMean - NormVarMeanSE, ymax = NormVarMean + NormVarMeanSE, colour = Source),\n                width = 1.5,\n                position = position_dodge(width = 1)) +\n  geom_point(data = taskVarMeans, \n             aes(x = n, y = NormVarMean, colour = Source),\n             size = 2,\n             position = position_dodge(width = 1)) +\n  geom_line(data = taskVarMeans,\n            aes(x = n, y = NormVarMean, colour = Source),\n            position = position_dodge(width = 1)) +\n  scale_fill_manual(values = compPalette) +\n  scale_colour_manual(values = compPalette) +\n  theme(legend.position = \"none\",\n        axis.text = element_text(size = 8),\n        axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)))\n\n\ngg_mean <- ggplot() +\n  geom_hline(data = taskVarMean, \n             aes(yintercept = 1),\n             colour = \"grey30\") +\n  geom_point(data = taskVarMean,\n             aes(x = n, y = NormMean, colour = Source),\n             size = 0.9,\n             alpha = 0.4,\n             position = position_dodge(width = 1),\n             stroke = 0) +\n  theme_classic() +\n  xlab(\"Group size\") +\n  ylab(\"Relative task 1 frequency\") +\n  scale_x_continuous(breaks = unique(taskVarMean$n)) +\n  scale_y_continuous(breaks = seq(0, 1.5, 0.05)) +\n  # Mean and SE portion of plot\n  geom_errorbar(data = taskVarMeans, \n                aes(x = n, ymin = NormMean - NormMeanSE, ymax = NormMean + NormMeanSE, colour = Source),\n                width = 1.5,\n                position = position_dodge(width = 1)) +\n  geom_point(data = taskVarMeans, \n             aes(x = n, y = NormMean, colour = Source),\n             size = 2,\n             position = position_dodge(width = 1)) +\n  geom_line(data = taskVarMeans,\n            aes(x = n, y = NormMean, colour = Source),\n            position = position_dodge(width = 1)) +\n  scale_fill_manual(values = compPalette) +\n  scale_colour_manual(values = compPalette) +\n  theme(legend.position = \"none\",\n        axis.text = element_text(size = 8),\n        axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)))\n\n####################\n# Task Rank Correlation\n####################\n# Unlist\ntaskCorrTot <- do.call(\"rbind\", groups_taskCorr)\ntaskCorrTot <- taskCorrTot %>% \n  mutate(TaskMean = (Task1 + Task2) / 2)\n\n# Manipulate and bind with Yuko data\ntaskCorrTot <- taskCorrTot %>% \n  mutate(Source = \"Model\") %>% \n  select(n, TaskMean, Source) %>% \n  rbind(yukoCorr) %>% \n  mutate(Source = as.factor(Source))\n\n# Calculate means and SE\ntaskCorrMeans <- taskCorrTot %>% \n  group_by(Source, n) %>% \n  summarise(SpecMean = mean(TaskMean),\n            SpecSE = sd(TaskMean) / sqrt(length(TaskMean)),\n            SpecCI = 1.96 * SpecSE)\n\n# Plot\ngg_corr <- ggplot() +\n  geom_hline(data = taskCorrTot, \n             aes(yintercept = 0),\n             colour = \"grey30\") +\n  geom_point(data = taskCorrTot, \n             aes(x = n, y = TaskMean, fill = Source, colour = Source), \n             size = 0.9, \n             position = position_dodge(width = 1),\n             alpha = 0.4,\n             stroke = 0) +\n  theme_classic() +\n  labs(x = \"Group size\",\n       y = \"Specialization\") +\n  scale_x_continuous(breaks = unique(taskCorrTot$n)) +\n  scale_y_continuous(breaks = seq(-1, 1, 0.2)) +\n  scale_fill_manual(values = compPalette) +\n  scale_colour_manual(values = compPalette) +\n  theme(legend.position = \"none\",\n        axis.text = element_text(size = 8),\n        axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0))) +\n  # Mean and SE portion of plot\n  geom_errorbar(data = taskCorrMeans, \n                aes(x = n, ymin = SpecMean - SpecSE, ymax = SpecMean + SpecSE, colour = Source),\n                width = 1.5,\n                position = position_dodge(width = 1)) +\n  geom_point(data = taskCorrMeans, \n             aes(x = n, y = SpecMean, colour = Source, fill = Source),\n             position = position_dodge(width = 1),\n             size = 2) +\n  geom_line(data = taskCorrMeans,\n            aes(x = n, y = SpecMean,  colour = Source),\n            position = position_dodge(width = 1))\n\n\n####################\n# Plot all\n####################\n\n\n# MultiPlot\npng(filename = paste0(\"output/_ComprehnsivePlots/\", filename, \".png\"), width = 4, height = 4, units = \"in\", res = 800)\nmultiplot(gg_dist, gg_mean, gg_corr, gg_varNorm, cols = 2)  \ndev.off()\n\n\n\n####################\n# Save all\n####################\n# save(groups_entropy, groups_stim, groups_taskCorr, groups_taskDist, groups_taskStep, groups_taskTally, taskCorrTot, \n#      file = paste0(\"output/__RData/\", filename, \".Rdata\"))\n\n",
    "created" : 1509229160545.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1685444524",
    "id" : "93CA03F2",
    "lastKnownWriteTime" : 1509229180,
    "last_content_update" : 1509229180963,
    "path" : "~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/3_SinglePlotResults.R",
    "project_path" : "scripts/3_SinglePlotResults.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}