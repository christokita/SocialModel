{
    "collab_server" : "",
    "contents" : "##################################################\n#\n# Qunatifying Division of Labor Functions\n#\n##################################################\n\n####################\n# Mutual Entropy DOL Measure\n####################\n# From Gorelick, Bertram, Killeen, & Fewell (2004)\nmutualEntropy <- function(TotalStateMat) {\n  # Normalize matrix\n  # normMat <- TotalStateMat / rowSums(TotalStateMat)\n  normMat <- TotalStateMat / sum(TotalStateMat)\n  # Total Individuals\n  n <- nrow(normMat)\n  m <- ncol(normMat)\n  total <- sum(normMat)\n  # Shannon's entropy of individuals H(X)\n  H_x <- apply(normMat, MARGIN = 1, function(ind) {\n    p_x <- sum(ind) / total\n    h_x <- p_x * log2(p_x)\n    if(is.na(h_x)) {\n      h_x <- 0\n    }\n    return(h_x)\n  })\n  # Shannon's entropy of tasks H(Y)\n  H_y <- apply(normMat, MARGIN = 2, function(task) {\n    p_y <- sum(task) / total\n    h_y <- p_y * log2(p_y)\n    if(is.na(h_y)) {\n      h_y <- 0\n    }\n    return(h_y)\n  })\n  # Mutual entropy I(X,Y)\n  I_xy <- lapply(1:n, function(ind) {\n    # Loop through tasks for each individual\n    mutualEntr <- rep(NA, m)\n    for (task in 1:m) {\n      # joint probability p(x,y)\n      p_xy <- normMat[ind, task] / total\n      # calculate log portion\n      p_x <- sum(normMat[ind, ]) / total\n      p_y <- sum(normMat[ , task]) / total\n      logVal <- log2(p_xy / (p_x * p_y))\n      # If entry has zero probability, set total value to zero (instead of NA/-Inf)\n      entry <- p_xy * logVal\n      if (is.na(entry)) {\n        entry <- 0\n      }\n      # enter into list\n      mutualEntr[task] <- entry\n    }\n    mutualEntr <- sum(mutualEntr)\n    return(mutualEntr)\n  })\n  # Sum values \n  H_x <- -sum(H_x)\n  H_y <- -sum(H_y)\n  I_xy <- sum(unlist(I_xy))\n  # Calcualte symmetrid division of labor D(x,y)\n  D_sym <- I_xy / sqrt(H_x * H_y)\n  D_yx <- I_xy / H_x\n  D_xy <- I_xy / H_y\n  # Dataframe\n  D <- data.frame(Dsym = D_sym, Dyx = D_yx, Dxy = D_xy)\n  # Return \n  return(D)\n}\n\n####################\n# Calcualte task rank\n####################\ncalculateTaskRank <- function(TaskStepMat) {\n  # Loop through columns\n  for (column in 1:ncol(TaskStepMat)) {\n    TaskStepMat[ , column] <- dense_rank(TaskStepMat[ , column])\n  }\n  # Return\n  return(TaskStepMat)\n}\n\n\n",
    "created" : 1509297912103.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "469373290",
    "id" : "64B96E13",
    "lastKnownWriteTime" : 1509304032,
    "last_content_update" : 1509304032066,
    "path" : "~/Documents/Research/Tarnita Lab/Social Interaction DOL/SocialModel/scripts/__Util_QuantDOLFunctions.R",
    "project_path" : "scripts/__Util_QuantDOLFunctions.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}